(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1120:function(e,t,n){"use strict";var r=n(0),o=n(7);t.a=function(e){var t=e.className,n=void 0===t?"":t,a=e.color,i=void 0===a?"#999":a,c=e.height,s=void 0===c?14:c,l=e.title,u=e.width,f=void 0===u?14:u;return r.createElement(o.a,{className:"icon-edit ".concat(n),height:s,title:l,viewBox:"0 0 14 14",width:f},r.createElement("path",{className:"fill-color",d:"M3.21 7.89l6.47-6.48a2 2 0 0 1 2.88 2.78h-.05L6 10.72 3.21 7.89zM2.24 9l2.83 2.83L1.67 13c-.52.18-.79-.1-.62-.61z",fill:i}))}},1121:function(e,t,n){var r=n(1129),o=n(1132),a=n(1133),i=1,c=2;e.exports=function(e,t,n,s,l,u){var f=n&i,p=e.length,d=t.length;if(p!=d&&!(f&&d>p))return!1;var m=u.get(e);if(m&&u.get(t))return m==t;var h=-1,b=!0,v=n&c?new r:void 0;for(u.set(e,t),u.set(t,e);++h<p;){var y=e[h],g=t[h];if(s)var E=f?s(g,y,h,t,e,u):s(y,g,h,e,t,u);if(void 0!==E){if(E)continue;b=!1;break}if(v){if(!o(t,function(e,t){if(!a(v,t)&&(y===e||l(y,e,n,s,u)))return v.push(t)})){b=!1;break}}else if(y!==g&&!l(y,g,n,s,u)){b=!1;break}}return u.delete(e),u.delete(t),b}},1125:function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(11),i=n.n(a);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e};"object"==typeof Reflect&&Reflect.construct;var l="undefined"!=typeof window&&"undefined"!=typeof document,u=!!l&&!!document.documentElement.currentStyle,f={"min-height":"0","max-height":"none",height:"0",visibility:"hidden",overflow:"hidden",position:"absolute","z-index":"-1000",top:"0",right:"0"},p=["letter-spacing","line-height","font-family","font-weight","font-size","font-style","tab-size","text-rendering","text-transform","width","text-indent","padding-top","padding-right","padding-bottom","padding-left","border-top-width","border-right-width","border-bottom-width","border-left-width","box-sizing"],d={},m=l&&document.createElement("textarea"),h=function(e){Object.keys(f).forEach(function(t){e.style.setProperty(t,f[t],"important")})};function b(e,t,n,r,o){void 0===n&&(n=!1),void 0===r&&(r=null),void 0===o&&(o=null),null===m.parentNode&&document.body.appendChild(m);var a=function(e,t,n){void 0===n&&(n=!1);if(n&&d[t])return d[t];var r=window.getComputedStyle(e);if(null===r)return null;var o=p.reduce(function(e,t){return e[t]=r.getPropertyValue(t),e},{}),a=o["box-sizing"];if(""===a)return null;u&&"border-box"===a&&(o.width=parseFloat(o.width)+parseFloat(r["border-right-width"])+parseFloat(r["border-left-width"])+parseFloat(r["padding-right"])+parseFloat(r["padding-left"])+"px");var i=parseFloat(o["padding-bottom"])+parseFloat(o["padding-top"]),c=parseFloat(o["border-bottom-width"])+parseFloat(o["border-top-width"]),s={sizingStyle:o,paddingSize:i,borderSize:c,boxSizing:a};n&&(d[t]=s);return s}(e,t,n);if(null===a)return null;var i=a.paddingSize,c=a.borderSize,s=a.boxSizing,l=a.sizingStyle;Object.keys(l).forEach(function(e){m.style[e]=l[e]}),h(m),m.value=e.value||e.placeholder||"x";var f=-1/0,b=1/0,v=m.scrollHeight;"border-box"===s?v+=c:"content-box"===s&&(v-=i),m.value="x";var y=m.scrollHeight-i;return null===r&&null===o||(null!==r&&(f=y*r,"border-box"===s&&(f=f+i+c),v=Math.max(f,v)),null!==o&&(b=y*o,"border-box"===s&&(b=b+i+c),v=Math.min(b,v))),{height:v,minHeight:f,maxHeight:b,rowCount:Math.floor(v/y)}}l&&h(m);var v,y=(void 0===v&&(v=0),function(){return++v}),g=function(){},E=l&&window.requestAnimationFrame?[window.requestAnimationFrame,window.cancelAnimationFrame]:[setTimeout,clearTimeout],w=E[0],S=E[1],C=function(e){var t,n;function r(t){var n;return(n=e.call(this,t)||this)._resizeLock=!1,n._onRootDOMNode=function(e){n._rootDOMNode=e,n.props.inputRef(e)},n._onChange=function(e){n._controlled||n._resizeComponent(),n.props.onChange(e)},n._resizeComponent=function(e){if(void 0===e&&(e=g),void 0!==n._rootDOMNode){var t=b(n._rootDOMNode,n._uid,n.props.useCacheForDOMMeasurements,n.props.minRows,n.props.maxRows);if(null!==t){var r=t.height,o=t.minHeight,a=t.maxHeight,i=t.rowCount;n.rowCount=i,n.state.height===r&&n.state.minHeight===o&&n.state.maxHeight===a?e():n.setState({height:r,minHeight:o,maxHeight:a},e)}else e()}else e()},n.state={height:t.style&&t.style.height||0,minHeight:-1/0,maxHeight:1/0},n._uid=y(),n._controlled="string"==typeof t.value,n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=r.prototype;return a.render=function(){var e=this.props,t=(e.inputRef,e.maxRows,e.minRows,e.onHeightChange,e.useCacheForDOMMeasurements,function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["inputRef","maxRows","minRows","onHeightChange","useCacheForDOMMeasurements"]));return t.style=c({},t.style,{height:this.state.height}),Math.max(t.style.maxHeight||1/0,this.state.maxHeight)<this.state.height&&(t.style.overflow="hidden"),o.a.createElement("textarea",c({},t,{onChange:this._onChange,ref:this._onRootDOMNode}))},a.componentDidMount=function(){var e=this;this._resizeComponent(),this._resizeListener=function(){e._resizeLock||(e._resizeLock=!0,e._resizeComponent(function(){return e._resizeLock=!1}))},window.addEventListener("resize",this._resizeListener)},a.componentDidUpdate=function(e,t){var n=this;e!==this.props&&(this._clearNextFrame(),this._onNextFrameActionId=w(function(){return n._resizeComponent()})),this.state.height!==t.height&&this.props.onHeightChange(this.state.height,this)},a.componentWillUnmount=function(){var e;this._clearNextFrame(),window.removeEventListener("resize",this._resizeListener),e=this._uid,delete d[e]},a._clearNextFrame=function(){S(this._onNextFrameActionId)},r}(o.a.Component);C.propTypes={inputRef:i.a.func,maxRows:i.a.number,minRows:i.a.number,onChange:i.a.func,onHeightChange:i.a.func,useCacheForDOMMeasurements:i.a.bool,value:i.a.string},C.defaultProps={inputRef:g,onChange:g,onHeightChange:g,useCacheForDOMMeasurements:!1},t.a=C},1126:function(e,t,n){var r=n(1127);e.exports=function(e,t){return r(e,t)}},1127:function(e,t,n){var r=n(1128),o=n(70);e.exports=function e(t,n,a,i,c){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,a,i,e,c))}},1128:function(e,t,n){var r=n(346),o=n(1121),a=n(1134),i=n(1137),c=n(256),s=n(61),l=n(255),u=n(348),f=1,p="[object Arguments]",d="[object Array]",m="[object Object]",h=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,b,v,y){var g=s(e),E=s(t),w=g?d:c(e),S=E?d:c(t),C=(w=w==p?m:w)==m,k=(S=S==p?m:S)==m,O=w==S;if(O&&l(e)){if(!l(t))return!1;g=!0,C=!1}if(O&&!C)return y||(y=new r),g||u(e)?o(e,t,n,b,v,y):a(e,t,w,n,b,v,y);if(!(n&f)){var _=C&&h.call(e,"__wrapped__"),x=k&&h.call(t,"__wrapped__");if(_||x){var j=_?e.value():e,T=x?t.value():t;return y||(y=new r),v(j,T,n,b,y)}}return!!O&&(y||(y=new r),i(e,t,n,b,v,y))}},1129:function(e,t,n){var r=n(347),o=n(1130),a=n(1131);function i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}i.prototype.add=i.prototype.push=o,i.prototype.has=a,e.exports=i},1130:function(e,t){var n="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,n),this}},1131:function(e,t){e.exports=function(e){return this.__data__.has(e)}},1132:function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},1133:function(e,t){e.exports=function(e,t){return e.has(t)}},1134:function(e,t,n){var r=n(161),o=n(514),a=n(191),i=n(1121),c=n(1135),s=n(1136),l=1,u=2,f="[object Boolean]",p="[object Date]",d="[object Error]",m="[object Map]",h="[object Number]",b="[object RegExp]",v="[object Set]",y="[object String]",g="[object Symbol]",E="[object ArrayBuffer]",w="[object DataView]",S=r?r.prototype:void 0,C=S?S.valueOf:void 0;e.exports=function(e,t,n,r,S,k,O){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case E:return!(e.byteLength!=t.byteLength||!k(new o(e),new o(t)));case f:case p:case h:return a(+e,+t);case d:return e.name==t.name&&e.message==t.message;case b:case y:return e==t+"";case m:var _=c;case v:var x=r&l;if(_||(_=s),e.size!=t.size&&!x)return!1;var j=O.get(e);if(j)return j==t;r|=u,O.set(e,t);var T=i(_(e),_(t),r,S,k,O);return O.delete(e),T;case g:if(C)return C.call(e)==C.call(t)}return!1}},1135:function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}},1136:function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}},1137:function(e,t,n){var r=n(515),o=1,a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,i,c,s){var l=n&o,u=r(e),f=u.length;if(f!=r(t).length&&!l)return!1;for(var p=f;p--;){var d=u[p];if(!(l?d in t:a.call(t,d)))return!1}var m=s.get(e);if(m&&s.get(t))return m==t;var h=!0;s.set(e,t),s.set(t,e);for(var b=l;++p<f;){var v=e[d=u[p]],y=t[d];if(i)var g=l?i(y,v,d,t,e,s):i(v,y,d,e,t,s);if(!(void 0===g?v===y||c(v,y,n,i,s):g)){h=!1;break}b||(b="constructor"==d)}if(h&&!b){var E=e.constructor,w=t.constructor;E!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof E&&E instanceof E&&"function"==typeof w&&w instanceof w)&&(h=!1)}return s.delete(e),s.delete(t),h}},1164:function(e,t,n){},1165:function(e,t,n){},1166:function(e,t,n){},1167:function(e,t,n){},1168:function(e,t,n){},1169:function(e,t,n){},1170:function(e,t,n){},1171:function(e,t,n){},1172:function(e,t,n){},1173:function(e,t,n){},1174:function(e,t,n){},1219:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(5),i=n.n(a),c=n(9),s=n.n(c),l=n(135),u=n.n(l),f=n(80),p=n(189),d=n(190),m=n(341),h=n(342),b=n(343),v=(n(98),n(1118)),y=n(1117),g=n(1),E=n(2),w=n(13),S=n.n(w),C=n(3),k=n(16),O=n(345),_=n(1143),x=function(e){var t=e.card.status,n=void 0===t?{}:t,o=n.code,a=n.message,i=C.a.skillUnknownError;switch(o){case g.me:i=C.a.skillInvalidFileSizeError;break;case g.le:i=C.a.skillInvalidFileExtensionError;break;case g.je:case g.ie:case g.ne:case g.oe:i=C.a.skillUnknownError;break;case g.ke:i=C.a.skillFileProcessingError;break;case g.te:i=C.a.skillPendingStatus;break;case g.se:i=C.a.skillInvokedStatus;break;default:if(a)return a}return r.createElement(E.b,i)},j=n(6),T=n.n(j),N=n(15),P=n(32),A=n(1120),I=n(7),R=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,a=void 0===o?"#999":o,i=e.height,c=void 0===i?14:i,s=e.title,l=e.width,u=void 0===l?14:l;return r.createElement(I.a,{className:"icon-copy ".concat(n),height:c,title:s,viewBox:"0 0 14 14",width:u},r.createElement("path",{className:"fill-color",d:"M1 11a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h9a1 1 0 0 1 0 2H2v8a1 1 0 0 1-1 1z",fill:a}),r.createElement("path",{className:"fill-color",d:"M13 3H3v10a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zm-3 8H7a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2zm0-3H7a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2z",fill:a}))},M=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,a=void 0===o?"#979797":o,i=e.height,c=void 0===i?13:i,s=e.title,l=e.width,u=void 0===l?13:l;return r.createElement(I.a,{className:"icon-expand ".concat(n),height:c,title:s,viewBox:"0 0 13 13",width:u},r.createElement("path",{className:"fill-color",d:"M12 0H6a1 1 0 0 0 0 2h5v5a1 1 0 0 0 2 0V1a1 1 0 0 0-1-1zM7 11H2V6a1 1 0 0 0-2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2z",fill:a}))},D=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,a=void 0===o?"#979797":o,i=e.height,c=void 0===i?13:i,s=e.title,l=e.width,u=void 0===l?13:l;return r.createElement(I.a,{className:"icon-collapse ".concat(n),height:c,title:s,viewBox:"0 0 13 13",width:u},r.createElement("path",{className:"fill-color",d:"M8 6h4a1 1 0 0 0 0-2H9V1a1 1 0 0 0-2 0v4a1 1 0 0 0 1 1zM1 9h3v3a1 1 0 0 0 2 0V8a1 1 0 0 0-1-1H1a1 1 0 0 0 0 2z",fill:a}))},z=n(87),L=n(340),F=n(188);var V=function(e){return!!e&&"number"==typeof e.start},H=function(e){return Array.isArray(e)&&V(e[0])},B=function(e){var t=e.time,n=e.text,o=void 0===n?"":n,a=e.onClick,i=e.interactionTarget;return r.createElement(P.a,{className:"be-transcript-row","data-resin-target":i,onClick:a,type:"button"},t&&r.createElement("div",{className:"be-transcript-time"},t),r.createElement("div",{className:"be-transcript-text"},o))},K=n(1125),W=n(45),Y=n(31),U=(n(1164),function(e){var t=e.time,n=e.text,o=void 0===n?"":n,a=e.onSave,i=e.onCancel,c=e.onChange;return r.createElement("div",{className:"be-transcript-row be-transcript-editing-row"},t&&r.createElement("div",{className:"be-transcript-time"},t),r.createElement("div",{className:"be-transcript-text"},r.createElement(K.a,{maxRows:10,onChange:c,value:o}),r.createElement("div",{className:"be-transcript-buttons"},r.createElement(Y.a,{"data-resin-target":k.f.TRANSCRIPTS.EDIT_CANCEL,onClick:i,type:"button"},r.createElement(E.b,C.a.cancel)),r.createElement(W.a,{"data-resin-target":k.f.TRANSCRIPTS.EDIT_SAVE,onClick:a,type:"button"},r.createElement(E.b,C.a.save)))))}),q=(n(1165),function(e){var t=e.appears,n=e.text,r=e.isEditing,a=e.onClick,i=e.onSave,c=e.onCancel,s=e.onChange,l=e.interactionTarget,u=t,f=H(t)&&Array.isArray(t)&&1===t.length?Object(z.e)(u[0].start):void 0;return r?o.a.createElement(U,{onCancel:c,onChange:s,onSave:i,text:n,time:f}):o.a.createElement(B,{interactionTarget:l,onClick:a,text:n,time:f})});n(1166);function G(e){return(G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function X(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){ee(e,t,n[t])})}return e}function J(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(e){return(Q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Z(e,t){return(Z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ee(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var te=function(e){function t(){var e,n,o,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,c=new Array(i),s=0;s<i;s++)c[s]=arguments[s];return o=this,a=(e=Q(t)).call.apply(e,[this].concat(c)),n=!a||"object"!==G(a)&&"function"!=typeof a?$(o):a,ee($($(n)),"state",{isEditingIndex:void 0,newTranscriptText:"",isCollapsed:!0,isLoading:!1}),ee($($(n)),"transcriptReducer",function(e,t){var n=t.appears,r=t.text,o=H(n)&&Array.isArray(n)?"".concat(Object(z.e)(n[0].start),":"):"";return"".concat(e).concat(o," ").concat(r||"","\r\n")}),ee($($(n)),"transcriptMapper",function(e,t){var o=e.appears,a=e.text,i=n.state,c=i.isEditingIndex,s=i.newTranscriptText,l=c===t,u=l?s:a,f=l?k.f.TRANSCRIPTS.EDIT_TEXT:k.f.TRANSCRIPTS.TRANSCRIPT;return r.createElement(q,{key:t,appears:o,interactionTarget:f,isEditing:l,onCancel:n.onCancel,onChange:n.onChange,onClick:function(){return n.onClick(t)},onSave:n.onSave,text:u})}),ee($($(n)),"toggleIsEditing",function(){n.setState(function(e){return{isEditingIndex:"number"==typeof e.isEditingIndex?void 0:-1}})}),ee($($(n)),"onSave",function(){var e=n.props,t=e.card.entries,r=e.onSkillChange,o=n.state,a=o.isEditingIndex,i=o.newTranscriptText;if("number"==typeof a){var c=t[a];c.text===i?n.onCancel():(n.setState({isLoading:!0,isEditingIndex:-1}),r(null,null,[{replacement:X({},c,{text:i}),replaced:c}]))}}),ee($($(n)),"onCancel",function(){n.setState({isEditingIndex:-1,newTranscriptText:""})}),ee($($(n)),"onChange",function(e){var t=e.currentTarget;n.setState({newTranscriptText:t.value})}),ee($($(n)),"onClick",function(e){var t=n.props.card.entries;"number"==typeof n.state.isEditingIndex?n.setState({isEditingIndex:e,newTranscriptText:t[e].text}):n.previewSegment(e)}),ee($($(n)),"copyTranscript",function(){var e,t,r,o=n.props.card.entries;e=o.reduce(n.transcriptReducer,""),t=document.createElement("textarea"),r=document.body,t.value=e,t.style.display="hidden",r&&(r.appendChild(t),t.select(),document.execCommand("copy"),r.removeChild(t)),n.copyBtn&&n.copyBtn.classList.add("be-transcript-copied"),setTimeout(function(){n.copyBtn&&n.copyBtn.classList.remove("be-transcript-copied")},1e3)}),ee($($(n)),"copyBtnRef",function(e){n.copyBtn=e}),ee($($(n)),"toggleExpandCollapse",function(){n.setState(function(e){return{isCollapsed:!e.isCollapsed}})}),n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Z(e,t)}(t,r["PureComponent"]),n=t,(o=[{key:"componentWillReceiveProps",value:function(){var e="number"==typeof this.state.isEditingIndex;this.setState({isEditingIndex:e?-1:void 0,newTranscriptText:"",isLoading:!1})}},{key:"previewSegment",value:function(e){var t=this.props,n=t.card.entries,r=t.getViewer,o=n[e].appears,a=r?r():null,i=H(o)&&Array.isArray(o)&&1===o.length,c=i?o[0].start:0;i&&a&&"function"==typeof a.play&&a.play(c)}},{key:"render",value:function(){var e=this.props,t=e.card.entries,n=e.isEditable,o=this.state,a=o.isEditingIndex,i=o.isCollapsed,c=o.isLoading,s=t.length>0,l=t.length>5,u="number"==typeof a,f=T()("be-transcript-edit",{"be-transcript-is-editing":u}),p=T()({"be-transcript-content-collapsed":i}),d=i?C.a.expand:C.a.collapse;return r.createElement(L.a,{className:"be-transcript",isLoading:c},s&&!c&&r.createElement("div",{className:"be-transcript-actions"},r.createElement(F.a,{text:r.createElement(E.b,C.a.copy)},r.createElement(P.a,{className:"be-transcript-copy","data-resin-target":k.f.TRANSCRIPTS.COPY,getDOMRef:this.copyBtnRef,onClick:this.copyTranscript,type:"button"},r.createElement(R,{color:N.s}))),l&&r.createElement(F.a,{text:r.createElement(E.b,d)},r.createElement(P.a,{className:"be-transcript-expand","data-resin-target":k.f.TRANSCRIPTS.EXPAND,onClick:this.toggleExpandCollapse,type:"button"},i?r.createElement(M,{color:N.s}):r.createElement(D,{color:N.s}))),n&&r.createElement(F.a,{text:r.createElement(E.b,C.a.editLabel)},r.createElement(P.a,{className:f,"data-resin-target":k.f.TRANSCRIPTS.EDIT,onClick:this.toggleIsEditing,type:"button"},r.createElement(A.a,null)))),u?r.createElement("div",{className:"be-transcript-edit-message"},r.createElement(E.b,C.a.transcriptEdit)):null,s?r.createElement("div",{className:p},t.map(this.transcriptMapper)):r.createElement(E.b,C.a.skillNoInfoFoundError))}}])&&J(n.prototype,o),a&&J(n,a),t}(),ne=n(136),re=n(495),oe=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map(function(e,t){return{displayText:e.text,value:t}})};n(1167);function ae(e){return(ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ie(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ce(e){return(ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ue(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var fe=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=ce(t).call(this,e),n=!o||"object"!==ae(o)&&"function"!=typeof o?le(r):o,ue(le(le(n)),"onRemove",function(e,t){var r=n.props;(0,r.onDelete)(r.keywords[t])}),ue(le(le(n)),"onKeyDown",function(e){"Enter"!==e.key||n.state.isInCompositionMode||n.onBlur()}),ue(le(le(n)),"onBlur",function(){var e=n.props.onAdd,t=n.state.keyword;t&&e({type:"text",text:t})}),ue(le(le(n)),"onCompositionStart",function(){n.setState({isInCompositionMode:!0})}),ue(le(le(n)),"onCompositionEnd",function(){n.setState({isInCompositionMode:!1})}),ue(le(le(n)),"onInput",function(e){var t=e.currentTarget;n.setState({keyword:t.value})}),n.state={pills:oe(e.keywords),keyword:"",isInCompositionMode:!1},n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(t,r["PureComponent"]),n=t,(o=[{key:"componentWillReceiveProps",value:function(e){this.setState({pills:oe(e.keywords),keyword:""})}},{key:"render",value:function(){var e=this.props,t=e.onSave,n=e.onCancel,o=this.state,a=o.pills,i=o.keyword;return r.createElement("span",{className:"pill-selector-wrapper"},r.createElement(re.a,{onBlur:this.onBlur,onCompositionEnd:this.onCompositionEnd,onCompositionStart:this.onCompositionStart,onInput:this.onInput,onKeyDown:this.onKeyDown,onPaste:this.onInput,onRemove:this.onRemove,selectedOptions:a,value:i}),r.createElement("div",{className:"be-keywords-buttons"},r.createElement(Y.a,{"data-resin-target":k.f.KEYWORDS.EDIT_CANCEL,onClick:n,type:"button"},r.createElement(E.b,C.a.cancel)),r.createElement(W.a,{"data-resin-target":k.f.KEYWORDS.EDIT_SAVE,onClick:t,type:"button"},r.createElement(E.b,C.a.save))))}}])&&ie(n.prototype,o),a&&ie(n,a),t}(),pe=n(1126),de=n.n(pe),me=n(42);function he(){return(he=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var be=function(e){var t=e.options,n=e.onSelect,r=e.selectedOptions,a=void 0===r?[]:r,i=e.buttonProps,c=void 0===i?{}:i;return o.a.createElement("div",{className:"pill-cloud-container"},t&&t.map(function(e){return o.a.createElement(me.a,he({key:e.value,className:T()("pill","pill-cloud-button",{"is-selected":a.find(function(t){return de()(t,e)})}),onClick:n?function(){return n(e)}:void 0},c),e.displayText)}))},ve=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,a=void 0===o?"#999":o,i=e.height,c=void 0===i?14:i,s=e.title,l=e.width,u=void 0===l?14:l;return r.createElement(I.a,{className:"icon-track-next ".concat(n),height:c,title:s,viewBox:"0 0 14 14",width:u},r.createElement("path",{className:"fill-color",d:"M7.72 7.85a1 1 0 0 0 0-1.41l-5-4.81A1 1 0 0 0 2 1.35a1 1 0 0 0-1 1V12a1 1 0 0 0 .28.69 1 1 0 0 0 1.41 0l5-4.81zM13 2v10a1 1 0 0 1-1 1 1 1 0 0 1-1-1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1z",fill:a}))},ye=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,a=void 0===o?"#999":o,i=e.height,c=void 0===i?14:i,s=e.title,l=e.width,u=void 0===l?14:l;return r.createElement(I.a,{className:"icon-track-previous ".concat(n),height:c,title:s,viewBox:"0 0 14 14",width:u},r.createElement("path",{className:"fill-color",d:"M6.31 7.88l5 4.81a1 1 0 0 0 1.41 0A1 1 0 0 0 13 12V2.35a1 1 0 0 0-1-1 1 1 0 0 0-.69.28l-5 4.81a1 1 0 0 0 0 1.41zM2 1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1 1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z",fill:a}))},ge=(n(1168),function(e){var t=e.start,n=e.end,r=e.duration,a=e.onClick,i=e.index,c=e.interactionTarget;if("number"!=typeof t||!r||t>=r)return null;var s=Math.round(290*t/r),l=s+6,u="number"==typeof n?Math.max(l,290*n/r):l,f=Math.round(Math.min(290,u))-s;return f<6&&(s-=6-f,f=6),o.a.createElement(P.a,{className:"be-timeline-time","data-resin-target":c,onClick:function(){return a(i)},style:{left:"".concat(s,"px"),width:"".concat(f,"px")},type:"button"})}),Ee=(n(1169),function(e){var t=e.text,n=void 0===t?"":t,r=e.duration,a=void 0===r?0:r,i=e.timeslices,c=void 0===i?[]:i,s=e.getViewer,l=e.interactionTarget,u=-1,f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=t>0?Math.min(c.length-1,e+t):Math.max(0,e+t),r=s?s():null,o=c[n];V(o)&&r&&"function"==typeof r.play&&(r.play(o.start),u=n)};return o.a.createElement("div",{className:"be-timeline"},n&&o.a.createElement("div",{className:"be-timeline-label"},n),o.a.createElement("div",{className:"be-timeline-line-wrapper"},o.a.createElement("div",{className:"be-timeline-line"}),c.map(function(e,t){var n=e.start,r=e.end;return o.a.createElement(ge,{key:t,duration:a,end:r,index:t,interactionTarget:l,onClick:f,start:n})})),o.a.createElement("div",{className:"be-timeline-btns"},o.a.createElement(P.a,{"data-resin-target":k.f.TIMELINE.PREVIOUS,onClick:function(){return f(u,-1)},type:"button"},o.a.createElement(ye,{title:o.a.createElement(E.b,C.a.previousSegment)})),o.a.createElement(P.a,{"data-resin-target":k.f.TIMELINE.NEXT,onClick:function(){return f(u,1)},type:"button"},o.a.createElement(ve,{title:o.a.createElement(E.b,C.a.nextSegment)}))))});n(1170);function we(e){return(we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Se(){return(Se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ce(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oe(e,t){return(Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _e(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var je=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=new Array(a),c=0;c<a;c++)i[c]=arguments[c];return r=this,o=(e=ke(t)).call.apply(e,[this].concat(i)),n=!o||"object"!==we(o)&&"function"!=typeof o?_e(r):o,xe(_e(_e(n)),"state",{selectedIndex:-1}),xe(_e(_e(n)),"onSelect",function(e){var t=n.state.selectedIndex,r=e.value;n.setState({selectedIndex:t===r?-1:r})}),n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Oe(e,t)}(t,r["PureComponent"]),n=t,(o=[{key:"render",value:function(){var e=this.props,t=e.keywords,n=e.getViewer,o=e.duration,a=this.state.selectedIndex,i=oe(t),c=t[a],s=c?{selectedOptions:[i[a]]}:{};return r.createElement(r.Fragment,null,r.createElement(be,Se({onSelect:this.onSelect,options:i},s,{buttonProps:xe({},k.c,k.f.KEYWORDS.SELECT)})),!!c&&Array.isArray(c.appears)&&c.appears.length>0&&r.createElement(Ee,{duration:o,getViewer:n,interactionTarget:k.f.KEYWORDS.TIMELINE,text:c.text,timeslices:c.appears}))}}])&&Ce(n.prototype,o),a&&Ce(n,a),t}();n(1171);function Te(e){return(Te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pe(e){return(Pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ae(e,t){return(Ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ie(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Re(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Me=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Pe(t).call(this,e),n=!o||"object"!==Te(o)&&"function"!=typeof o?Ie(r):o,Re(Ie(Ie(n)),"toggleIsEditing",function(){n.setState(function(e){return{isEditing:!e.isEditing}})}),Re(Ie(Ie(n)),"onAdd",function(e){var t=n.props.transcript,r=n.state.adds,o=[],a=new RegExp("\\b".concat(e.text,"\\b"),"i");t&&Array.isArray(t.entries)&&t.entries.forEach(function(e){var t=e.text,n=e.appears;t&&a.test(t)&&Array.isArray(n)&&n.length>0&&o.push(n[0])}),e.appears=o,r.push(e),n.setState({adds:r.slice(0)})}),Re(Ie(Ie(n)),"onDelete",function(e){var t=n.state,r=t.adds,o=t.removes,a=r.findIndex(function(t){return t===e});a>-1?(r.splice(a,1),n.setState({adds:r.slice(0)})):(o.push(e),n.setState({removes:o.slice(0)}))}),Re(Ie(Ie(n)),"onSave",function(){var e=n.props.onSkillChange,t=n.state,r=t.removes,o=t.adds;n.toggleIsEditing(),(r.length>0||o.length>0)&&(n.setState({isLoading:!0}),e(r,o))}),Re(Ie(Ie(n)),"onCancel",function(){n.resetState(n.props)}),n.state={keywords:e.card.entries,adds:[],removes:[],isEditing:e.hasError,hasError:e.hasError,isLoading:!1},n}var n,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ae(e,t)}(t,r["PureComponent"]),n=t,(a=[{key:"resetState",value:function(e){this.setState({keywords:e.card.entries,adds:[],removes:[],isEditing:!1,hasError:!1,isLoading:!1})}},{key:"render",value:function(){var e=this.props,t=e.card,n=e.getViewer,r=e.isEditable,a=t.duration,i=this.state,c=i.isEditing,s=i.isLoading,l=i.hasError,u=i.keywords,f=i.removes,p=i.adds,d=u.length>0,m=u.filter(function(e){return!f.includes(e)}).concat(p),h=T()("be-keyword-edit",{"be-keyword-is-editing":c});return o.a.createElement(L.a,{className:"be-keywords",isLoading:s},d&&r&&!s&&o.a.createElement(F.a,{text:o.a.createElement(E.b,C.a.editLabel)},o.a.createElement(P.a,{className:h,"data-resin-target":k.f.KEYWORDS.EDIT,onClick:this.toggleIsEditing,type:"button"},o.a.createElement(A.a,null))),l&&o.a.createElement(ne.a,{title:o.a.createElement(E.b,C.a.sidebarSkillsErrorTitle)},o.a.createElement(E.b,C.a.sidebarSkillsErrorContent)),c&&o.a.createElement(fe,{keywords:m,onAdd:this.onAdd,onCancel:this.onCancel,onDelete:this.onDelete,onSave:this.onSave}),!c&&d&&o.a.createElement(je,{duration:a,getViewer:n,keywords:m}),!c&&!d&&o.a.createElement(E.b,C.a.skillNoInfoFoundError))}}])&&Ne(n.prototype,a),i&&Ne(n,i),t}(),De=n(47),ze=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,a=void 0===o?"#000000":o,i=e.height,c=void 0===i?16:i,s=e.title,l=e.width,u=void 0===l?16:l;return r.createElement(I.a,{className:"icon-minus ".concat(n),height:c,title:s,viewBox:"0 0 16 16",width:u},r.createElement("path",{d:"M2 5h8v2H2z",fill:a,fillRule:"evenodd"}))},Le=(n(1172),function(e){var t=e.face,n=e.selected,o=e.isEditing,a=e.onDelete,i=e.onSelect,c=!!n,s=t===n,l=c&&s&&!o,u=T()("be-face-wrapper",{"be-face-unselected":!o&&c&&!s});return r.createElement("div",{className:u},r.createElement(P.a,{className:"be-face","data-resin-target":k.f.FACES.FACE,onClick:function(){return!o&&i(t)},type:"button"},r.createElement("img",{alt:t.text,src:t.image_url,title:t.text}),l&&r.createElement(ze,{color:g.C})),o&&r.createElement(P.a,{className:"be-face-delete","data-resin-target":k.f.FACES.DELETE,onClick:function(){return a(t)},type:"button"},r.createElement(De.a,{color:g.B,height:16,width:16})))});n(1173);function Fe(e){return(Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function He(e){return(He=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Be(e,t){return(Be=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ke(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function We(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ye=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=He(t).call(this,e),n=!o||"object"!==Fe(o)&&"function"!=typeof o?Ke(r):o,We(Ke(Ke(n)),"toggleIsEditing",function(){n.setState(function(e){return{isEditing:!e.isEditing}})}),We(Ke(Ke(n)),"onSelect",function(e){var t=n.state.selected;n.setState({selected:t===e?void 0:e})}),We(Ke(Ke(n)),"onDelete",function(e){var t=n.state.removes;t.push(e),n.setState({removes:t.slice(0)})}),We(Ke(Ke(n)),"onSave",function(){var e=n.props.onSkillChange,t=n.state.removes;n.toggleIsEditing(),t.length>0&&(n.setState({isLoading:!0}),e(t))}),We(Ke(Ke(n)),"onCancel",function(){n.resetState(n.props)}),n.state={faces:e.card.entries,removes:[],isEditing:e.hasError,hasError:e.hasError,isLoading:!1},n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Be(e,t)}(t,r["PureComponent"]),n=t,(o=[{key:"resetState",value:function(e){this.setState({faces:e.card.entries,removes:[],isEditing:!1,selected:void 0,hasError:!1,isLoading:!1})}},{key:"render",value:function(){var e=this,t=this.props,n=t.card,o=t.isEditable,a=t.getViewer,i=this.state,c=i.selected,s=i.faces,l=i.removes,u=i.isEditing,f=i.hasError,p=i.isLoading,d=n.duration,m=s.length>0,h=s.filter(function(e){return!l.includes(e)}),b=T()("be-face-edit",{"be-faces-is-editing":u});return r.createElement(L.a,{className:"be-faces",isLoading:p},m&&o&&!p&&r.createElement(F.a,{text:r.createElement(E.b,C.a.editLabel)},r.createElement(P.a,{className:b,"data-resin-target":k.f.FACES.EDIT,onClick:this.toggleIsEditing,type:"button"},r.createElement(A.a,null))),f&&r.createElement(ne.a,{title:r.createElement(E.b,C.a.sidebarSkillsErrorTitle)},r.createElement(E.b,C.a.sidebarSkillsErrorContent)),m?h.map(function(t,n){return r.createElement(Le,{key:n,face:t,isEditing:u,onDelete:e.onDelete,onSelect:e.onSelect,selected:c})}):r.createElement(E.b,C.a.skillNoInfoFoundError),!!c&&!u&&Array.isArray(c.appears)&&c.appears.length>0&&r.createElement(Ee,{duration:d,getViewer:a,interactionTarget:k.f.FACES.TIMELINE,timeslices:c.appears}),u&&r.createElement("div",{className:"be-faces-buttons"},r.createElement(Y.a,{"data-resin-target":k.f.FACES.EDIT_CANCEL,onClick:this.onCancel,type:"button"},r.createElement(E.b,C.a.cancel)),r.createElement(W.a,{"data-resin-target":k.f.FACES.EDIT_SAVE,onClick:this.onSave,type:"button"},r.createElement(E.b,C.a.save))))}}])&&Ve(n.prototype,o),a&&Ve(n,a),t}(),Ue=function(e){var t=e.card,n=e.cards,r=e.hasError,a=e.isEditable,i=e.onSkillChange,c=e.getViewer;switch(t.skill_card_type){case g.qe:return o.a.createElement(Me,{card:t,getViewer:c,hasError:r,isEditable:a,onSkillChange:i,transcript:a?n.find(function(e){return e.skill_card_type===g.ve}):void 0});case g.ue:case g.pe:return o.a.createElement(Ye,{card:t,getViewer:c,hasError:r,isEditable:a,onSkillChange:i});case g.ve:return o.a.createElement(te,{card:t,getViewer:c,hasError:r,isEditable:a,onSkillChange:i});case g.re:return o.a.createElement(x,{card:t});default:return null}},qe=function(e){var t=e.file,n=e.cards,o=e.errors,a=e.getViewer,i=e.onSkillChange,c=t.permissions,s=!!(void 0===c?{}:c).can_upload;return n.map(function(e,c){e.error&&!e.status&&(e.skill_card_type=g.re,e.status={code:g.oe},delete e.error);var l=e.id||S()("card_"),u=Object(_.b)(t,e),f=function(e){switch(e.skill_card_type){case g.qe:return k.f.KEYWORDS.CARD;case g.pe:case g.ue:return k.f.FACES.CARD;case g.ve:return k.f.TRANSCRIPTS.CARD;default:return""}}(e),p=function(e){var t=e.skill_card_type,n=e.skill_card_title,o=void 0===n?{}:n,a=o.code,i=o.message,c="".concat(t,"Skill"),s=C.a[c]||C.a.defaultSkill;switch(a){case"skills_faces":return r.createElement(E.b,C.a.faceSkill);case"skills_transcript":return r.createElement(E.b,C.a.transcriptSkill);case"skills_topics":return r.createElement(E.b,C.a.topicsSkill);case"skills_status":return r.createElement(E.b,C.a.statusSkill);case"skills_error":return r.createElement(E.b,C.a.error);default:return i||r.createElement(E.b,s)}}(e),d=Array.isArray(e.entries)?e.entries.length>0:u;return u?r.createElement(O.a,{key:l,interactionTarget:f,isOpen:d,title:p},r.createElement(Ue,{card:e,cards:n,getViewer:a,hasError:!!o[c],isEditable:s,onSkillChange:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.apply(void 0,[c].concat(t))}})):null})};n(1174);function Ge(e){return(Ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){et(e,t,n[t])})}return e}function Je(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qe(e){return(Qe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ze(e,t){return(Ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $e(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function et(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"SkillsSidebarComponent",function(){return nt});var tt="".concat(g.Od,"_").concat(d.a);Object(p.b)(tt);var nt=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=Qe(t).call(this,e),n=!o||"object"!==Ge(o)&&"function"!=typeof o?$e(r):o,et($e($e(n)),"state",{errors:{}}),et($e($e(n)),"fetchSkillsSuccessCallback",function(e){n.updatePreviewTranscript(e),n.setState({cards:e})}),et($e($e(n)),"updatePreviewTranscript",function(e){var t=n.props,r=t.getPreview,o=t.getViewer,a=r?r():null,i=o?o():null,c=e.find(function(e){return e.skill_card_type===g.ve});c&&a&&(i?"function"==typeof i.loadAutoGeneratedCaptions&&i.loadAutoGeneratedCaptions(c):a.addListener("load",function(e){var t=e.viewer;"function"==typeof t.loadAutoGeneratedCaptions&&t.loadAutoGeneratedCaptions(c)}))}),et($e($e(n)),"onSaveSuccessHandler",function(e,t){var r=Xe({},n.state.errors);delete r[e],n.updatePreviewTranscript(t),n.setState({cards:t,errors:r})}),et($e($e(n)),"onSaveErrorHandler",function(e){var t=Xe({},n.state.errors);t[e]=!0,n.setState({errors:t})}),et($e($e(n)),"onSave",function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],a=n.props,i=a.api,c=a.file,l=n.state.cards,u=(void 0===l?[]:l)[e],f="/cards/".concat(e),p=[];if(s()(c,g.Hc,!1)&&u){if(Array.isArray(o)&&o.forEach(function(e){var t=e.replaced,n=e.replacement,r=u.entries.findIndex(function(e){return e===t});r>-1&&p.push({op:"replace",path:"".concat(f,"/entries/").concat(r),value:n})}),Array.isArray(t)){var d=[];t.forEach(function(e){var t=u.entries.findIndex(function(t){return t===e});t>-1&&d.push(t)}),d.sort(function(e,t){return t-e}).forEach(function(e){p.push({op:"remove",path:"".concat(f,"/entries/").concat(e)})})}Array.isArray(r)&&r.forEach(function(e){p.push({op:"add",path:"".concat(f,"/entries/-"),value:e})}),0!==p.length&&(p.splice(0,0,{op:"test",path:f,value:u}),i.getMetadataAPI(!1).updateSkills(c,p,function(t){n.onSaveSuccessHandler(e,t)},function(){n.onSaveErrorHandler(e)}))}}),n.props.logger.onReadyMetric({endMarkName:tt}),n}var n,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ze(e,t)}(t,r["PureComponent"]),n=t,(o=[{key:"componentDidMount",value:function(){var e=this.props,t=e.api,n=e.file;t.getMetadataAPI(!1).getSkills(n,this.fetchSkillsSuccessCallback,i.a)}},{key:"render",value:function(){var e=this.props,t=e.file,n=e.getViewer,o=this.state,a=o.cards,i=o.errors;return r.createElement(v.a,{className:"bcs-skills",title:y.a.getTitleForView(g.de)},a?r.createElement(qe,{cards:a,errors:i,file:t,getViewer:n,onSkillChange:this.onSave}):r.createElement(f.a,null))}}])&&Je(n.prototype,o),a&&Je(n,a),t}();t.default=u()([Object(b.a)(g.Od),Object(h.a)(g.Od),m.b])(nt)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,