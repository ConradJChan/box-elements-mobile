(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{1115:function(e,t,n){"use strict";n.r(t);n(258);var r=n(0),a=n.n(r),o=n(5),i=n.n(o),c=n(135),l=n.n(c),s=n(98),u=n(341),f=n(107),p=n(6),d=n.n(p),h=n(9),m=n.n(h),b=n(13),v=n.n(b),y=n(1222),g=n(80),O=n(426),E=n(2),S=n(7),w=function(e){var t=e.className,n=void 0===t?"":t,a=e.color,o=void 0===a?"#999":a,i=e.height,c=void 0===i?24:i,l=e.title,s=e.width,u=void 0===s?24:s;return r.createElement(S.a,{className:"icon-magic-wand ".concat(n),height:c,title:l,viewBox:"0 0 24 24",width:u},r.createElement("path",{className:"fill-color",d:"M19.91 5.84a2.85 2.85 0 0 0-4 0L3.83 17.89a2.83 2.83 0 0 0 4 4L19.91 9.83a2.84 2.84 0 0 0 0-3.99zm-1.6 2.44l-2.92 3-.86-.86 3-3a.51.51 0 0 1 .43-.18.61.61 0 0 1 .43.19l.08.1a.64.64 0 0 1-.16.75zM11.11 3.51a2.67 2.67 0 0 1 .91.86 5.39 5.39 0 0 1 .38.76l.06.14a7.6 7.6 0 0 1 .37-.76 2.71 2.71 0 0 1 .78-.84 4 4 0 0 1 .73-.4l.24-.11c-.25-.11-.5-.23-.74-.36a2.51 2.51 0 0 1-.94-.89 5.63 5.63 0 0 1-.4-.82v-.05a5.93 5.93 0 0 1-.34.72 2.73 2.73 0 0 1-.88.94 6.45 6.45 0 0 1-.74.38l-.16.06a4.3 4.3 0 0 1 .73.37zM8.48 7.61a1.9 1.9 0 0 1 .66.63 4.73 4.73 0 0 1 .28.55v.09a4.64 4.64 0 0 1 .26-.55 2.05 2.05 0 0 1 .56-.61 3.2 3.2 0 0 1 .54-.3l.22-.09a2.11 2.11 0 0 1-.52-.26 1.87 1.87 0 0 1-.68-.66 3.14 3.14 0 0 1-.29-.58c-.08.19-.16.35-.25.52a2 2 0 0 1-.68.65 3.89 3.89 0 0 1-.58.28h-.12a5.36 5.36 0 0 1 .6.33z",fill:o}))},k=function(e){var t=e.className,n=void 0===t?"":t,a=e.color,o=void 0===a?"#999":a,i=e.height,c=void 0===i?24:i,l=e.title,s=e.width,u=void 0===s?24:s;return r.createElement(S.a,{className:"icon-metadata-thick ".concat(n),height:c,title:l,viewBox:"0 0 24 24",width:u},r.createElement("path",{className:"fill-color",d:"M12,2A10,10,0,1,0,22,12,10,10,0,0,0,12,2Zm4.37,13.43a1,1,0,0,1-.37.07,1,1,0,0,1-.93-.63L13.9,11.94l-1,2a1,1,0,0,1-1.78,0l-1-2L8.93,14.87a1,1,0,1,1-1.86-.74l2-5a1,1,0,0,1,1.82-.08L12,11.26l1.11-2.21A1,1,0,0,1,14,8.5a1,1,0,0,1,.89.63l2,5A1,1,0,0,1,16.37,15.43Z",fill:o}))},P=function(e){var t=e.className,n=void 0===t?"":t,a=e.color,o=void 0===a?"#999":a,i=e.height,c=void 0===i?24:i,l=e.title,s=e.width,u=void 0===s?24:s;return r.createElement(S.a,{className:"icon-doc-info ".concat(n),height:c,title:l,viewBox:"0 0 24 24",width:u},r.createElement("path",{className:"fill-color",d:"M19.41 7.41l-4.82-4.82A2 2 0 0 0 13.17 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8.83a2 2 0 0 0-.59-1.42zM13 16a1 1 0 0 1-2 0v-4a1 1 0 0 1 2 0zm-1-6a1 1 0 1 1 1-1 1 1 0 0 1-1 1z",fill:o}))},j=function(e){var t=e.className,n=void 0===t?"":t,a=e.color,o=void 0===a?"#999":a,i=e.height,c=void 0===i?24:i,l=e.title,s=e.width,u=void 0===s?24:s;return r.createElement(S.a,{className:"icon-chat-round ".concat(n),height:c,title:l,viewBox:"0 0 24 24",width:u},r.createElement("path",{className:"fill-color",d:"M14 3h-4a8 8 0 0 0-5 14.26V21a1 1 0 0 0 .08.37 1 1 0 0 0 1.31.53L12 19h2a8 8 0 0 0 0-16zm-6 9a1 1 0 1 1 1-1 1 1 0 0 1-1 1zm4 0a1 1 0 1 1 1-1 1 1 0 0 1-1 1zm4 0a1 1 0 1 1 1-1 1 1 0 0 1-1 1z",fill:o}))},x=n(3),C=n(16),A=n(1144),N=n(188),L=(n(1152),function(e){var t=e.children,n=e["data-resin-target"],a=(e["data-testid"],e.isOpen),o=e.sidebarView,i=e.tooltip,c="/".concat(o);return r.createElement(y.c,{path:c},function(e){var o=e.match,l=!!o,s=function(){return l&&!!a},u=l&&o.isExact,f={open:!u||!a};return r.createElement(N.a,{position:"middle-left",text:i},r.createElement(A.b,{"aria-selected":s(),activeClassName:"bcs-is-selected",className:"bcs-NavButton","data-resin-target":n,isActive:s,replace:u,role:"tab",to:{pathname:c,state:f},type:"button"},t))})}),_=n(15),T=function(e){var t=e.className,n=void 0===t?"":t,a=e.color,o=void 0===a?_.h:a,i=e.height,c=void 0===i?16:i,l=e.title,s=e.width,u=void 0===s?16:s;return r.createElement(S.a,{className:"icon-hide ".concat(n),title:l,width:u,height:c,viewBox:"0 0 16 16"},r.createElement("path",{d:"M7.646 7.646L4.354 4.354a.5.5 0 0 1 0-.708l1.292-1.292a.5.5 0 0 1 .708 0l5.292 5.292a.5.5 0 0 1 0 .708l-5.292 5.292a.5.5 0 0 1-.708 0l-1.292-1.292a.5.5 0 0 1 0-.708l3.292-3.292a.5.5 0 0 0 0-.708z",fill:o,fillRule:"nonzero"}))},M=function(e){var t=e.className,n=void 0===t?"":t,a=e.color,o=void 0===a?_.h:a,i=e.height,c=void 0===i?16:i,l=e.title,s=e.width,u=void 0===s?16:s;return r.createElement(S.a,{className:"icon-show ".concat(n),title:l,width:u,height:c,viewBox:"0 0 16 16"},r.createElement("path",{d:"M7.354 7.646l3.292-3.292a.5.5 0 0 0 0-.708L9.354 2.354a.5.5 0 0 0-.708 0L3.354 7.646a.5.5 0 0 0 0 .708l5.292 5.292a.5.5 0 0 0 .708 0l1.292-1.292a.5.5 0 0 0 0-.708L7.354 8.354a.5.5 0 0 1 0-.708z",fill:o,fillRule:"nonzero"}))},I=n(22),V=n(25);n(1153);function R(){return(R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function F(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var D=Object(E.g)(function(e){var t=e.className,n=void 0===t?"":t,a=e.direction,o=void 0===a?"right":a,i=e.intl,c=e.isOpen,l=e.onClick,s=F(e,["className","direction","intl","isOpen","onClick"]),u=c?"":"collapsed",f=c?x.a.sidebarHide:x.a.sidebarShow,p=i.formatMessage(f),h=d()(n,"bdl-SidebarToggleButton",{"bdl-is-collapsed":u}),m="left"===o?"middle-right":"middle-left";return r.createElement(V.a,{position:m,text:p},r.createElement(I.a,R({"aria-label":p,className:h,onClick:l,type:"button"},s),"left"===o?c?r.createElement(M,{height:16,width:16}):r.createElement(T,{height:16,width:16}):c?r.createElement(T,{height:16,width:16}):r.createElement(M,{height:16,width:16})))}),H=Object(y.g)(function(e){var t=e.history,n=e.isOpen;return r.createElement(D,{"data-resin-target":C.e.TOGGLE,isOpen:n,onClick:function(e){e.preventDefault(),t.replace({state:{open:!n}})}})}),U=n(130),$=n(32),B=n(349),z=function(e){var t=e.isLoading,n=void 0!==t&&t,a=d()("bdl-AdditionalTabPlaceholder-icon",{"bdl-AdditionalTabPlaceholder-icon--loading":n});return r.createElement("div",{className:"bdl-AdditionalTabPlaceholder"},r.createElement("div",{className:a}))};n(1154);function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function G(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Z(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Q=function(e){function t(){var e,n,r,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=new Array(o),c=0;c<o;c++)i[c]=arguments[c];return r=this,a=(e=q(t)).call.apply(e,[this].concat(i)),n=!a||"object"!==J(a)&&"function"!=typeof a?Z(r):a,Y(Z(Z(n)),"state",{isErrored:!1}),Y(Z(Z(n)),"onImageError",function(){n.props.onImageLoad(),n.setState({isErrored:!0})}),n}var n,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(t,r["PureComponent"]),n=t,(a=[{key:"render",value:function(){var e,t=this.props,n=t.callback,a=t.id,o=t.isLoading,i=t.iconUrl,c=t.onImageLoad,l=t.title,s=G(t,["callback","id","isLoading","iconUrl","onImageLoad","title"]),u=this.state.isErrored,f=d()("bdl-AdditionalTab",{"bdl-AdditionalTab--hidden":o});return e=u?r.createElement(z,{isLoading:!1}):a&&a>0?r.createElement("img",{className:"bdl-AdditionalTab-icon",src:i,onError:this.onImageError,onLoad:c,alt:l}):r.createElement(B.a,{color:_.o}),r.createElement(U.a,{position:"middle-left",text:l},r.createElement($.a,{className:f,type:"button",onClick:function(){return n({id:a,callbackData:s})}},e))}}])&&W(n.prototype,a),o&&W(n,o),t}(),X=(n(1124),function(){return r.createElement("div",{className:"bdl-AdditionalTabPlaceholder"},r.createElement(B.a,{color:_.p,className:"bdl-AdditionalTabPlaceholder-moreIcon"}))}),ee=(n(1155),[z,z,z,z,z,X]),te=function(){return ee.map(function(e,t){return r.createElement(e,{isLoading:!0,key:t})})};function ne(e){return(ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function re(){return(re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ie(e,t){return(ie=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ce(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function le(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var se=function(e){function t(e){var n,r,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,a=oe(t).call(this,e),n=!a||"object"!==ne(a)&&"function"!=typeof a?ce(r):a,le(ce(ce(n)),"numLoadedTabs",0),le(ce(ce(n)),"onImageLoad",function(){var e=n.props.tabs;if(e){var t=e.find(function(e){return e.id<0&&!e.iconUrl}),r=e.length-(t?1:0);n.numLoadedTabs+=1,n.numLoadedTabs===r&&n.setState({isLoading:!1})}}),n.state={isLoading:!0},n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ie(e,t)}(t,r["PureComponent"]),n=t,(o=[{key:"render",value:function(){var e=this,t=this.props.tabs,n=this.state.isLoading;return a.a.createElement("div",{className:"bdl-AdditionalTabs"},n&&a.a.createElement(te,null),t&&t.map(function(t){return a.a.createElement(Q,re({key:t.id,onImageLoad:e.onImageLoad,isLoading:n},t))}))}}])&&ae(n.prototype,o),i&&ae(n,i),t}(),ue=n(1),fe=(n(1156),Object(E.g)(function(e){var t=e.additionalTabs,n=e.fileId,a=e.hasActivity,o=e.hasAdditionalTabs,i=e.hasDetails,c=e.hasMetadata,l=e.hasSkills,s=e.intl,u=e.isOpen,f=e.onNavigate;return r.createElement("div",{className:"bcs-SidebarNav","aria-label":s.formatMessage(x.a.sidebarNavLabel),role:"tablist"},r.createElement("div",{className:"bcs-SidebarNav-tabs"},a&&r.createElement(L,{"data-resin-target":C.e.ACTIVITY,isOpen:u,sidebarView:ue.ae,onNavigate:f,tooltip:r.createElement(E.b,x.a.sidebarActivityTitle)},r.createElement(j,null)),i&&r.createElement(L,{"data-resin-target":C.e.DETAILS,isOpen:u,sidebarView:ue.be,onNavigate:f,tooltip:r.createElement(E.b,x.a.sidebarDetailsTitle)},r.createElement(P,null)),l&&r.createElement(L,{"data-resin-target":C.e.SKILLS,isOpen:u,sidebarView:ue.de,onNavigate:f,tooltip:r.createElement(E.b,x.a.sidebarSkillsTitle)},r.createElement(w,null)),c&&r.createElement(L,{"data-resin-target":C.e.METADATA,isOpen:u,sidebarView:ue.ce,onNavigate:f,tooltip:r.createElement(E.b,x.a.sidebarMetadataTitle)},r.createElement(k,null)),o&&r.createElement(se,{key:n,tabs:t})),r.createElement("div",{className:"bcs-SidebarNav-footer"},r.createElement(H,{isOpen:u})))})),pe=n(1117);function de(){return(de=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var he="".concat(ue.Kd).concat("_JS_LOADING"),me="".concat(ue.Hd).concat("_JS_LOADING"),be="".concat(ue.Od).concat("_JS_LOADING"),ve="".concat(ue.Ld).concat("_JS_LOADING"),ye="".concat(ue.Pd).concat("_JS_LOADING"),ge=pe.a.getAsyncSidebarContent(ue.be,he),Oe=pe.a.getAsyncSidebarContent(ue.ae,me),Ee=pe.a.getAsyncSidebarContent(ue.de,be),Se=pe.a.getAsyncSidebarContent(ue.ce,ve),we=pe.a.getAsyncSidebarContent(ue.ee,ye),ke=function(e){var t=e.activitySidebarProps,n=e.currentUser,a=e.detailsSidebarProps,o=e.file,i=e.fileId,c=e.getPreview,l=e.getViewer,s=e.hasActivity,u=e.hasDetails,f=e.hasMetadata,p=e.hasSkills,d=e.hasVersions,h=e.isOpen,m=e.metadataSidebarProps,b=e.onVersionChange,v=e.onVersionHistoryClick;return h&&r.createElement(y.e,null,p&&r.createElement(y.c,{exact:!0,path:"/".concat(ue.de),render:function(){return r.createElement(Ee,{key:o.id,file:o,getPreview:c,getViewer:l,startMarkName:be})}}),s&&r.createElement(y.c,{exact:!0,path:"/".concat(ue.ae),render:function(){return r.createElement(Oe,de({currentUser:n,file:o,onVersionHistoryClick:v,startMarkName:me},t))}}),u&&r.createElement(y.c,{exact:!0,path:"/".concat(ue.be),render:function(){return r.createElement(ge,de({fileId:i,key:i,onVersionHistoryClick:v,startMarkName:he},a))}}),f&&r.createElement(y.c,{exact:!0,path:"/".concat(ue.ce),render:function(){return r.createElement(Se,de({fileId:i,startMarkName:ve},m))}}),d&&r.createElement(y.c,{path:"/:sidebar/versions/:versionId?",render:function(e){var t=e.match;return r.createElement(we,{fileId:i,key:i,onVersionChange:b,parentName:t.params.sidebar,versionId:t.params.versionId})}}),r.createElement(y.c,{render:function(){var e="";return p?e=ue.de:s?e=ue.ae:u?e=ue.be:f&&(e=ue.ce),r.createElement(y.b,{to:{pathname:"/".concat(e),state:{silent:!0}}})}}))},Pe=n(78);function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ae(e,t){return(Ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ne(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Le(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _e=function(e){function t(e){var n,r,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,a=Ce(t).call(this,e),n=!a||"object"!==je(a)&&"function"!=typeof a?Ne(r):a,Le(Ne(Ne(n)),"id",v()("bcs_")),Le(Ne(Ne(n)),"state",{isDirty:!1}),Le(Ne(Ne(n)),"store",new O.a),Le(Ne(Ne(n)),"handleVersionHistoryClick",function(e){var t=n.props,r=t.file,a=t.history,o=r.file_version,i=o?"/".concat(o.id):"";e.preventDefault&&e.preventDefault(),a.push("".concat(a.location.pathname,"/versions").concat(i))}),n.setForcedByLocation(),n}var n,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ae(e,t)}(t,r["Component"]),n=t,(a=[{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.fileId,r=t.history,a=t.location,o=e.fileId,i=e.location;this.state.isDirty||n===o||"/"===a.pathname||r.replace({pathname:"/",state:{silent:!0}}),a===i||this.getLocationState("silent")||(this.setForcedByLocation(),this.setState({isDirty:!0}))}},{key:"getLocationState",value:function(e){var t=this.props.location.state,n=void 0===t?{}:t;return m()(n,e)}},{key:"isForced",value:function(e){return void 0!==e&&this.store.setItem("bcs.force",e?"open":"closed"),this.store.getItem("bcs.force")}},{key:"isForcedOpen",value:function(){return"open"===this.isForced()}},{key:"isForcedSet",value:function(){return null!==this.isForced()}},{key:"setForcedByLocation",value:function(){var e=this.getLocationState("open");null!=e&&this.isForced(e)}},{key:"render",value:function(){var e=this.props,t=e.activitySidebarProps,n=e.additionalTabs,a=e.className,o=e.currentUser,i=e.detailsSidebarProps,c=e.features,l=e.file,s=e.fileId,u=e.getPreview,f=e.getViewer,p=e.hasAdditionalTabs,h=e.isLarge,m=e.isLoading,b=e.metadataEditors,v=e.metadataSidebarProps,y=e.onVersionChange,O=this.isForcedSet()?this.isForcedOpen():!!h,E=pe.a.canHaveActivitySidebar(this.props),S=pe.a.canHaveDetailsSidebar(this.props),w=pe.a.shouldRenderMetadataSidebar(this.props,b),k=pe.a.shouldRenderSkillsSidebar(this.props,l),P=Object(Pe.isFeatureEnabled)(c,"versions"),j=P?this.handleVersionHistoryClick:this.props.onVersionHistoryClick,x=d()("be bcs",a,{"bcs-is-open":O});return r.createElement("aside",{id:this.id,className:x},m?r.createElement("div",{className:"bcs-loading"},r.createElement(g.a,null)):r.createElement(r.Fragment,null,r.createElement(fe,{additionalTabs:n,fileId:s,hasActivity:E,hasAdditionalTabs:p,hasDetails:S,hasMetadata:w,hasSkills:k,isOpen:O}),r.createElement(ke,{activitySidebarProps:t,currentUser:o,detailsSidebarProps:i,file:l,fileId:s,getPreview:u,getViewer:f,hasActivity:E,hasDetails:S,hasMetadata:w,hasSkills:k,hasVersions:P,isOpen:O,key:l.id,metadataSidebarProps:v,onVersionChange:y,onVersionHistoryClick:j})))}}])&&xe(n.prototype,a),o&&xe(n,o),t}();Le(_e,"defaultProps",{isLarge:!0,isLoading:!1});var Te=l()([Pe.withFeatureConsumer,y.g])(_e);function Me(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Ie=function(e){var t=e.children,n=e.history,a=Me(e,["children","history"]);return n?r.createElement(y.d,{history:n},t):r.createElement(y.a,a,t)},Ve=n(190),Re=n(189),Fe=n(26),De=n(342),He=n(343);n(259),n(257),n(516),n(1160);function Ue(e){return(Ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Be(e){return(Be=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Je(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ge(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var We="".concat(ue.Jd,"_").concat(Ve.a);Object(Re.b)(We);var qe=function(e){function t(e){var n,r,a;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,a=Be(t).call(this,e),n=!a||"object"!==Ue(a)&&"function"!=typeof a?Je(r):a,Ge(Je(Je(n)),"state",{isLoading:!0}),Ge(Je(Je(n)),"errorCallback",function(e,t){console.error(e),n.props.onError(e,t,{error:e})}),Ge(Je(Je(n)),"fetchMetadataSuccessCallback",function(e){var t=e.editors;n.setState({metadataEditors:t})}),Ge(Je(Je(n)),"fetchFileSuccessCallback",function(e){n.setState({file:e,isLoading:!1},n.fetchMetadata)});var o=e.apiHost,i=e.cache,c=e.clientName,l=e.requestInterceptor,u=e.responseInterceptor,f=e.sharedLink,p=e.sharedLinkPassword,d=e.token;return n.api=new s.a({apiHost:o,cache:i,clientName:c,requestInterceptor:l,responseInterceptor:u,sharedLink:f,sharedLinkPassword:p,token:d}),e.logger.onReadyMetric({endMarkName:We}),n}var n,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(t,r["Component"]),n=t,(a=[{key:"clearCache",value:function(){this.api.destroy(!0)}},{key:"componentWillUnmount",value:function(){this.api.destroy(!1)}},{key:"componentDidMount",value:function(){this.fetchFile()}},{key:"componentDidUpdate",value:function(e){this.props.fileId!==e.fileId&&this.fetchFile()}},{key:"fetchMetadata",value:function(){var e=this.state.file,t=this.props.metadataSidebarProps.isFeatureEnabled,n=void 0===t||t;!n&&pe.a.canHaveMetadataSidebar(this.props)&&this.api.getMetadataAPI(!1).getMetadata(e,this.fetchMetadataSuccessCallback,i.a,n)}},{key:"fetchFile",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=this.props.fileId;this.setState({isLoading:!0}),t&&pe.a.canHaveSidebar(this.props)&&this.api.getFileAPI().getFile(t,this.fetchFileSuccessCallback,this.errorCallback,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){Ge(e,t,n[t])})}return e}({},e,{fields:Fe.g}))}},{key:"render",value:function(){var e=this.props,t=e.activitySidebarProps,n=e.additionalTabs,a=e.className,o=e.currentUser,i=e.defaultView,c=e.detailsSidebarProps,l=e.fileId,s=e.getPreview,p=e.getViewer,d=e.hasAdditionalTabs,h=e.hasActivityFeed,m=e.hasMetadata,b=e.hasSkills,v=e.history,y=e.isLarge,g=e.language,O=e.messages,E=e.metadataSidebarProps,S=e.onVersionChange,w=e.onVersionHistoryClick,k=this.state,P=k.file,j=k.isLoading,x=k.metadataEditors,C="/"===i.charAt(0)?i:"/".concat(i);return P&&l&&pe.a.shouldRenderSidebar(this.props,P,x)?r.createElement(f.a,{language:g,messages:O},r.createElement(u.a.Provider,{value:this.api},r.createElement(Ie,{history:v,initialEntries:[C]},r.createElement(Te,{activitySidebarProps:t,additionalTabs:n,className:a,currentUser:o,detailsSidebarProps:c,file:P,fileId:l,getPreview:s,getViewer:p,hasActivityFeed:h,hasAdditionalTabs:d,hasMetadata:m,hasSkills:b,isLarge:y,isLoading:j,metadataEditors:x,metadataSidebarProps:E,onVersionChange:S,onVersionHistoryClick:w})))):null}}])&&$e(n.prototype,a),o&&$e(n,o),t}();Ge(qe,"defaultProps",{activitySidebarProps:{},apiHost:ue.I,className:"",clientName:ue.y,defaultView:"",detailsSidebarProps:{},getPreview:i.a,getViewer:i.a,hasActivityFeed:!1,hasAdditionalTabs:!1,hasMetadata:!1,hasSkills:!1,isLarge:!0,metadataSidebarProps:{}});var Ke=l()([Pe.withFeatureProvider,Object(He.a)(ue.Jd),Object(De.a)(ue.Jd)])(qe);n.d(t,"default",function(){return Ke})},1117:function(e,t,n){"use strict";var r=n(0),a=n(2),o=n(240),i=n(80),c=n(1118),l=n(345),s=(n(1158),function(e){var t=e.title;return r.createElement(c.a,{title:t},r.createElement(l.a,{isOpen:!0},r.createElement(i.a,{className:"bcs-sidebar-loading"})))}),u=n(231),f=(n(1159),function(){return r.createElement("div",{className:"bcs-loading-error"},r.createElement(u.a,null))}),p=n(1143),d=n(3),h=n(189),m=n(1);function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,c;return t=e,c=[{key:"canHaveDetailsSidebar",value:function(e){var t=e.detailsSidebarProps,n=void 0===t?{}:t,r=n.hasProperties,a=n.hasAccessStats,o=n.hasClassification,i=n.hasVersions,c=n.hasNotices;return!!(r||a||o||i||c)}},{key:"canHaveMetadataSidebar",value:function(e){return!!e.hasMetadata}},{key:"canHaveActivitySidebar",value:function(e){return!!e.hasActivityFeed}},{key:"canHaveSkillsSidebar",value:function(e){return!!e.hasSkills}},{key:"canHaveSidebar",value:function(t){return e.canHaveDetailsSidebar(t)||e.canHaveActivitySidebar(t)||e.canHaveSkillsSidebar(t)||e.canHaveMetadataSidebar(t)}},{key:"shouldRenderSkillsSidebar",value:function(t,n){return!!n&&e.canHaveSkillsSidebar(t)&&Object(p.a)(n)}},{key:"shouldRenderMetadataSidebar",value:function(t,n){var r=t.metadataSidebarProps,a=(void 0===r?{}:r).isFeatureEnabled,o=void 0===a||a;return e.canHaveMetadataSidebar(t)&&(o||Array.isArray(n)&&n.length>0)}},{key:"shouldRenderSidebar",value:function(t,n,r){return!!n&&(e.canHaveDetailsSidebar(t)||e.shouldRenderSkillsSidebar(t,n)||e.canHaveActivitySidebar(t)||e.shouldRenderMetadataSidebar(t,r))}},{key:"getTitleForView",value:function(e){switch(e){case m.de:return r.createElement(a.b,d.a.sidebarSkillsTitle);case m.be:return r.createElement(a.b,d.a.sidebarDetailsTitle);case m.ce:return r.createElement(a.b,d.a.sidebarMetadataTitle);case m.ae:return r.createElement(a.b,d.a.sidebarActivityTitle);default:return null}}},{key:"getLoaderForView",value:function(e,t){var r;switch(Object(h.b)(t),e){case m.de:r=n.e(6).then(n.bind(null,1219));break;case m.be:r=n.e(4).then(n.bind(null,1218));break;case m.ce:r=n.e(5).then(n.bind(null,1217));break;case m.ae:r=n.e(1).then(n.bind(null,1223));break;case m.ee:r=n.e(7).then(n.bind(null,1221));break;default:return Promise.resolve(null)}return r}},{key:"getAsyncSidebarContent",value:function(e,t){var n=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Object(o.a)(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){b(e,t,n[t])})}return e}({errorComponent:f,fallback:r.createElement(s,{title:this.getTitleForView(e)}),loader:function(){return n.getLoaderForView(e,t)}},a))}}],(i=null)&&v(t.prototype,i),c&&v(t,c),e}();t.a=y},1118:function(e,t,n){"use strict";var r=n(0),a=n(6),o=n.n(a);n(1157);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}t.a=function(e){var t=e.actions,n=e.children,a=e.className,l=e.title,s=c(e,["actions","children","className","title"]);return r.createElement("div",i({className:o()("bcs-content",a)},s),r.createElement("div",{className:"bcs-content-header"},r.createElement("h3",{className:"bcs-title"},l),t),r.createElement("div",{className:"bcs-scroll-content-wrapper"},r.createElement("div",{className:"bcs-scroll-content"},n)))}},1124:function(e,t,n){},1142:function(e,t,n){"use strict";e.exports=n(1150)},1143:function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return o});var r=n(9),a=n.n(r),o=function(e,t){var n=a()(e,"file_version.id");return n===(t.file_version?t.file_version.id:n)&&(!!t.status||Array.isArray(t.entries))},i=function(e){var t=a()(e,"metadata.global.boxSkillsCards.cards",[]);return Array.isArray(t)&&t.length>0&&t.some(function(t){return o(e,t)})}},1144:function(e,t,n){"use strict";var r=n(0),a=n(6),o=n.n(a),i=n(2),c=n(1222),l=n(460),s=n(3),u=n(22);n(1145);function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=function(e){var t=e.className,n=e.to,a=p(e,["className","to"]);return r.createElement(c.c,null,function(e){var c=e.history;return r.createElement(u.a,f({className:o()("bdl-BackButton",t),onClick:function(){return n?c.push(n):c.goBack()},type:"button"},a),r.createElement(l.a,{height:24,width:24}),r.createElement("span",{className:"accessibility-hidden"},r.createElement(i.b,s.a.back)))})},h=n(38);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var y=r.forwardRef(function(e,t){var n=e.activeClassName,a=void 0===n?"bdl-is-active":n,i=e.children,l=e.className,s=void 0===l?"bdl-NavButton":l,f=e.component,p=void 0===f?u.a:f,d=e.exact,y=e.isActive,g=e.onClick,O=e.replace,E=e.strict,S=e.to,w=v(e,["activeClassName","children","className","component","exact","isActive","onClick","replace","strict","to"]),k="object"===b(S)?S.pathname:S;return r.createElement(c.c,{exact:d,path:k,strict:E},function(e){var n,c,l,u=e.history,f=e.location,d=e.match,b=!!(y?y(d,f):d);return r.createElement(p,m({className:o()(s,(n={},c=a,l=b,c in n?Object.defineProperty(n,c,{value:l,enumerable:!0,configurable:!0,writable:!0}):n[c]=l,n)),onClick:function(e){(g&&g(e),!e.defaultPrevented&&Object(h.d)(e))&&(O?u.replace:u.push)(S)},ref:t},w),i)})});n.d(t,"a",function(){return d}),n.d(t,"b",function(){return y})},1145:function(e,t,n){},1146:function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},1147:function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(40))},1148:function(e,t,n){var r=n(1149);e.exports=d,e.exports.parse=o,e.exports.compile=function(e,t){return c(o(e,t))},e.exports.tokensToFunction=c,e.exports.tokensToRegExp=p;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,c="",u=t&&t.delimiter||"/";null!=(n=a.exec(e));){var f=n[0],p=n[1],d=n.index;if(c+=e.slice(i,d),i=d+f.length,p)c+=p[1];else{var h=e[i],m=n[2],b=n[3],v=n[4],y=n[5],g=n[6],O=n[7];c&&(r.push(c),c="");var E=null!=m&&null!=h&&h!==m,S="+"===g||"*"===g,w="?"===g||"*"===g,k=n[2]||u,P=v||y;r.push({name:b||o++,prefix:m||"",delimiter:k,optional:w,repeat:S,partial:E,asterisk:!!O,pattern:P?s(P):O?".*":"[^"+l(k)+"]+?"})}}return i<e.length&&(c+=e.substr(i)),c&&r.push(c),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function c(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,a){for(var o="",c=n||{},l=(a||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var u=e[s];if("string"!=typeof u){var f,p=c[u.name];if(null==p){if(u.optional){u.partial&&(o+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(r(p)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[s].test(f))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===d?u.prefix:u.delimiter)+f}}else{if(f=u.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[s].test(f))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+f+'"');o+=u.prefix+f}}else o+=u}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",c=0;c<e.length;c++){var s=e[c];if("string"==typeof s)i+=l(s);else{var p=l(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+p+d+")*"),i+=d=s.optional?s.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return a||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=o?"$":a&&m?"":"(?="+h+"|$)",u(new RegExp("^"+i,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return u(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(d(e[a],t,n).source);return u(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(o(e,n),t,n)}(e,t,n)}},1149:function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},1150:function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,b=r?Symbol.for("react.lazy"):60116;function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case f:case p:case i:case l:case c:case h:return e;default:switch(e=e&&e.$$typeof){case u:case d:case s:return e;default:return t}}case b:case m:case o:return t}}}function y(e){return v(e)===p}t.typeOf=v,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=u,t.ContextProvider=s,t.Element=a,t.ForwardRef=d,t.Fragment=i,t.Lazy=b,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=c,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===l||e===c||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===d)},t.isAsyncMode=function(e){return y(e)||v(e)===f},t.isConcurrentMode=y,t.isContextConsumer=function(e){return v(e)===u},t.isContextProvider=function(e){return v(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return v(e)===d},t.isFragment=function(e){return v(e)===i},t.isLazy=function(e){return v(e)===b},t.isMemo=function(e){return v(e)===m},t.isPortal=function(e){return v(e)===o},t.isProfiler=function(e){return v(e)===l},t.isStrictMode=function(e){return v(e)===c},t.isSuspense=function(e){return v(e)===h}},1151:function(e,t,n){"use strict";var r=n(1142),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function l(e){return r.isMemo(e)?i:c[e.$$typeof]||a}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var s=Object.defineProperty,u=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var a=d(n);a&&a!==h&&e(t,a,r)}var i=u(n);f&&(i=i.concat(f(n)));for(var c=l(t),m=l(n),b=0;b<i.length;++b){var v=i[b];if(!(o[v]||r&&r[v]||m&&m[v]||c&&c[v])){var y=p(n,v);try{s(t,v,y)}catch(e){}}}return t}return t}},1152:function(e,t,n){},1153:function(e,t,n){},1154:function(e,t,n){},1155:function(e,t,n){},1156:function(e,t,n){},1157:function(e,t,n){},1158:function(e,t,n){},1159:function(e,t,n){},1160:function(e,t,n){},1222:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(1146),i=n.n(o),c=n(11),l=n.n(c),s=n(1147),u=n.n(s),f=1073741823;var p=a.a.createContext||function(e,t){var n,a,o="__create-react-context-"+u()()+"__",c=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter(function(t){return t!==e})},get:function(){return n},set:function(e,t){n=e,r.forEach(function(e){return e(n,t)})}}),t}i()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?n=0:(n="function"==typeof t?t(r,a):f,0!=(n|=0)&&this.emitter.set(e.value,n))}var o,i},r.render=function(){return this.props.children},n}(r.Component);c.childContextTypes=((n={})[o]=l.a.object.isRequired,n);var s=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}i()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?f:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?f:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return s.contextTypes=((a={})[o]=l.a.object,a),{Provider:c,Consumer:s}},d=n(432),h=n(351);function m(e){return"/"===e.charAt(0)}function b(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}var v=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],a=e&&m(e),o=t&&m(t),i=a||o;if(e&&m(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var c=void 0;if(r.length){var l=r[r.length-1];c="."===l||".."===l||""===l}else c=!1;for(var s=0,u=r.length;u>=0;u--){var f=r[u];"."===f?b(r,u):".."===f?(b(r,u),s++):s&&(b(r,u),s--)}if(!i)for(;s--;s)r.unshift("..");!i||""===r[0]||r[0]&&m(r[0])||r.unshift("");var p=r.join("/");return c&&"/"!==p.substr(-1)&&(p+="/"),p},y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var g=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":y(t);if(r!==(void 0===n?"undefined":y(n)))return!1;if("object"===r){var a=t.valueOf(),o=n.valueOf();if(a!==t||o!==n)return e(a,o);var i=Object.keys(t),c=Object.keys(n);return i.length===c.length&&i.every(function(r){return e(t[r],n[r])})}return!1},O=!0,E="Invariant failed";var S=function(e,t){if(!e)throw O?new Error(E):new Error(E+": "+(t||""))};function w(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function k(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=Object(h.a)({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=v(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function P(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&g(e.state,t.state)}function j(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}"undefined"==typeof window||!window.document||window.document.createElement;function x(e,t,n){return Math.min(Math.max(e,t),n)}var C=n(1148),A=n.n(C),N=(n(1142),n(431)),L=n(1151),_=n.n(L);n.d(t,"a",function(){return I}),n.d(t,"b",function(){return U}),n.d(t,"c",function(){return G}),n.d(t,"d",function(){return M}),n.d(t,"e",function(){return Q}),n.d(t,"f",function(){return H}),n.d(t,"g",function(){return X});var T=function(e){var t=p();return t.displayName=e,t}("Router"),M=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen(function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e})),n}Object(d.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return a.a.createElement(T.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(a.a.Component);var I=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).history=function(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,a=void 0===r?["/"]:r,o=t.initialIndex,i=void 0===o?0:o,c=t.keyLength,l=void 0===c?6:c,s=j();function u(e){Object(h.a)(v,e),v.length=v.entries.length,s.notifyListeners(v.location,v.action)}function f(){return Math.random().toString(36).substr(2,l)}var p=x(i,0,a.length-1),d=a.map(function(e){return k(e,void 0,"string"==typeof e?f():e.key||f())}),m=w;function b(e){var t=x(v.index+e,0,v.entries.length-1),r=v.entries[t];s.confirmTransitionTo(r,"POP",n,function(e){e?u({action:"POP",location:r,index:t}):u()})}var v={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:m,push:function(e,t){var r=k(e,t,f(),v.location);s.confirmTransitionTo(r,"PUSH",n,function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),u({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,t){var r=k(e,t,f(),v.location);s.confirmTransitionTo(r,"REPLACE",n,function(e){e&&(v.entries[v.index]=r,u({action:"REPLACE",location:r}))})},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return v}(t.props),t}return Object(d.a)(t,e),t.prototype.render=function(){return a.a.createElement(M,{history:this.history,children:this.props.children})},t}(a.a.Component);var V=function(e){function t(){return e.apply(this,arguments)||this}Object(d.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(a.a.Component);var R={},F=1e4,D=0;function H(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(R[e])return R[e];var t=A.a.compile(e);return D<F&&(R[e]=t,D++),t}(e)(t,{pretty:!0})}function U(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return a.a.createElement(T.Consumer,null,function(e){e||S(!1);var r=e.history,i=e.staticContext,c=o?r.push:r.replace,l=k(t?"string"==typeof n?H(n,t.params):Object(h.a)({},n,{pathname:H(n.pathname,t.params)}):n);return i?(c(l),null):a.a.createElement(V,{onMount:function(){c(l)},onUpdate:function(e,t){var n=k(t.to);P(n,Object(h.a)({},l,{key:n.key}))||c(l)},to:n})})}var $={},B=1e4,z=0;function J(e,t){void 0===t&&(t={}),"string"==typeof t&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,c=void 0!==i&&i,l=n.sensitive,s=void 0!==l&&l;return[].concat(r).reduce(function(t,n){if(!n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=$[n]||($[n]={});if(r[e])return r[e];var a=[],o={regexp:A()(e,a,t),keys:a};return z<B&&(r[e]=o,z++),o}(n,{end:o,strict:c,sensitive:s}),a=r.regexp,i=r.keys,l=a.exec(e);if(!l)return null;var u=l[0],f=l.slice(1),p=e===u;return o&&!p?null:{path:n,url:"/"===n&&""===u?"/":u,isExact:p,params:i.reduce(function(e,t,n){return e[t.name]=f[n],e},{})}},null)}var G=function(e){function t(){return e.apply(this,arguments)||this}return Object(d.a)(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(T.Consumer,null,function(t){t||S(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?J(n.pathname,e.props):t.match,o=Object(h.a)({},t,{location:n,match:r}),i=e.props,c=i.children,l=i.component,s=i.render;(Array.isArray(c)&&0===c.length&&(c=null),"function"==typeof c)&&(void 0===(c=c(o))&&(c=null));return a.a.createElement(T.Provider,{value:o},c&&!function(e){return 0===a.a.Children.count(e)}(c)?c:o.match?l?a.a.createElement(l,o):s?s(o):null:null)})},t}(a.a.Component);function W(e){return"/"===e.charAt(0)?e:"/"+e}function q(e,t){if(!e)return t;var n=W(e);return 0!==t.pathname.indexOf(n)?t:Object(h.a)({},t,{pathname:t.pathname.substr(n.length)})}function K(e){return"string"==typeof e?e:w(e)}function Z(e){return function(){S(!1)}}function Y(){}a.a.Component;var Q=function(e){function t(){return e.apply(this,arguments)||this}return Object(d.a)(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(T.Consumer,null,function(t){t||S(!1);var n,r,o=e.props.location||t.location;return a.a.Children.forEach(e.props.children,function(e){if(null==r&&a.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?J(o.pathname,Object(h.a)({},e.props,{path:i})):t.match}}),r?a.a.cloneElement(n,{location:o,computedMatch:r}):null})},t}(a.a.Component);function X(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(N.a)(t,["wrappedComponentRef"]);return a.a.createElement(T.Consumer,null,function(t){return t||S(!1),a.a.createElement(e,Object(h.a)({},r,t,{ref:n}))})};return n.displayName=t,n.WrappedComponent=e,_()(n,e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,