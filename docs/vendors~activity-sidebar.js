(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{1205:function(e,t,r){},1206:function(e,t,r){},1207:function(e,t,r){},1221:function(e,t,r){"use strict";r.r(t);var n=r(0),o=r(178),a=r.n(o),i=r(5),s=r.n(i),c=r(135),l=r.n(c),u=r(3),p=r(338),f=r(339),d=r(78),m=r(8),b=(r(98),r(340)),v=r(189),h=r(190),y=r(9),k=r.n(y),C=r(6),g=r.n(C),S=r(490),E=r(491),A=r(494),T=r(1);function F(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){O(e,t,r[t])})}return e}function O(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var w={fileVersion:"file_version",upload:"upload"};r(1205);function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(){return(P=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function U(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function D(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var N=function(e){function t(){var e,r,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=new Array(a),c=0;c<a;c++)i[c]=arguments[c];return n=this,o=(e=j(t)).call.apply(e,[this].concat(i)),r=!o||"object"!==I(o)&&"function"!=typeof o?_(n):o,D(_(_(r)),"state",{isInputOpen:!1}),D(_(_(r)),"isEmpty",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r.props,t=e.currentUser,n=e.feedItems;return!t||!n||0===n.length||1===n.length&&n[0].type===w.fileVersion}),D(_(_(r)),"resetFeedScroll",function(){r.feedContainer&&(r.feedContainer.scrollTop=r.feedContainer.scrollHeight)}),D(_(_(r)),"onKeyDown",function(e){e.nativeEvent.stopImmediatePropagation()}),D(_(_(r)),"approvalCommentFormFocusHandler",function(){r.resetFeedScroll(),r.setState({isInputOpen:!0})}),D(_(_(r)),"approvalCommentFormCancelHandler",function(){return r.setState({isInputOpen:!1})}),D(_(_(r)),"approvalCommentFormSubmitHandler",function(){return r.setState({isInputOpen:!1})}),D(_(_(r)),"onCommentCreate",function(e){var t=e.text,n=e.hasMention,o=r.props.onCommentCreate;(void 0===o?s.a:o)(t,n),r.approvalCommentFormSubmitHandler()}),D(_(_(r)),"onTaskCreate",function(e){var t=e.text,n=e.assignees,o=e.dueAt,a=r.props.onTaskCreate;(void 0===a?s.a:a)(t,n,o),r.approvalCommentFormSubmitHandler()}),D(_(_(r)),"openVersionHistoryPopup",function(e){(r.props.onVersionHistoryClick||s.a)(e)}),r}var r,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(t,n["Component"]),r=t,(o=[{key:"componentDidMount",value:function(){this.resetFeedScroll()}},{key:"componentDidUpdate",value:function(e,t){var r=e.feedItems,n=this.props.feedItems,o=t.isInputOpen,a=this.state.isInputOpen,i=this.isEmpty(this.props),s=i!==this.isEmpty(e)&&!i,c=r&&n&&r.length<n.length;(s||c||!r&&n||a!==o)&&this.resetFeedScroll()}},{key:"render",value:function(){var e,t=this,r=this.props,o=r.translations,a=r.approverSelectorContacts,i=r.mentionSelectorContacts,c=r.currentUser,l=r.isDisabled,u=r.getAvatarUrl,p=r.getUserProfileUrl,f=r.file,d=r.onAppActivityDelete,m=r.onCommentCreate,b=r.getApproverWithQuery,v=r.getMentionWithQuery,h=r.activityFeedError,y=r.onVersionHistoryClick,C=r.onCommentDelete,I=r.onTaskDelete,U=r.onTaskUpdate,j=r.onTaskAssignmentUpdate,M=r.onTaskModalClose,_=r.feedItems,D=this.state.isInputOpen,N=k()(f,"permissions.can_comment",!1),H=!!(c&&N&&m&&_),W=this.isEmpty(this.props),Q=!_||!c;return n.createElement("div",{className:"bcs-activity-feed",onKeyDown:this.onKeyDown},n.createElement("div",{ref:function(e){t.feedContainer=e},className:"bcs-activity-feed-items-container"},W?n.createElement(A.a,{isLoading:Q,showCommentMessage:H}):n.createElement(S.a,P({},h,{items:(e=_,e?e.reduce(function(e,t){var r=e.pop();if(!r)return e.concat([t]);if(t.type===w.fileVersion&&r.type===w.fileVersion&&t.action===w.upload&&r.action===w.upload){var n=r.modified_by,o=r.versions,a=void 0===o?[r]:o,i=r.version_start,s=void 0===i?parseInt(r.version_number,10):i,c=r.version_end,l=void 0===c?parseInt(r.version_number,10):c,u=n||T.Zd,p=t.action,f=t.modified_by,d=t.created_at,m=t.trashed_at,b=t.id,v=t.version_number,h=parseInt(v,10),y=r.collaborators||O({},u.id,F({},u)),k=f||T.Zd;return y[k.id]=F({},k),e.concat([{action:p,collaborators:y,created_at:d,modified_by:k,trashed_at:m,id:b,type:w.fileVersion,version_number:v,versions:a.concat([t]),version_start:Math.min(s,h),version_end:Math.max(l,h)}])}return e.concat([r,t])},[]):[]),isDisabled:l,currentUser:c,onTaskAssignmentUpdate:j,onAppActivityDelete:d,onCommentDelete:N?C:s.a,onTaskDelete:N?I:s.a,onTaskEdit:N?U:s.a,onTaskModalClose:M,onVersionInfo:y?this.openVersionHistoryPopup:null,translations:o,getAvatarUrl:u,getUserProfileUrl:p,mentionSelectorContacts:i,getMentionWithQuery:v,approverSelectorContacts:a,getApproverWithQuery:b}))),H?n.createElement(E.a,{onSubmit:this.resetFeedScroll,isDisabled:l,approverSelectorContacts:a,mentionSelectorContacts:i,className:g()("bcs-activity-feed-comment-input",{"bcs-is-disabled":l}),createComment:N?this.onCommentCreate:s.a,createTask:N?this.onTaskCreate:s.a,updateTask:N?U:s.a,getApproverWithQuery:b,getMentionWithQuery:v,isOpen:D,user:c,onCancel:this.approvalCommentFormCancelHandler,onFocus:this.approvalCommentFormFocusHandler,getAvatarUrl:u}):null)}}])&&U(r.prototype,o),a&&U(r,a),t}(),H=r(1116),W=r(2),Q=r(41),V=r(224),x=r(341),R=r(132),B=r(486),K=r(487),G=r(186),J=(r(1206),function(e){return n.createElement(V.a,{constrainToScrollParent:!0,isRightAligned:!0},n.createElement(Q.a,{isDisabled:e.isDisabled,type:"button"},n.createElement(x.a,null,n.createElement(W.b,G.a.tasksAddTask))),n.createElement(R.a,{className:"bcs-AddTaskMenu"},n.createElement(R.b,{className:"bcs-AddTaskMenu-menuItem",onClick:function(){return e.onMenuItemClick(T.Oe)}},n.createElement("div",{className:"bcs-AddTaskMenu-icon"},n.createElement(K.a,{width:30,height:30})),n.createElement("div",null,n.createElement("div",{className:"bcs-AddTaskMenu-title"},n.createElement(W.b,G.a.taskAddTaskGeneral)),n.createElement("div",{className:"bcs-AddTaskMenu-description"},n.createElement(W.b,G.a.taskAddTaskGeneralDescription)))),n.createElement(R.b,{className:"bcs-AddTaskMenu-menuItem",onClick:function(){return e.onMenuItemClick(T.Ne)}},n.createElement("div",{className:"bcs-AddTaskMenu-icon"},n.createElement(B.a,{width:30,height:30})),n.createElement("div",null,n.createElement("div",{className:"bcs-AddTaskMenu-title"},n.createElement(W.b,G.a.taskAddTaskApproval)),n.createElement("div",{className:"bcs-AddTaskMenu-description"},n.createElement(W.b,G.a.taskAddTaskApprovalDescription))))))}),Z=r(492);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function z(e){return(z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function X(e,t){return(X=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var ee=function(e){function t(){var e,r,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];return n=this,o=(e=z(t)).call.apply(e,[this].concat(i)),r=!o||"object"!==L(o)&&"function"!=typeof o?Y(n):o,$(Y(Y(r)),"state",{error:null,isTaskFormOpen:!1,taskType:T.Ne}),$(Y(Y(r)),"handleClickMenuItem",function(e){return r.setState({isTaskFormOpen:!0,taskType:e})}),$(Y(Y(r)),"handleModalClose",function(){r.props.onTaskModalClose(),r.setState({isTaskFormOpen:!1,error:null})}),$(Y(Y(r)),"handleSubmitSuccess",function(){return r.setState({isTaskFormOpen:!1,error:null})}),$(Y(Y(r)),"handleSubmitError",function(e){return r.setState({error:e})}),r}var r,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&X(e,t)}(t,n["Component"]),r=t,(o=[{key:"render",value:function(){var e=this.props,t=e.isDisabled,r=e.taskFormProps,o=this.state,a=o.isTaskFormOpen,i=o.taskType,s=o.error;return n.createElement(n.Fragment,null,n.createElement(J,{isDisabled:t,onMenuItemClick:this.handleClickMenuItem}),n.createElement(Z.a,{error:s,onSubmitError:this.handleSubmitError,onSubmitSuccess:this.handleSubmitSuccess,onModalClose:this.handleModalClose,isTaskFormOpen:a,taskFormProps:r,taskType:i}))}}])&&q(r.prototype,o),a&&q(r,a),t}();$(ee,"defaultProps",{isDisabled:!1});var te=ee,re=r(1115);r(1207);function ne(e){return(ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oe(){return(oe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function ae(e,t,r,n,o,a,i){try{var s=e[a](i),c=s.value}catch(e){return void r(e)}s.done?t(c):Promise.resolve(c).then(n,o)}function ie(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function se(e){return(se=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ce(e,t){return(ce=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ue(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,"activityFeedInlineError",function(){return pe}),r.d(t,"ActivitySidebarComponent",function(){return de});var pe={inlineError:{title:u.a.errorOccured,content:u.a.activityFeedItemApiError}},fe="".concat(T.Hd,"_").concat(h.a);Object(v.b)(fe);var de=function(e){function t(e){var r,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,i=se(t).call(this,e),r=!i||"object"!==ne(i)&&"function"!=typeof i?le(o):i,ue(le(le(r)),"state",{}),ue(le(le(r)),"feedSuccessCallback",function(){r.fetchFeedItems()}),ue(le(le(r)),"feedErrorCallback",function(e,t,n){r.errorCallback(e,t,n),r.fetchFeedItems()}),ue(le(le(r)),"tasksApiNew",{createTask:function(e,t,n,o,a,i){var s=r.state.currentUser,c=r.props,l=c.file,u=c.api;if(!s)throw Object(m.c)();u.getFeedAPI(!1).createTaskNew(l,s,e,t,n,o,function(){a&&a(),r.feedSuccessCallback()},function(e,t,n){i&&i(e,t,n),r.feedErrorCallback(e,t,n)}),r.fetchFeedItems()},deleteTask:function(e){var t=r.props,n=t.file,o=t.api,a=t.onTaskDelete,i=void 0===a?s.a:a;o.getFeedAPI(!1).deleteTaskNew(n,e,function(e){r.feedSuccessCallback(),i(e)},r.feedErrorCallback),r.fetchFeedItems()},updateTask:function(e,t,n){var o=r.props,a=o.file,i=o.api,c=o.onTaskUpdate,l=void 0===c?s.a:c;i.getFeedAPI(!1).updateTaskNew(a,e,function(){r.feedSuccessCallback(),t&&t(),l()},function(e,t){n&&n(e,t),r.feedErrorCallback(e,t)}),r.fetchFeedItems()},updateTaskAssignment:function(e,t,n){var o=r.props,a=o.file;o.api.getFeedAPI(!1).updateTaskCollaborator(a,e,t,n,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}}),ue(le(le(r)),"deleteTask",function(e){var t=e.id,n=r.props,o=n.file,a=n.api,i=n.onTaskDelete,c=void 0===i?s.a:i;a.getFeedAPI(!1).deleteTask(o,t,function(e){r.feedSuccessCallback(),c(e)},r.feedErrorCallback),r.fetchFeedItems()}),ue(le(le(r)),"updateTask",function(e){var t=e.text,n=e.id,o=r.props,a=o.file;o.api.getFeedAPI(!1).updateTask(a,n,t,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),ue(le(le(r)),"updateTaskAssignment",function(e,t,n){var o=r.props,a=o.file;o.api.getFeedAPI(!1).updateTaskAssignment(a,e,t,n,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),ue(le(le(r)),"deleteComment",function(e){var t=e.id,n=e.permissions,o=r.props,a=o.file,i=o.api,c=o.onCommentDelete,l=void 0===c?s.a:c;i.getFeedAPI(!1).deleteComment(a,t,n,function(e){r.feedSuccessCallback(),l(e)},r.feedErrorCallback),r.fetchFeedItems()}),ue(le(le(r)),"createComment",function(e,t){var n=r.props,o=n.file,a=n.api,i=n.onCommentCreate,c=void 0===i?s.a:i,l=r.state.currentUser;if(!l)throw Object(m.c)();a.getFeedAPI(!1).createComment(o,l,e,t,function(e){c(e),r.feedSuccessCallback()},r.feedErrorCallback),r.fetchFeedItems()}),ue(le(le(r)),"createTask",function(e,t,n){var o=r.state.currentUser,a=r.props,i=a.file,s=a.api;if(!o)throw Object(m.c)();s.getFeedAPI(!1).createTask(i,o,e,t,n,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),ue(le(le(r)),"deleteAppActivity",function(e){var t=e.id,n=r.props,o=n.file;n.api.getFeedAPI(!1).deleteAppActivity(o,t,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),ue(le(le(r)),"fetchFeedItemsSuccessCallback",function(e){r.setState({feedItems:e,activityFeedError:void 0})}),ue(le(le(r)),"fetchFeedItemsErrorCallback",function(e){r.setState({feedItems:e,activityFeedError:pe})}),ue(le(le(r)),"errorCallback",function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};console.error(e),r.props.onError(e,t,n)}),ue(le(le(r)),"fetchCurrentUserSuccessCallback",function(e){r.setState({currentUser:e,currentUserError:void 0})}),ue(le(le(r)),"getApproverContactsSuccessCallback",function(e){var t=e.entries;r.setState({approverSelectorContacts:t})}),ue(le(le(r)),"getMentionContactsSuccessCallback",function(e){var t=e.entries;r.setState({mentionSelectorContacts:t})}),ue(le(le(r)),"getApproverWithQuery",a()(r.getCollaborators.bind(le(le(r)),r.getApproverContactsSuccessCallback,r.errorCallback),T.F)),ue(le(le(r)),"getMentionWithQuery",a()(r.getCollaborators.bind(le(le(r)),r.getMentionContactsSuccessCallback,r.errorCallback),T.F)),ue(le(le(r)),"fetchCurrentUserErrorCallback",function(e,t){r.setState({currentUser:void 0,currentUserError:{maskError:{errorHeader:u.a.currentUserErrorHeaderMessage,errorSubHeader:u.a.defaultErrorMaskSubHeaderMessage}}}),r.errorCallback(e,t,{error:e})}),ue(le(le(r)),"getAvatarUrl",function(){var e,t=(e=regeneratorRuntime.mark(function e(t){var n,o,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.props,o=n.file,a=n.api,e.abrupt("return",a.getUsersAPI(!1).getAvatarUrlWithAccessToken(t,o.id));case 2:case"end":return e.stop()}},e,this)}),function(){var t=this,r=arguments;return new Promise(function(n,o){var a=e.apply(t,r);function i(e){ae(a,n,o,i,s,"next",e)}function s(e){ae(a,n,o,i,s,"throw",e)}i(void 0)})});return function(e){return t.apply(this,arguments)}}()),ue(le(le(r)),"onTaskModalClose",function(){r.setState({approverSelectorContacts:[]})}),ue(le(le(r)),"renderAddTaskButton",function(){var e=r.props.isDisabled,t=r.state.approverSelectorContacts,o=le(le(r)),a=o.getApproverWithQuery,i=o.getAvatarUrl,s=o.tasksApiNew.createTask,c={isDisabled:e,onTaskModalClose:o.onTaskModalClose},l={approverSelectorContacts:t,createTask:s,getApproverWithQuery:a,getAvatarUrl:i,id:"",message:"",approvers:[]};return n.createElement(te,oe({},c,{taskFormProps:l}))}),r.props.logger.onReadyMetric({endMarkName:fe}),r}var r,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ce(e,t)}(t,n["PureComponent"]),r=t,(o=[{key:"componentDidMount",value:function(){var e=this.props.currentUser;this.fetchFeedItems(!0),this.fetchCurrentUser(e)}},{key:"fetchCurrentUser",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.props,n=r.api,o=r.file;if(!o)throw Object(m.a)();void 0===e?n.getUsersAPI(t).getUser(o.id,this.fetchCurrentUserSuccessCallback,this.fetchCurrentUserErrorCallback):this.setState({currentUser:e,currentUserError:void 0})}},{key:"fetchFeedItems",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.props,n=r.file,o=r.api,a=r.features,i=Object(d.isFeatureEnabled)(a,"activityFeed.tasks.newApi"),s=Object(d.isFeatureEnabled)(a,"activityFeed.appActivity.enabled");o.getFeedAPI(t).feedItems(n,e,this.fetchFeedItemsSuccessCallback,this.fetchFeedItemsErrorCallback,this.errorCallback,i,s)}},{key:"getCollaborators",value:function(e,t,r){var n=this.props,o=n.file,a=n.api;r&&""!==r.trim()&&a.getFileCollaboratorsAPI(!0).getFileCollaborators(o.id,e,t,{filter_term:r})}},{key:"render",value:function(){var e=this.props,t=e.file,r=e.isDisabled,o=void 0!==r&&r,a=e.onVersionHistoryClick,i=e.getUserProfileUrl,s=e.features,c=this.state,l=c.currentUser,u=c.approverSelectorContacts,p=c.mentionSelectorContacts,f=c.feedItems,m=c.activityFeedError,b=c.currentUserError,v=Object(d.isFeatureEnabled)(s,"activityFeed.tasks.newApi")?this.tasksApiNew.updateTaskAssignment:this.updateTaskAssignment,h=Object(d.isFeatureEnabled)(s,"activityFeed.tasks.newApi")?this.tasksApiNew.updateTask:this.updateTask,y=Object(d.isFeatureEnabled)(s,"activityFeed.tasks.newApi")?this.tasksApiNew.deleteTask:this.deleteTask;return n.createElement(H.a,{className:"bcs-activity",title:re.a.getTitleForView(T.ae),actions:n.createElement(d.FeatureFlag,{feature:"activityFeed.tasks.createButton",enabled:this.renderAddTaskButton})},n.createElement(N,{file:t,activityFeedError:m,approverSelectorContacts:u,mentionSelectorContacts:p,currentUser:l,isDisabled:o,onAppActivityDelete:this.deleteAppActivity,onCommentCreate:this.createComment,onCommentDelete:this.deleteComment,onTaskCreate:this.createTask,onTaskDelete:y,onTaskUpdate:h,onTaskModalClose:this.onTaskModalClose,onTaskAssignmentUpdate:v,getApproverWithQuery:this.getApproverWithQuery,getMentionWithQuery:this.getMentionWithQuery,onVersionHistoryClick:a,getAvatarUrl:this.getAvatarUrl,getUserProfileUrl:i,feedItems:f,currentUserError:b}))}}])&&ie(r.prototype,o),i&&ie(r,i),t}();ue(de,"defaultProps",{isDisabled:!1});t.default=l()([Object(b.a)(T.Hd),Object(f.a)(T.Hd),p.b,d.withFeatureConsumer])(de)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,