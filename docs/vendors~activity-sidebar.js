(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{1207:function(e,t,r){},1208:function(e,t,r){},1223:function(e,t,r){"use strict";r.r(t);var a=r(0),n=r(178),o=r.n(n),s=r(5),i=r.n(s),c=r(135),l=r.n(c),u=r(3),d=r(341),f=r(342),p=r(78),b=r(8),m=(r(98),r(343)),k=r(189),h=r(190),v=r(515),C=r(1118),y=r(2),g=r(42),A=r(224),E=r(344),T=r(132),F=r(489),S=r(490),w=r(186),I=r(1),O=(r(1207),function(e){return a.createElement(A.a,{constrainToScrollParent:!0,isRightAligned:!0},a.createElement(g.a,{isDisabled:e.isDisabled,type:"button"},a.createElement(E.a,null,a.createElement(y.b,w.a.tasksAddTask))),a.createElement(T.a,{className:"bcs-AddTaskMenu"},a.createElement(T.b,{className:"bcs-AddTaskMenu-menuItem",onClick:function(){return e.onMenuItemClick(I.Oe)}},a.createElement("div",{className:"bcs-AddTaskMenu-icon"},a.createElement(S.a,{width:30,height:30})),a.createElement("div",null,a.createElement("div",{className:"bcs-AddTaskMenu-title"},a.createElement(y.b,w.a.taskAddTaskGeneral)),a.createElement("div",{className:"bcs-AddTaskMenu-description"},a.createElement(y.b,w.a.taskAddTaskGeneralDescription)))),a.createElement(T.b,{className:"bcs-AddTaskMenu-menuItem",onClick:function(){return e.onMenuItemClick(I.Ne)}},a.createElement("div",{className:"bcs-AddTaskMenu-icon"},a.createElement(F.a,{width:30,height:30})),a.createElement("div",null,a.createElement("div",{className:"bcs-AddTaskMenu-title"},a.createElement(y.b,w.a.taskAddTaskApproval)),a.createElement("div",{className:"bcs-AddTaskMenu-description"},a.createElement(y.b,w.a.taskAddTaskApprovalDescription))))))}),P=r(493);function U(e){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function M(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function D(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var H=function(e){function t(){var e,r,a,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,s=new Array(o),i=0;i<o;i++)s[i]=arguments[i];return a=this,n=(e=j(t)).call.apply(e,[this].concat(s)),r=!n||"object"!==U(n)&&"function"!=typeof n?D(a):n,_(D(D(r)),"state",{error:null,isTaskFormOpen:!1,taskType:I.Ne}),_(D(D(r)),"handleClickMenuItem",function(e){return r.setState({isTaskFormOpen:!0,taskType:e})}),_(D(D(r)),"handleModalClose",function(){r.props.onTaskModalClose(),r.setState({isTaskFormOpen:!1,error:null})}),_(D(D(r)),"handleSubmitSuccess",function(){return r.setState({isTaskFormOpen:!1,error:null})}),_(D(D(r)),"handleSubmitError",function(e){return r.setState({error:e})}),r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(t,a["Component"]),r=t,(n=[{key:"render",value:function(){var e=this.props,t=e.isDisabled,r=e.taskFormProps,n=this.state,o=n.isTaskFormOpen,s=n.taskType,i=n.error;return a.createElement(a.Fragment,null,a.createElement(O,{isDisabled:t,onMenuItemClick:this.handleClickMenuItem}),a.createElement(P.a,{error:i,onSubmitError:this.handleSubmitError,onSubmitSuccess:this.handleSubmitSuccess,onModalClose:this.handleModalClose,isTaskFormOpen:o,taskFormProps:r,taskType:s}))}}])&&M(r.prototype,n),o&&M(r,o),t}();_(H,"defaultProps",{isDisabled:!1});var W=H,Q=r(1117);r(1208);function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(){return(x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}function B(e,t,r,a,n,o,s){try{var i=e[o](s),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(a,n)}function V(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function J(e,t){return(J=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function z(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,"activityFeedInlineError",function(){return K}),r.d(t,"ActivitySidebarComponent",function(){return X});var K={inlineError:{title:u.a.errorOccured,content:u.a.activityFeedItemApiError}},L="".concat(I.Hd,"_").concat(h.a);Object(k.b)(L);var X=function(e){function t(e){var r,n,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,s=G(t).call(this,e),r=!s||"object"!==R(s)&&"function"!=typeof s?q(n):s,z(q(q(r)),"state",{}),z(q(q(r)),"feedSuccessCallback",function(){r.fetchFeedItems()}),z(q(q(r)),"feedErrorCallback",function(e,t,a){r.errorCallback(e,t,a),r.fetchFeedItems()}),z(q(q(r)),"tasksApiNew",{createTask:function(e,t,a,n,o,s){var i=r.state.currentUser,c=r.props,l=c.file,u=c.api;if(!i)throw Object(b.c)();u.getFeedAPI(!1).createTaskNew(l,i,e,t,a,n,function(){o&&o(),r.feedSuccessCallback()},function(e,t,a){s&&s(e,t,a),r.feedErrorCallback(e,t,a)}),r.fetchFeedItems()},deleteTask:function(e){var t=r.props,a=t.file,n=t.api,o=t.onTaskDelete,s=void 0===o?i.a:o;n.getFeedAPI(!1).deleteTaskNew(a,e,function(e){r.feedSuccessCallback(),s(e)},r.feedErrorCallback),r.fetchFeedItems()},updateTask:function(e,t,a){var n=r.props,o=n.file,s=n.api,c=n.onTaskUpdate,l=void 0===c?i.a:c;s.getFeedAPI(!1).updateTaskNew(o,e,function(){r.feedSuccessCallback(),t&&t(),l()},function(e,t){a&&a(e,t),r.feedErrorCallback(e,t)}),r.fetchFeedItems()},updateTaskAssignment:function(e,t,a){var n=r.props,o=n.file;n.api.getFeedAPI(!1).updateTaskCollaborator(o,e,t,a,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}}),z(q(q(r)),"deleteTask",function(e){var t=e.id,a=r.props,n=a.file,o=a.api,s=a.onTaskDelete,c=void 0===s?i.a:s;o.getFeedAPI(!1).deleteTask(n,t,function(e){r.feedSuccessCallback(),c(e)},r.feedErrorCallback),r.fetchFeedItems()}),z(q(q(r)),"updateTask",function(e){var t=e.text,a=e.id,n=r.props,o=n.file;n.api.getFeedAPI(!1).updateTask(o,a,t,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),z(q(q(r)),"updateTaskAssignment",function(e,t,a){var n=r.props,o=n.file;n.api.getFeedAPI(!1).updateTaskAssignment(o,e,t,a,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),z(q(q(r)),"deleteComment",function(e){var t=e.id,a=e.permissions,n=r.props,o=n.file,s=n.api,c=n.onCommentDelete,l=void 0===c?i.a:c;s.getFeedAPI(!1).deleteComment(o,t,a,function(e){r.feedSuccessCallback(),l(e)},r.feedErrorCallback),r.fetchFeedItems()}),z(q(q(r)),"createComment",function(e,t){var a=r.props,n=a.file,o=a.api,s=a.onCommentCreate,c=void 0===s?i.a:s,l=r.state.currentUser;if(!l)throw Object(b.c)();o.getFeedAPI(!1).createComment(n,l,e,t,function(e){c(e),r.feedSuccessCallback()},r.feedErrorCallback),r.fetchFeedItems()}),z(q(q(r)),"createTask",function(e,t,a){var n=r.state.currentUser,o=r.props,s=o.file,i=o.api;if(!n)throw Object(b.c)();i.getFeedAPI(!1).createTask(s,n,e,t,a,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),z(q(q(r)),"deleteAppActivity",function(e){var t=e.id,a=r.props,n=a.file;a.api.getFeedAPI(!1).deleteAppActivity(n,t,r.feedSuccessCallback,r.feedErrorCallback),r.fetchFeedItems()}),z(q(q(r)),"fetchFeedItemsSuccessCallback",function(e){r.setState({feedItems:e,activityFeedError:void 0})}),z(q(q(r)),"fetchFeedItemsErrorCallback",function(e){r.setState({feedItems:e,activityFeedError:K})}),z(q(q(r)),"errorCallback",function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};console.error(e),r.props.onError(e,t,a)}),z(q(q(r)),"fetchCurrentUserSuccessCallback",function(e){r.setState({currentUser:e,currentUserError:void 0})}),z(q(q(r)),"getApproverContactsSuccessCallback",function(e){var t=e.entries;r.setState({approverSelectorContacts:t})}),z(q(q(r)),"getMentionContactsSuccessCallback",function(e){var t=e.entries;r.setState({mentionSelectorContacts:t})}),z(q(q(r)),"getApproverWithQuery",o()(r.getCollaborators.bind(q(q(r)),r.getApproverContactsSuccessCallback,r.errorCallback),I.F)),z(q(q(r)),"getMentionWithQuery",o()(r.getCollaborators.bind(q(q(r)),r.getMentionContactsSuccessCallback,r.errorCallback),I.F)),z(q(q(r)),"fetchCurrentUserErrorCallback",function(e,t){r.setState({currentUser:void 0,currentUserError:{maskError:{errorHeader:u.a.currentUserErrorHeaderMessage,errorSubHeader:u.a.defaultErrorMaskSubHeaderMessage}}}),r.errorCallback(e,t,{error:e})}),z(q(q(r)),"getAvatarUrl",function(){var e,t=(e=regeneratorRuntime.mark(function e(t){var a,n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=r.props,n=a.file,o=a.api,e.abrupt("return",o.getUsersAPI(!1).getAvatarUrlWithAccessToken(t,n.id));case 2:case"end":return e.stop()}},e,this)}),function(){var t=this,r=arguments;return new Promise(function(a,n){var o=e.apply(t,r);function s(e){B(o,a,n,s,i,"next",e)}function i(e){B(o,a,n,s,i,"throw",e)}s(void 0)})});return function(e){return t.apply(this,arguments)}}()),z(q(q(r)),"onTaskModalClose",function(){r.setState({approverSelectorContacts:[]})}),z(q(q(r)),"renderAddTaskButton",function(){var e=r.props.isDisabled,t=r.state.approverSelectorContacts,n=q(q(r)),o=n.getApproverWithQuery,s=n.getAvatarUrl,i=n.tasksApiNew.createTask,c={isDisabled:e,onTaskModalClose:n.onTaskModalClose},l={approverSelectorContacts:t,createTask:i,getApproverWithQuery:o,getAvatarUrl:s,id:"",message:"",approvers:[]};return a.createElement(W,x({},c,{taskFormProps:l}))}),r.props.logger.onReadyMetric({endMarkName:L}),r}var r,n,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&J(e,t)}(t,a["PureComponent"]),r=t,(n=[{key:"componentDidMount",value:function(){var e=this.props.currentUser;this.fetchFeedItems(!0),this.fetchCurrentUser(e)}},{key:"fetchCurrentUser",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.props,a=r.api,n=r.file;if(!n)throw Object(b.a)();void 0===e?a.getUsersAPI(t).getUser(n.id,this.fetchCurrentUserSuccessCallback,this.fetchCurrentUserErrorCallback):this.setState({currentUser:e,currentUserError:void 0})}},{key:"fetchFeedItems",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.props,a=r.file,n=r.api,o=r.features,s=Object(p.isFeatureEnabled)(o,"activityFeed.tasks.newApi"),i=Object(p.isFeatureEnabled)(o,"activityFeed.appActivity.enabled");n.getFeedAPI(t).feedItems(a,e,this.fetchFeedItemsSuccessCallback,this.fetchFeedItemsErrorCallback,this.errorCallback,s,i)}},{key:"getCollaborators",value:function(e,t,r){var a=this.props,n=a.file,o=a.api;r&&""!==r.trim()&&o.getFileCollaboratorsAPI(!0).getFileCollaborators(n.id,e,t,{filter_term:r})}},{key:"render",value:function(){var e=this.props,t=e.file,r=e.isDisabled,n=void 0!==r&&r,o=e.onVersionHistoryClick,s=e.getUserProfileUrl,i=e.features,c=this.state,l=c.currentUser,u=c.approverSelectorContacts,d=c.mentionSelectorContacts,f=c.feedItems,b=c.activityFeedError,m=c.currentUserError,k=Object(p.isFeatureEnabled)(i,"activityFeed.tasks.newApi")?this.tasksApiNew.updateTaskAssignment:this.updateTaskAssignment,h=Object(p.isFeatureEnabled)(i,"activityFeed.tasks.newApi")?this.tasksApiNew.updateTask:this.updateTask,y=Object(p.isFeatureEnabled)(i,"activityFeed.tasks.newApi")?this.tasksApiNew.deleteTask:this.deleteTask;return a.createElement(C.a,{className:"bcs-activity",title:Q.a.getTitleForView(I.ae),actions:a.createElement(p.FeatureFlag,{feature:"activityFeed.tasks.createButton",enabled:this.renderAddTaskButton})},a.createElement(v.a,{file:t,activityFeedError:b,approverSelectorContacts:u,mentionSelectorContacts:d,currentUser:l,isDisabled:n,onAppActivityDelete:this.deleteAppActivity,onCommentCreate:this.createComment,onCommentDelete:this.deleteComment,onTaskCreate:this.createTask,onTaskDelete:y,onTaskUpdate:h,onTaskModalClose:this.onTaskModalClose,onTaskAssignmentUpdate:k,getApproverWithQuery:this.getApproverWithQuery,getMentionWithQuery:this.getMentionWithQuery,onVersionHistoryClick:o,getAvatarUrl:this.getAvatarUrl,getUserProfileUrl:s,feedItems:f,currentUserError:m}))}}])&&V(r.prototype,n),s&&V(r,s),t}();z(X,"defaultProps",{isDisabled:!1});t.default=l()([Object(m.a)(I.Hd),Object(f.a)(I.Hd),d.b,p.withFeatureConsumer])(X)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,