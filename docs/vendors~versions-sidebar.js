(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1120:function(e,t,n){"use strict";var r=n(0),o=n(7);t.a=function(e){var t=e.className,n=void 0===t?"":t,i=e.color,s=void 0===i?"#444444":i,a=e.height,c=void 0===a?12:a,l=e.title,u=e.width,d=void 0===u?12:u;return r.createElement(o.a,{className:"icon-open-with ".concat(n),height:c,title:l,viewBox:"0 0 12 12",width:d},r.createElement("path",{className:"fill-color",d:"M10 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8m0-1H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z",fill:s}),r.createElement("path",{className:"fill-color",d:"M3 3v1h4.29L2.65 8.65l.7.7L8 4.71V9h1V3H3z",fill:s}))}},1208:function(e,t,n){},1209:function(e,t,n){},1210:function(e,t,n){},1211:function(e,t,n){},1212:function(e,t,n){},1213:function(e,t,n){},1214:function(e,t,n){},1215:function(e,t,n){},1220:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(135),s=n.n(i),a=n(9),c=n.n(a),l=n(5),u=n.n(l),d=n(1222),f=(n(98),n(449)),m=n(2),v=n(457),p=Object(m.f)({versionsEmpty:{id:"be.sidebarVersions.empty",defaultMessage:"No prior versions are available for this file."},versionsPriorWeek:{id:"be.sidebarVersions.priorWeek",defaultMessage:"Last Week"},versionsThisMonth:{id:"be.sidebarVersions.thisMonth",defaultMessage:"This Month"},versionsToday:{id:"be.sidebarVersions.today",defaultMessage:"Today"},versionsYesterday:{id:"be.sidebarVersions.yesterday",defaultMessage:"Yesterday"},versionsTitle:{id:"be.sidebarVersions.title",defaultMessage:"Version History"},versionCurrent:{id:"be.sidebarVersions.current",defaultMessage:"Current Version"},versionActionDelete:{id:"be.sidebarVersions.delete",defaultMessage:"Delete"},versionActionDownload:{id:"be.sidebarVersions.download",defaultMessage:"Download"},versionActionPreview:{id:"be.sidebarVersions.preview",defaultMessage:"Preview"},versionActionPromote:{id:"be.sidebarVersions.promote",defaultMessage:"Make Current"},versionActionRestore:{id:"be.sidebarVersions.restore",defaultMessage:"Restore"},versionActionToggle:{id:"be.sidebarVersions.toggle",defaultMessage:"Toggle Actions Menu"},versionDeletedBy:{id:"be.sidebarVersions.deletedBy",defaultMessage:"Deleted by {name}"},versionLimitExceeded:{id:"be.sidebarVersions.versionLimitExceeded",defaultMessage:"You are limited to the last {versionLimit, number} {versionLimit, plural, one {version} other {versions}}."},versionNumberBadge:{id:"be.sidebarVersions.versionNumberBadge",defaultMessage:"V{versionNumber}"},versionNumberLabel:{id:"be.sidebarVersions.versionNumberLabel",defaultMessage:"Version number {versionNumber}"},versionRestoredBy:{id:"be.sidebarVersions.restoredBy",defaultMessage:"Restored by {name}"},versionUploadedBy:{id:"be.sidebarVersions.uploadedBy",defaultMessage:"Uploaded by {name}"},versionUserUnknown:{id:"be.sidebarVersions.versionUserUnknown",defaultMessage:"Unknown"}}),b=n(3),h=n(1116),y=n(87),g=n(234),w=n(224),E=n(7),V=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,i=void 0===o?"#444":o,s=e.height,a=void 0===s?14:s,c=e.title,l=e.width,u=void 0===l?16:l;return r.createElement(E.a,{className:"icon-clock-past ".concat(n),height:a,title:c,viewBox:"0 0 16 14",width:u},r.createElement("g",{fill:"none",fillRule:"evenodd",transform:"translate(0 1)"},r.createElement("rect",{className:"fill-color",fill:i,height:"5",rx:".5",width:"1",x:"9.66",y:"3"}),r.createElement("rect",{className:"fill-color",fill:i,height:"1",rx:".5",width:"3",x:"9.66",y:"7"}),r.createElement("path",{className:"stroke-color",d:"M5.66 10.62C6.697 11.48 8.032 12 9.487 12c3.314 0 6-2.686 6-6s-2.686-6-6-6c-3.313 0-6 2.686-6 6",stroke:i,strokeLinecap:"round",strokeLinejoin:"round"}),r.createElement("path",{className:"fill-color",d:"M6.317 5l-2.83 2.828L.66 5",fill:i})))},O=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,i=void 0===o?"#444":o,s=e.height,a=void 0===s?14:s,c=e.title,l=e.width,u=void 0===l?12:l;return r.createElement(E.a,{className:"icon-download ".concat(n),height:a,title:c,viewBox:"0 0 12 14",width:u},r.createElement("path",{className:"stroke-color",d:"M8.5.8h-5v5H1.2L6 10.6l4.8-4.8H8.5v-5z",fill:"none",stroke:i}),r.createElement("path",{className:"stroke-color",d:"M0 13.3h12",fill:"none",stroke:i}))},P=n(346),I=n(1120),k=n(235),N=function(e){var t=e.className,n=void 0===t?"":t,o=e.color,i=void 0===o?"#444444":o,s=e.height,a=void 0===s?14:s,c=e.title,l=e.width,u=void 0===l?12:l;return r.createElement(E.a,{className:"icon-upload ".concat(n),height:a,title:c,viewBox:"0 0 12 14",width:u},r.createElement("path",{className:"stroke-color",d:"M3.5 10.4h5v-5h2.3L6 .6 1.2 5.4h2.3v5z",fill:"none",stroke:i}),r.createElement("path",{className:"stroke-color",d:"M12 13.5H0",fill:"none",stroke:i}))},C=n(22);n(1208);function j(){return(j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function D(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var A=function(e){var t=e.action,n=e.children,o=e.fileId,i=e.isCurrent,s=D(e,["action","children","fileId","isCurrent"]);return r.createElement("li",{className:"bcs-VersionsItemAction"},r.createElement(C.a,j({className:"bcs-VersionsItemAction-button menu-item","data-resin-iscurrent":i,"data-resin-itemid":o,"data-resin-target":t,role:"menuitem",type:"button"},s),n))},S=n(132),M=(n(1209),{height:12,width:12}),_=function(e){e.stopPropagation()},L=function(e){e.stopPropagation()},R=function(e){var t=e.fileId,n=e.isCurrent,o=void 0!==n&&n,i=e.onDelete,s=e.onDownload,a=e.onPreview,c=e.onPromote,l=e.onRestore,u=e.showDelete,d=void 0!==u&&u,f=e.showDownload,v=void 0!==f&&f,b=e.showPreview,h=void 0!==b&&b,y=e.showPromote,g=void 0!==y&&y,E=e.showRestore,j=void 0!==E&&E;return d||v||h||g||j?r.createElement(w.a,{className:"bcs-VersionsItemActions",constrainToScrollParent:!0,constrainToWindow:!0,isRightAligned:!0,onMenuClose:_},r.createElement(C.a,{className:"bcs-VersionsItemActions-toggle","data-resin-iscurrent":o,"data-resin-itemid":t,"data-resin-target":"overflow",onClick:L,type:"button"},r.createElement(P.a,{height:4,width:14}),r.createElement(m.b,p.versionActionToggle,function(e){return r.createElement("span",{className:"accessibility-hidden"},e)})),r.createElement(S.a,{className:"bcs-VersionsItemActions-menu","data-resin-component":"preview","data-resin-feature":"versions"},h&&r.createElement(A,{action:"preview",fileId:t,isCurrent:o,onClick:a},r.createElement(I.a,M),r.createElement(m.b,p.versionActionPreview)),v&&r.createElement(A,{action:"download",fileId:t,isCurrent:o,onClick:s},r.createElement(O,M),r.createElement(m.b,p.versionActionDownload)),g&&r.createElement(A,{action:"promote",fileId:t,isCurrent:o,onClick:c},r.createElement(N,M),r.createElement(m.b,p.versionActionPromote)),j&&r.createElement(A,{action:"restore",fileId:t,isCurrent:o,onClick:l},r.createElement(V,{height:14,width:14}),r.createElement(m.b,p.versionActionRestore)),d&&r.createElement(A,{action:"remove",fileId:t,isCurrent:o,onClick:i},r.createElement(k.a,M),r.createElement(m.b,p.versionActionDelete)))):null},T=n(6),x=n.n(T),B=n(38);n(1210);function U(e){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function H(e,t){return(H=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var G=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=new Array(i),a=0;a<i;a++)s[a]=arguments[a];return r=this,o=(e=F(t)).call.apply(e,[this].concat(s)),n=!o||"object"!==U(o)&&"function"!=typeof o?Y(r):o,z(Y(Y(n)),"setButtonRef",function(e){n.buttonRef=e}),z(Y(Y(n)),"setScroll",function(){var e=n.props.isSelected;n.buttonRef&&e&&Object(B.e)(n.buttonRef)}),n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&H(e,t)}(t,r["Component"]),n=t,(o=[{key:"componentDidMount",value:function(){this.setScroll()}},{key:"componentDidUpdate",value:function(e){var t=e.isSelected;this.props.isSelected!==t&&this.setScroll()}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.fileId,o=e.isCurrent,i=e.isDisabled,s=e.isSelected,a=e.onClick,c=x()("bcs-VersionsItemButton",{"bcs-is-disabled":i,"bcs-is-selected":s&&!i});return r.createElement(C.a,{"aria-disabled":i,className:c,"data-resin-iscurrent":o,"data-resin-itemid":n,"data-resin-target":"select",getDOMRef:this.setButtonRef,isDisabled:i,onClick:a,type:"button"},t)}}])&&W(n.prototype,o),i&&W(n,i),t}();z(G,"defaultProps",{isCurrent:!1,isDisabled:!1,isSelected:!1});var X=G;n(1211);function J(){return(J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var K,q=Object(m.g)(function(e){var t=e.intl,n={versionNumber:e.versionNumber};return r.createElement("div",{"aria-label":t.formatMessage(p.versionNumberLabel,n),className:"bcs-VersionsItemBadge"},r.createElement(m.b,J({},p.versionNumberBadge,{values:n})))}),Q=n(151),Z=n(1);n(1212);function $(){return($=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ee(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var te=(ee(K={},Z.Ve,p.versionDeletedBy),ee(K,Z.We,p.versionRestoredBy),ee(K,Z.Xe,p.versionUploadedBy),K),ne=function(e){var t=e.fileId,n=e.isCurrent,o=void 0!==n&&n,i=e.isSelected,s=void 0!==i&&i,a=e.isWatermarked,l=void 0!==a&&a,u=e.onDelete,d=e.onDownload,f=e.onPreview,v=e.onPromote,b=e.onRestore,h=e.version,y=e.versionCount,w=e.versionLimit,E=h.action,V=void 0===E?Z.Xe:E,O=h.created_at,P=h.id,I=h.is_download_available,k=h.modified_by,N=h.permissions,C=void 0===N?{}:N,j=h.size,D=h.version_number,A=C.can_delete,S=C.can_download,M=C.can_preview,_=C.can_upload,L=Object(g.a)(j),T=O&&new Date(O).getTime(),x=c()(k,"name",r.createElement(m.b,p.versionUserUnknown)),B=D?parseInt(D,10):1,U=V===Z.Ve,W=y-B>=w,F=M&&!U&&!W&&!(l&&!o&&!S),H=A&&!U&&!o,Y=S&&!U&&!!I,z=_&&!U&&!o,G=A&&U,J=F&&!s,K=H||Y||J||z||G,ee=function(e){return function(){e&&e(P)}};return r.createElement("div",{className:"bcs-VersionsItem"},r.createElement(X,{fileId:t,isCurrent:o,isDisabled:!F,isSelected:s,onClick:ee(f)},r.createElement("div",{className:"bcs-VersionsItem-badge"},r.createElement(q,{versionNumber:D})),r.createElement("div",{className:"bcs-VersionsItem-details"},o&&r.createElement("div",{className:"bcs-VersionsItem-current"},r.createElement(m.b,p.versionCurrent)),r.createElement("div",{className:"bcs-VersionsItem-log",title:x},r.createElement(m.b,$({},function(e){return te[e]||te[Z.Xe]}(V),{values:{name:x}}))),r.createElement("div",{className:"bcs-VersionsItem-info"},T&&r.createElement("time",{className:"bcs-VersionsItem-date",dateTime:O},r.createElement(Q.a,{alwaysShowTime:!0,relativeThreshold:3e5,timestamp:T})),!!j&&r.createElement("span",{className:"bcs-VersionsItem-size"},L)),W&&K&&r.createElement("div",{className:"bcs-VersionsItem-footer"},r.createElement(m.b,$({},p.versionLimitExceeded,{values:{versionLimit:w}}))))),!W&&K&&r.createElement(R,{fileId:t,isCurrent:o,onDelete:ee(u),onDownload:ee(d),onPreview:ee(f),onPromote:ee(v),onRestore:ee(b),showDelete:H,showDownload:Y,showPreview:J,showPromote:z,showRestore:G}))};n(1213);function re(){return(re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function oe(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ie=function(e){var t=e.currentId,n=e.versions,r=oe(e,["currentId","versions"]);return o.a.createElement("ul",{className:"bcs-VersionsList"},n.map(function(e){return o.a.createElement("li",{className:"bcs-VersionsList-item",key:e.id},o.a.createElement(d.c,{render:function(n){var i=n.match;return o.a.createElement(ne,re({isCurrent:t===e.id,isSelected:i.params.versionId===e.id,version:e},r))}}))}))};n(1214);function se(){return(se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ae(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ce="PRIOR_MONTH",le="PRIOR_WEEK",ue="PRIOR_YEAR",de="THIS_MONTH",fe="TODAY",me="WEEKDAY",ve="YESTERDAY",pe=function(e){var t=e.versionGroup,n=e.versions,r=ae(e,["versionGroup","versions"]),i=n[0].created_at;return o.a.createElement("section",{className:"bcs-VersionsGroup"},o.a.createElement("h1",{className:"bcs-VersionsGroup-heading"},function(e,t){if(!e||!t)return null;switch(t){case fe:return o.a.createElement(m.b,p.versionsToday);case ve:return o.a.createElement(m.b,p.versionsYesterday);case me:return o.a.createElement(m.a,{value:e,weekday:"long"});case le:return o.a.createElement(m.b,p.versionsPriorWeek);case de:return o.a.createElement(m.b,p.versionsThisMonth);case ce:return o.a.createElement(m.a,{value:e,month:"long"});case ue:return o.a.createElement(m.a,{value:e,year:"numeric"});default:return null}}(i,t)),o.a.createElement(ie,se({versions:n},r)))},be=n(1142),he=n(137);n(1215);function ye(){return(ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ge(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var we=function(e){var t=e.error,n=e.isLoading,r=e.fileId,i=e.parentName,s=e.versions,a=ge(e,["error","isLoading","fileId","parentName","versions"]),c=(s[0]||{}).id,l=!!s.length,u=!n&&!l,d=s.reduce(function(e,t){var n,r,o,i,s,a=(n=t.created_at,r=new Date,o=r.getDay(),i=r.getDate()-o,s=y.d(n),y.h(s)?fe:y.i(s)?ve:y.g(s)?y.f(s)?s.getDate()<=i-7?de:s.getDate()<=i?le:me:ce:ue);return e[a]=e[a]||[],e[a].push(t),e},{});return o.a.createElement(h.a,{className:"bcs-Versions","data-resin-component":"preview","data-resin-feature":"versions",title:o.a.createElement(o.a.Fragment,null,o.a.createElement(be.a,{"data-resin-target":"back",to:"/".concat(i)}),o.a.createElement(m.b,p.versionsTitle))},o.a.createElement(he.a,{className:"bcs-Versions-content",crawlerPosition:"top",isLoading:n},t&&o.a.createElement(v.a,{title:o.a.createElement(m.b,b.a.error)},t),u&&o.a.createElement("div",{className:"bcs-Versions-empty"},o.a.createElement(m.b,p.versionsEmpty)),l&&o.a.createElement("ul",{className:"bcs-Versions-menu"},Object.keys(d).map(function(e){return o.a.createElement("li",{className:"bcs-Versions-menu-item",key:e},o.a.createElement(pe,ye({currentId:c,fileId:r,versionGroup:e,versions:d[e]},a)))}))))},Ee=n(26),Ve=n(338);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pe(){return(Pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ie(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){Ae(e,t,n[t])})}return e}function ke(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function je(e,t){return(je=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function De(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ae(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Se=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=new Array(i),a=0;a<i;a++)s[a]=arguments[a];return r=this,o=(e=Ce(t)).call.apply(e,[this].concat(s)),n=!o||"object"!==Oe(o)&&"function"!=typeof o?De(r):o,Ae(De(De(n)),"state",{isLoading:!0,isWatermarked:!1,versionCount:1/0,versionLimit:1/0,versions:[]}),Ae(De(De(n)),"handleActionDelete",function(e){n.setState({isLoading:!0},function(){n.deleteVersion(e).then(n.fetchData).then(function(){return n.handleDeleteSuccess(e)}).catch(n.handleActionError)})}),Ae(De(De(n)),"handleActionDownload",function(e){n.fetchDownloadUrl(e).then(f.a).catch(n.handleActionError)}),Ae(De(De(n)),"handleActionError",function(e){var t=e.message;n.setState({error:t,isLoading:!1})}),Ae(De(De(n)),"handleActionPreview",function(e){n.updateVersion(e)}),Ae(De(De(n)),"handleActionPromote",function(e){n.setState({isLoading:!0},function(){n.promoteVersion(e).then(n.fetchData).then(n.handlePromoteSuccess).catch(n.handleActionError)})}),Ae(De(De(n)),"handleActionRestore",function(e){n.setState({isLoading:!0},function(){n.restoreVersion(e).then(n.fetchData).catch(n.handleActionError)})}),Ae(De(De(n)),"handleDeleteSuccess",function(e){e===n.props.versionId&&n.updateVersionToCurrent()}),Ae(De(De(n)),"handleFetchError",function(e){var t=e.message;n.setState({error:t,isLoading:!1,isWatermarked:!1,versionCount:0,versions:[]})}),Ae(De(De(n)),"handleFetchSuccess",function(e){var t=ke(e,2),r=t[0],o=t[1],i=n.props.api,s=r.version_limit,a=c()(r,"watermark_info.is_watermarked",!1),l=null!=s?s:1/0,u=i.getVersionsAPI(!1),d=u.addPermissions(o,r),f=u.sortVersions(d)||{},m=f.entries,v=f.total_count;return n.setState({error:void 0,isLoading:!1,isWatermarked:a,versionCount:v,versionLimit:l,versions:m},n.verifyVersion),[r,o]}),Ae(De(De(n)),"handlePromoteSuccess",function(e){var t=ke(e,1)[0].file_version;t&&n.updateVersion(t.id)}),Ae(De(De(n)),"fetchData",function(){return Promise.all([n.fetchFile(),n.fetchVersions()]).then(n.fetchVersionCurrent).then(n.handleFetchSuccess).catch(n.handleFetchError)}),Ae(De(De(n)),"fetchDownloadUrl",function(e){var t=n.props,r=t.api,o=t.fileId,i=n.findVersion(e);return i?new Promise(function(e,t){r.getFileAPI().getDownloadUrl(o,i,e,t)}):Promise.reject(new Error("Could not find requested version"))}),Ae(De(De(n)),"fetchFile",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.props,r=t.api,o=t.fileId;return new Promise(function(t,n){return r.getFileAPI().getFile(o,t,n,Ie({fields:Ee.d,forceFetch:!0},e))})}),Ae(De(De(n)),"fetchVersions",function(){var e=n.props,t=e.api,r=e.fileId;return new Promise(function(e,n){return t.getVersionsAPI(!1).getVersions(r,e,n)})}),Ae(De(De(n)),"fetchVersionCurrent",function(e){var t=ke(e,2),r=t[0],o=t[1],i=n.props,s=i.api,a=i.fileId,c=r.file_version,l=void 0===c?{}:c;return new Promise(function(e,t){return s.getVersionsAPI(!1).getCurrentVersion(a,l.id,function(t){e([r,s.getVersionsAPI(!1).addCurrentVersion(t,o,r)])},t)})}),Ae(De(De(n)),"findVersion",function(e){return n.state.versions.find(function(t){return t.id===e})}),Ae(De(De(n)),"getCurrentVersionId",function(){var e=n.state.versions;return e[0]?e[0].id:null}),Ae(De(De(n)),"deleteVersion",function(e){var t=n.props,r=t.api,o=t.fileId,i=(n.findVersion(e)||{}).permissions,s=void 0===i?{}:i;return new Promise(function(t,n){return r.getVersionsAPI(!1).deleteVersion({fileId:o,permissions:s,successCallback:t,errorCallback:n,versionId:e})})}),Ae(De(De(n)),"promoteVersion",function(e){var t=n.props,r=t.api,o=t.fileId,i=(n.findVersion(e)||{}).permissions,s=void 0===i?{}:i;return new Promise(function(t,n){return r.getVersionsAPI(!1).promoteVersion({fileId:o,permissions:s,successCallback:t,errorCallback:n,versionId:e})})}),Ae(De(De(n)),"restoreVersion",function(e){var t=n.props,r=t.api,o=t.fileId,i=(n.findVersion(e)||{}).permissions,s=void 0===i?{}:i;return new Promise(function(t,n){return r.getVersionsAPI(!1).restoreVersion({fileId:o,permissions:s,successCallback:t,errorCallback:n,versionId:e})})}),Ae(De(De(n)),"updateVersion",function(e){var t=n.props,r=t.history,o=t.match;return r.push(Object(d.f)(o.path,Ie({},o.params,{versionId:e})))}),Ae(De(De(n)),"updateVersionToCurrent",function(){n.updateVersion(n.getCurrentVersionId())}),Ae(De(De(n)),"verifyVersion",function(){var e=n.props,t=e.onVersionChange,r=e.versionId,o=n.findVersion(r);o?t(o,{currentVersionId:n.getCurrentVersionId(),updateVersionToCurrent:n.updateVersionToCurrent}):n.updateVersionToCurrent()}),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&je(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){this.fetchData()}},{key:"componentDidUpdate",value:function(e){var t=e.versionId;this.props.versionId!==t&&this.verifyVersion()}},{key:"componentWillUnmount",value:function(){this.props.onVersionChange(null)}},{key:"render",value:function(){var e=this.props,t=e.fileId,n=e.parentName;return o.a.createElement(we,Pe({fileId:t,onDelete:this.handleActionDelete,onDownload:this.handleActionDownload,onPreview:this.handleActionPreview,onPromote:this.handleActionPromote,onRestore:this.handleActionRestore,parentName:n},this.state))}}])&&Ne(n.prototype,r),i&&Ne(n,i),t}();Ae(Se,"defaultProps",{onVersionChange:u.a,parentName:""});var Me=s()([d.g,Ve.b])(Se);n.d(t,"default",function(){return Me}),n.d(t,"VersionsSidebarComponent",function(){return we})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm94LXVpLWVsZW1lbnRzL2VzL2ljb25zL2dlbmVyYWwvSWNvbk9wZW5XaXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3gtdWktZWxlbWVudHMvZXMvZWxlbWVudHMvY29udGVudC1zaWRlYmFyL3ZlcnNpb25zL21lc3NhZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3gtdWktZWxlbWVudHMvZXMvaWNvbnMvZ2VuZXJhbC9JY29uQ2xvY2tQYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3gtdWktZWxlbWVudHMvZXMvaWNvbnMvZ2VuZXJhbC9JY29uRG93bmxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JveC11aS1lbGVtZW50cy9lcy9pY29ucy9nZW5lcmFsL0ljb25VcGxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JveC11aS1lbGVtZW50cy9lcy9lbGVtZW50cy9jb250ZW50LXNpZGViYXIvdmVyc2lvbnMvVmVyc2lvbnNJdGVtQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3gtdWktZWxlbWVudHMvZXMvZWxlbWVudHMvY29udGVudC1zaWRlYmFyL3ZlcnNpb25zL1ZlcnNpb25zSXRlbUFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JveC11aS1lbGVtZW50cy9lcy9lbGVtZW50cy9jb250ZW50LXNpZGViYXIvdmVyc2lvbnMvVmVyc2lvbnNJdGVtQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3gtdWktZWxlbWVudHMvZXMvZWxlbWVudHMvY29udGVudC1zaWRlYmFyL3ZlcnNpb25zL1ZlcnNpb25zSXRlbUJhZGdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3gtdWktZWxlbWVudHMvZXMvZWxlbWVudHMvY29udGVudC1zaWRlYmFyL3ZlcnNpb25zL1ZlcnNpb25zSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm94LXVpLWVsZW1lbnRzL2VzL2VsZW1lbnRzL2NvbnRlbnQtc2lkZWJhci92ZXJzaW9ucy9WZXJzaW9uc0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JveC11aS1lbGVtZW50cy9lcy9lbGVtZW50cy9jb250ZW50LXNpZGViYXIvdmVyc2lvbnMvVmVyc2lvbnNHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm94LXVpLWVsZW1lbnRzL2VzL2VsZW1lbnRzL2NvbnRlbnQtc2lkZWJhci92ZXJzaW9ucy9WZXJzaW9uc1NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JveC11aS1lbGVtZW50cy9lcy9lbGVtZW50cy9jb250ZW50LXNpZGViYXIvdmVyc2lvbnMvVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3gtdWktZWxlbWVudHMvZXMvZWxlbWVudHMvY29udGVudC1zaWRlYmFyL3ZlcnNpb25zL2luZGV4LmpzIl0sIm5hbWVzIjpbInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX2FjY2Vzc2libGVfc3ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX3JlZiIsIl9yZWYkY2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiX3JlZiRjb2xvciIsImNvbG9yIiwiX3JlZiRoZWlnaHQiLCJoZWlnaHQiLCJ0aXRsZSIsIl9yZWYkd2lkdGgiLCJ3aWR0aCIsImNvbmNhdCIsInZpZXdCb3giLCJkIiwiZmlsbCIsInZlcnNpb25zX21lc3NhZ2VzIiwiT2JqZWN0IiwiaW5kZXhfZXMiLCJ2ZXJzaW9uc0VtcHR5IiwiaWQiLCJkZWZhdWx0TWVzc2FnZSIsInZlcnNpb25zUHJpb3JXZWVrIiwidmVyc2lvbnNUaGlzTW9udGgiLCJ2ZXJzaW9uc1RvZGF5IiwidmVyc2lvbnNZZXN0ZXJkYXkiLCJ2ZXJzaW9uc1RpdGxlIiwidmVyc2lvbkN1cnJlbnQiLCJ2ZXJzaW9uQWN0aW9uRGVsZXRlIiwidmVyc2lvbkFjdGlvbkRvd25sb2FkIiwidmVyc2lvbkFjdGlvblByZXZpZXciLCJ2ZXJzaW9uQWN0aW9uUHJvbW90ZSIsInZlcnNpb25BY3Rpb25SZXN0b3JlIiwidmVyc2lvbkFjdGlvblRvZ2dsZSIsInZlcnNpb25EZWxldGVkQnkiLCJ2ZXJzaW9uTGltaXRFeGNlZWRlZCIsInZlcnNpb25OdW1iZXJCYWRnZSIsInZlcnNpb25OdW1iZXJMYWJlbCIsInZlcnNpb25SZXN0b3JlZEJ5IiwidmVyc2lvblVwbG9hZGVkQnkiLCJ2ZXJzaW9uVXNlclVua25vd24iLCJnZW5lcmFsX0ljb25DbG9ja1Bhc3QiLCJyZWFjdCIsImFjY2Vzc2libGVfc3ZnIiwiZmlsbFJ1bGUiLCJ0cmFuc2Zvcm0iLCJyeCIsIngiLCJ5Iiwic3Ryb2tlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwiZ2VuZXJhbF9JY29uRG93bmxvYWQiLCJnZW5lcmFsX0ljb25VcGxvYWQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsInRoaXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY29udGVudF9zaWRlYmFyX3ZlcnNpb25zX1ZlcnNpb25zSXRlbUFjdGlvbiIsImFjdGlvbiIsImNoaWxkcmVuIiwiZmlsZUlkIiwiaXNDdXJyZW50IiwicmVzdCIsInBsYWluX2J1dHRvbiIsImRhdGEtcmVzaW4taXNjdXJyZW50IiwiZGF0YS1yZXNpbi1pdGVtaWQiLCJkYXRhLXJlc2luLXRhcmdldCIsInJvbGUiLCJ0eXBlIiwiSUNPTl9TSVpFIiwiaGFuZGxlTWVudUNsb3NlIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJoYW5kbGVUb2dnbGVDbGljayIsImNvbnRlbnRfc2lkZWJhcl92ZXJzaW9uc19WZXJzaW9uc0l0ZW1BY3Rpb25zIiwiX3JlZiRpc0N1cnJlbnQiLCJvbkRlbGV0ZSIsIm9uRG93bmxvYWQiLCJvblByZXZpZXciLCJvblByb21vdGUiLCJvblJlc3RvcmUiLCJfcmVmJHNob3dEZWxldGUiLCJzaG93RGVsZXRlIiwiX3JlZiRzaG93RG93bmxvYWQiLCJzaG93RG93bmxvYWQiLCJfcmVmJHNob3dQcmV2aWV3Iiwic2hvd1ByZXZpZXciLCJfcmVmJHNob3dQcm9tb3RlIiwic2hvd1Byb21vdGUiLCJfcmVmJHNob3dSZXN0b3JlIiwic2hvd1Jlc3RvcmUiLCJkcm9wZG93bl9tZW51IiwiY29uc3RyYWluVG9TY3JvbGxQYXJlbnQiLCJjb25zdHJhaW5Ub1dpbmRvdyIsImlzUmlnaHRBbGlnbmVkIiwib25NZW51Q2xvc2UiLCJvbkNsaWNrIiwiSWNvbkVsbGlwc2lzIiwidGV4dCIsIm1lbnUiLCJkYXRhLXJlc2luLWNvbXBvbmVudCIsImRhdGEtcmVzaW4tZmVhdHVyZSIsIkljb25PcGVuV2l0aCIsIkljb25UcmFzaCIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX3NldFByb3RvdHlwZU9mIiwicCIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIlZlcnNpb25zSXRlbUJ1dHRvbl9WZXJzaW9uc0l0ZW1CdXR0b24iLCJfUmVhY3QkQ29tcG9uZW50IiwiVmVyc2lvbnNJdGVtQnV0dG9uIiwiX2dldFByb3RvdHlwZU9mMiIsIl90aGlzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiYnV0dG9uUmVmIiwiaXNTZWxlY3RlZCIsImRvbSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9pbmhlcml0cyIsInNldFNjcm9sbCIsInByZXZJc1NlbGVjdGVkIiwiX3RoaXMkcHJvcHMiLCJpc0Rpc2FibGVkIiwiYnV0dG9uQ2xhc3NOYW1lIiwiY2xhc3NuYW1lc19kZWZhdWx0IiwiYmNzLWlzLWRpc2FibGVkIiwiYmNzLWlzLXNlbGVjdGVkIiwiYXJpYS1kaXNhYmxlZCIsImdldERPTVJlZiIsInNldEJ1dHRvblJlZiIsImNvbnRlbnRfc2lkZWJhcl92ZXJzaW9uc19WZXJzaW9uc0l0ZW1CdXR0b24iLCJWZXJzaW9uc0l0ZW1CYWRnZV9leHRlbmRzIiwiX0FDVElPTl9NQVAiLCJjb250ZW50X3NpZGViYXJfdmVyc2lvbnNfVmVyc2lvbnNJdGVtQmFkZ2UiLCJpbnRsIiwiaW50bFZhbHVlcyIsInZlcnNpb25OdW1iZXIiLCJhcmlhLWxhYmVsIiwiZm9ybWF0TWVzc2FnZSIsInZhbHVlcyIsIlZlcnNpb25zSXRlbV9leHRlbmRzIiwiVmVyc2lvbnNJdGVtX2RlZmluZVByb3BlcnR5IiwiQUNUSU9OX01BUCIsImNvbnN0YW50cyIsImNvbnRlbnRfc2lkZWJhcl92ZXJzaW9uc19WZXJzaW9uc0l0ZW0iLCJfcmVmJGlzU2VsZWN0ZWQiLCJfcmVmJGlzV2F0ZXJtYXJrZWQiLCJpc1dhdGVybWFya2VkIiwidmVyc2lvbiIsInZlcnNpb25Db3VudCIsInZlcnNpb25MaW1pdCIsIl92ZXJzaW9uJGFjdGlvbiIsImNyZWF0ZWRBdCIsImNyZWF0ZWRfYXQiLCJ2ZXJzaW9uSWQiLCJpc19kb3dubG9hZF9hdmFpbGFibGUiLCJtb2RpZmllZEJ5IiwibW9kaWZpZWRfYnkiLCJfdmVyc2lvbiRwZXJtaXNzaW9ucyIsInBlcm1pc3Npb25zIiwic2l6ZSIsInZlcnNpb25fbnVtYmVyIiwiY2FuX2RlbGV0ZSIsImNhbl9kb3dubG9hZCIsImNhbl9wcmV2aWV3IiwiY2FuX3VwbG9hZCIsInZlcnNpb25TaXplIiwidXRpbHNfc2l6ZSIsInZlcnNpb25UaW1lc3RhbXAiLCJEYXRlIiwiZ2V0VGltZSIsInZlcnNpb25Vc2VyTmFtZSIsImdldF9kZWZhdWx0IiwidmVyc2lvbkludGVnZXIiLCJwYXJzZUludCIsImlzRGVsZXRlZCIsImlzTGltaXRlZCIsImNhblByZXZpZXciLCJoYXNBY3Rpb25zIiwiaGFuZGxlQWN0aW9uIiwiaGFuZGxlciIsIlZlcnNpb25zSXRlbV9nZXRBY3Rpb25NZXNzYWdlIiwibmFtZSIsImRhdGVUaW1lIiwidGltZSIsImFsd2F5c1Nob3dUaW1lIiwicmVsYXRpdmVUaHJlc2hvbGQiLCJ0aW1lc3RhbXAiLCJWZXJzaW9uc0xpc3RfZXh0ZW5kcyIsIlZlcnNpb25zTGlzdF9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIlZlcnNpb25zTGlzdF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiY29udGVudF9zaWRlYmFyX3ZlcnNpb25zX1ZlcnNpb25zTGlzdCIsImN1cnJlbnRJZCIsInZlcnNpb25zIiwicmVhY3RfZGVmYXVsdCIsImEiLCJjcmVhdGVFbGVtZW50IiwibWFwIiwicmVhY3Rfcm91dGVyIiwicmVuZGVyIiwiX3JlZjIiLCJtYXRjaCIsInBhcmFtcyIsIlZlcnNpb25zR3JvdXBfZXh0ZW5kcyIsIlZlcnNpb25zR3JvdXBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJWZXJzaW9uc0dyb3VwX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJHUk9VUFMiLCJjb250ZW50X3NpZGViYXJfdmVyc2lvbnNfVmVyc2lvbnNHcm91cCIsInZlcnNpb25Hcm91cCIsImdyb3VwRGF0ZSIsImRhdGUiLCJncm91cCIsIndlZWtkYXkiLCJtb250aCIsInllYXIiLCJWZXJzaW9uc0dyb3VwX2dldEhlYWRpbmciLCJWZXJzaW9uc1NpZGViYXJfZXh0ZW5kcyIsIlZlcnNpb25zU2lkZWJhcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIlZlcnNpb25zU2lkZWJhcl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiY29udGVudF9zaWRlYmFyX3ZlcnNpb25zX1ZlcnNpb25zU2lkZWJhciIsImVycm9yIiwiaXNMb2FkaW5nIiwicGFyZW50TmFtZSIsInNob3dWZXJzaW9ucyIsInNob3dFbXB0eSIsInZlcnNpb25Hcm91cHMiLCJyZWR1Y2UiLCJncm91cHMiLCJjdXJyZW50RGF0ZSIsImN1cnJlbnREYXkiLCJjdXJyZW50U3VuZGF5IiwiY3JlYXRlZEF0RGF0ZSIsImdldERheSIsImdldERhdGUiLCJkYXRldGltZSIsInB1c2giLCJTaWRlYmFyQ29udGVudCIsIkZyYWdtZW50IiwibmF2X2J1dHRvbiIsInRvIiwibG9hZGluZ19pbmRpY2F0b3IiLCJjcmF3bGVyUG9zaXRpb24iLCJpbmxpbmVfZXJyb3IiLCJjb21tb25fbWVzc2FnZXMiLCJ2ZXJzaW9uR3JvdXBLZXkiLCJWZXJzaW9uc1NpZGViYXJDb250YWluZXJfdHlwZW9mIiwiVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyX2V4dGVuZHMiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZvckVhY2giLCJWZXJzaW9uc1NpZGViYXJDb250YWluZXJfZGVmaW5lUHJvcGVydHkiLCJfc2xpY2VkVG9BcnJheSIsImFyciIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJfaSIsIm5leHQiLCJkb25lIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlZlcnNpb25zU2lkZWJhckNvbnRhaW5lcl9kZWZpbmVQcm9wZXJ0aWVzIiwiVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyX2dldFByb3RvdHlwZU9mIiwiVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyX3NldFByb3RvdHlwZU9mIiwiVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlZlcnNpb25zU2lkZWJhckNvbnRhaW5lcl9WZXJzaW9uc1NpZGViYXJDb250YWluZXIiLCJWZXJzaW9uc1NpZGViYXJDb250YWluZXIiLCJWZXJzaW9uc1NpZGViYXJDb250YWluZXJfY2xhc3NDYWxsQ2hlY2siLCJJbmZpbml0eSIsInNldFN0YXRlIiwiZGVsZXRlVmVyc2lvbiIsInRoZW4iLCJmZXRjaERhdGEiLCJoYW5kbGVEZWxldGVTdWNjZXNzIiwiY2F0Y2giLCJoYW5kbGVBY3Rpb25FcnJvciIsImZldGNoRG93bmxvYWRVcmwiLCJpZnJhbWUiLCJtZXNzYWdlIiwidXBkYXRlVmVyc2lvbiIsInByb21vdGVWZXJzaW9uIiwiaGFuZGxlUHJvbW90ZVN1Y2Nlc3MiLCJyZXN0b3JlVmVyc2lvbiIsInVwZGF0ZVZlcnNpb25Ub0N1cnJlbnQiLCJfcmVmMyIsIl9yZWY0IiwiZmlsZVJlc3BvbnNlIiwidmVyc2lvbnNSZXNwb25zZSIsImFwaSIsInZlcnNpb25fbGltaXQiLCJ2ZXJzaW9uc0FwaSIsImdldFZlcnNpb25zQVBJIiwidmVyc2lvbnNXaXRoUGVybWlzc2lvbnMiLCJhZGRQZXJtaXNzaW9ucyIsIl9yZWY1Iiwic29ydFZlcnNpb25zIiwiZW50cmllcyIsInRvdGFsQ291bnQiLCJ0b3RhbF9jb3VudCIsInZlcmlmeVZlcnNpb24iLCJfcmVmNiIsImZpbGVWZXJzaW9uIiwiZmlsZV92ZXJzaW9uIiwiUHJvbWlzZSIsImFsbCIsImZldGNoRmlsZSIsImZldGNoVmVyc2lvbnMiLCJmZXRjaFZlcnNpb25DdXJyZW50IiwiaGFuZGxlRmV0Y2hTdWNjZXNzIiwiaGFuZGxlRmV0Y2hFcnJvciIsImZpbmRWZXJzaW9uIiwicmVzb2x2ZSIsInJlamVjdCIsImdldEZpbGVBUEkiLCJnZXREb3dubG9hZFVybCIsIkVycm9yIiwib3B0aW9ucyIsIl90aGlzJHByb3BzMiIsImdldEZpbGUiLCJmaWVsZHMiLCJmb3JjZUZldGNoIiwiX3RoaXMkcHJvcHMzIiwiZ2V0VmVyc2lvbnMiLCJfcmVmOCIsIl9yZWY5IiwiX3RoaXMkcHJvcHM0IiwiX2ZpbGVSZXNwb25zZSRmaWxlX3ZlIiwiZ2V0Q3VycmVudFZlcnNpb24iLCJjdXJyZW50VmVyc2lvblJlc3BvbnNlIiwiYWRkQ3VycmVudFZlcnNpb24iLCJzdGF0ZSIsImZpbmQiLCJfdGhpcyRwcm9wczUiLCJfcmVmMTAkcGVybWlzc2lvbnMiLCJzdWNjZXNzQ2FsbGJhY2siLCJlcnJvckNhbGxiYWNrIiwiX3RoaXMkcHJvcHM2IiwiX3JlZjExJHBlcm1pc3Npb25zIiwiX3RoaXMkcHJvcHM3IiwiX3JlZjEyJHBlcm1pc3Npb25zIiwiX3RoaXMkcHJvcHM4IiwiaGlzdG9yeSIsInBhdGgiLCJnZXRDdXJyZW50VmVyc2lvbklkIiwiX3RoaXMkcHJvcHM5Iiwib25WZXJzaW9uQ2hhbmdlIiwic2VsZWN0ZWRWZXJzaW9uIiwiY3VycmVudFZlcnNpb25JZCIsIlZlcnNpb25zU2lkZWJhckNvbnRhaW5lcl9pbmhlcml0cyIsIkNvbXBvbmVudCIsIl9yZWYxMyIsInByZXZWZXJzaW9uSWQiLCJfdGhpcyRwcm9wczEwIiwiaGFuZGxlQWN0aW9uRGVsZXRlIiwiaGFuZGxlQWN0aW9uRG93bmxvYWQiLCJoYW5kbGVBY3Rpb25QcmV2aWV3IiwiaGFuZGxlQWN0aW9uUHJvbW90ZSIsImhhbmRsZUFjdGlvblJlc3RvcmUiLCJub29wX2RlZmF1bHQiLCJ2ZXJzaW9uc19WZXJzaW9uc1NpZGViYXJDb250YWluZXIiLCJmbG93X2RlZmF1bHQiLCJhcGlfY29udGV4dCJdLCJtYXBwaW5ncyI6IjJGQUFBLElBQUFBLEVBQUFDLEVBQUEsR0FBQUMsRUFBQUQsRUFBQSxHQThCZUUsRUFBQSxFQTNCZixTQUFBQyxHQUNBLElBQUFDLEVBQUFELEVBQUFFLFVBQ0FBLE9BQUEsSUFBQUQsRUFBQSxHQUFBQSxFQUNBRSxFQUFBSCxFQUFBSSxNQUNBQSxPQUFBLElBQUFELEVBQUEsVUFBQUEsRUFDQUUsRUFBQUwsRUFBQU0sT0FDQUEsT0FBQSxJQUFBRCxFQUFBLEdBQUFBLEVBQ0FFLEVBQUFQLEVBQUFPLE1BQ0FDLEVBQUFSLEVBQUFTLE1BQ0FBLE9BQUEsSUFBQUQsRUFBQSxHQUFBQSxFQUNBLE9BQVNaLEVBQUEsY0FBb0JFLEVBQUEsRUFBYSxDQUMxQ0ksVUFBQSxrQkFBQVEsT0FBQVIsR0FDQUksU0FDQUMsUUFDQUksUUFBQSxZQUNBRixTQUNLYixFQUFBLGNBQW1CLFFBQ3hCTSxVQUFBLGFBQ0FVLEVBQUEsNklBQ0FDLEtBQUFULElBQ01SLEVBQUEsY0FBbUIsUUFDekJNLFVBQUEsYUFDQVUsRUFBQSw2Q0FDQUMsS0FBQVQseVZDeURlVSxFQWxGQUMsT0FBQUMsRUFBQSxFQUFBRCxDQUFjLENBQzdCRSxjQUFBLENBQ0FDLEdBQUEsMkJBQ0FDLGVBQUEsa0RBRUFDLGtCQUFBLENBQ0FGLEdBQUEsK0JBQ0FDLGVBQUEsYUFFQUUsa0JBQUEsQ0FDQUgsR0FBQSwrQkFDQUMsZUFBQSxjQUVBRyxjQUFBLENBQ0FKLEdBQUEsMkJBQ0FDLGVBQUEsU0FFQUksa0JBQUEsQ0FDQUwsR0FBQSwrQkFDQUMsZUFBQSxhQUVBSyxjQUFBLENBQ0FOLEdBQUEsMkJBQ0FDLGVBQUEsbUJBRUFNLGVBQUEsQ0FDQVAsR0FBQSw2QkFDQUMsZUFBQSxtQkFFQU8sb0JBQUEsQ0FDQVIsR0FBQSw0QkFDQUMsZUFBQSxVQUVBUSxzQkFB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K0QsTUFBQTJFLFlBRUE4TSxHQUNBeFYsS0FBQW9TLGtCQUdHLENBQ0h6UyxJQUFBLHVCQUNBcUYsTUFBQSxXQUVBaEYsS0FBQStELE1BQUFtUixnQkFBQSxRQUVHLENBQ0h2VixJQUFBLFNBQ0FxRixNQUFBLFdBQ0EsSUFBQXlRLEVBQUF6VixLQUFBK0QsTUFDQWxELEVBQUE0VSxFQUFBNVUsT0FDQWlNLEVBQUEySSxFQUFBM0ksV0FDQSxPQUFhNUIsRUFBQUMsRUFBS0MsY0FBZXVCLEdBQWlCMkIsR0FBUSxDQUMxRHpOLFNBQ0FnQixTQUFBN0IsS0FBQTBWLG1CQUNBNVQsV0FBQTlCLEtBQUEyVixxQkFDQTVULFVBQUEvQixLQUFBNFYsb0JBQ0E1VCxVQUFBaEMsS0FBQTZWLG9CQUNBNVQsVUFBQWpDLEtBQUE4VixvQkFDQWhKLGNBQ085TSxLQUFBbVUsYUFyV3VFckUsR0FBaUJ2SyxFQUFBM0YsVUFBQXFHLEdBQW9DQyxHQUFrQjRKLEdBQWlCdkssRUFBQVcsR0F5V3RLaUssRUF6VUEsR0E0VUF0QixHQUFnQnFCLEdBQXdCLGdCQUN4Q2dGLGdCQUFtQmEsRUFBQTVLLEVBQ25CMkIsV0FBQSxLQUdlLElBQUFrSixHQUFBQyxJQUFJLENBQUUzSyxFQUFBLEVBQVk0SyxHQUFBLEdBQWxCLENBQW1DaEcsSUNuWWxEclUsRUFBQWUsRUFBQWIsRUFBQSw0QkFBQWlhLEtBQUFuYSxFQUFBZSxFQUFBYixFQUFBLDZDQUFBNFEiLCJmaWxlIjoidmVuZG9yc352ZXJzaW9ucy1zaWRlYmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFjY2Vzc2libGVTVkcgZnJvbSAnLi4vYWNjZXNzaWJsZS1zdmcnO1xuXG52YXIgSWNvbk9wZW5XaXRoID0gZnVuY3Rpb24gSWNvbk9wZW5XaXRoKF9yZWYpIHtcbiAgdmFyIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmJGNsYXNzTmFtZSxcbiAgICAgIF9yZWYkY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcmVmJGNvbG9yID09PSB2b2lkIDAgPyAnIzQ0NDQ0NCcgOiBfcmVmJGNvbG9yLFxuICAgICAgX3JlZiRoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIGhlaWdodCA9IF9yZWYkaGVpZ2h0ID09PSB2b2lkIDAgPyAxMiA6IF9yZWYkaGVpZ2h0LFxuICAgICAgdGl0bGUgPSBfcmVmLnRpdGxlLFxuICAgICAgX3JlZiR3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICB3aWR0aCA9IF9yZWYkd2lkdGggPT09IHZvaWQgMCA/IDEyIDogX3JlZiR3aWR0aDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQWNjZXNzaWJsZVNWRywge1xuICAgIGNsYXNzTmFtZTogXCJpY29uLW9wZW4td2l0aCBcIi5jb25jYXQoY2xhc3NOYW1lKSxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB0aXRsZTogdGl0bGUsXG4gICAgdmlld0JveDogXCIwIDAgMTIgMTJcIixcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJmaWxsLWNvbG9yXCIsXG4gICAgZDogXCJNMTAgMWExIDEgMCAwIDEgMSAxdjhhMSAxIDAgMCAxLTEgMUgyYTEgMSAwIDAgMS0xLTFWMmExIDEgMCAwIDEgMS0xaDhtMC0xSDJhMiAyIDAgMCAwLTIgMnY4YTIgMiAwIDAgMCAyIDJoOGEyIDIgMCAwIDAgMi0yVjJhMiAyIDAgMCAwLTItMnpcIixcbiAgICBmaWxsOiBjb2xvclxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJmaWxsLWNvbG9yXCIsXG4gICAgZDogXCJNMyAzdjFoNC4yOUwyLjY1IDguNjVsLjcuN0w4IDQuNzFWOWgxVjNIM3pcIixcbiAgICBmaWxsOiBjb2xvclxuICB9KSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uT3BlbldpdGg7IiwiaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMgfSBmcm9tICdyZWFjdC1pbnRsJztcbnZhciBtZXNzYWdlcyA9IGRlZmluZU1lc3NhZ2VzKHtcbiAgdmVyc2lvbnNFbXB0eToge1xuICAgIFwiaWRcIjogXCJiZS5zaWRlYmFyVmVyc2lvbnMuZW1wdHlcIixcbiAgICBcImRlZmF1bHRNZXNzYWdlXCI6IFwiTm8gcHJpb3IgdmVyc2lvbnMgYXJlIGF2YWlsYWJsZSBmb3IgdGhpcyBmaWxlLlwiXG4gIH0sXG4gIHZlcnNpb25zUHJpb3JXZWVrOiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy5wcmlvcldlZWtcIixcbiAgICBcImRlZmF1bHRNZXNzYWdlXCI6IFwiTGFzdCBXZWVrXCJcbiAgfSxcbiAgdmVyc2lvbnNUaGlzTW9udGg6IHtcbiAgICBcImlkXCI6IFwiYmUuc2lkZWJhclZlcnNpb25zLnRoaXNNb250aFwiLFxuICAgIFwiZGVmYXVsdE1lc3NhZ2VcIjogXCJUaGlzIE1vbnRoXCJcbiAgfSxcbiAgdmVyc2lvbnNUb2RheToge1xuICAgIFwiaWRcIjogXCJiZS5zaWRlYmFyVmVyc2lvbnMudG9kYXlcIixcbiAgICBcImRlZmF1bHRNZXNzYWdlXCI6IFwiVG9kYXlcIlxuICB9LFxuICB2ZXJzaW9uc1llc3RlcmRheToge1xuICAgIFwiaWRcIjogXCJiZS5zaWRlYmFyVmVyc2lvbnMueWVzdGVyZGF5XCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIlllc3RlcmRheVwiXG4gIH0sXG4gIHZlcnNpb25zVGl0bGU6IHtcbiAgICBcImlkXCI6IFwiYmUuc2lkZWJhclZlcnNpb25zLnRpdGxlXCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIlZlcnNpb24gSGlzdG9yeVwiXG4gIH0sXG4gIHZlcnNpb25DdXJyZW50OiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy5jdXJyZW50XCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIkN1cnJlbnQgVmVyc2lvblwiXG4gIH0sXG4gIHZlcnNpb25BY3Rpb25EZWxldGU6IHtcbiAgICBcImlkXCI6IFwiYmUuc2lkZWJhclZlcnNpb25zLmRlbGV0ZVwiLFxuICAgIFwiZGVmYXVsdE1lc3NhZ2VcIjogXCJEZWxldGVcIlxuICB9LFxuICB2ZXJzaW9uQWN0aW9uRG93bmxvYWQ6IHtcbiAgICBcImlkXCI6IFwiYmUuc2lkZWJhclZlcnNpb25zLmRvd25sb2FkXCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIkRvd25sb2FkXCJcbiAgfSxcbiAgdmVyc2lvbkFjdGlvblByZXZpZXc6IHtcbiAgICBcImlkXCI6IFwiYmUuc2lkZWJhclZlcnNpb25zLnByZXZpZXdcIixcbiAgICBcImRlZmF1bHRNZXNzYWdlXCI6IFwiUHJldmlld1wiXG4gIH0sXG4gIHZlcnNpb25BY3Rpb25Qcm9tb3RlOiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy5wcm9tb3RlXCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIk1ha2UgQ3VycmVudFwiXG4gIH0sXG4gIHZlcnNpb25BY3Rpb25SZXN0b3JlOiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy5yZXN0b3JlXCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIlJlc3RvcmVcIlxuICB9LFxuICB2ZXJzaW9uQWN0aW9uVG9nZ2xlOiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy50b2dnbGVcIixcbiAgICBcImRlZmF1bHRNZXNzYWdlXCI6IFwiVG9nZ2xlIEFjdGlvbnMgTWVudVwiXG4gIH0sXG4gIHZlcnNpb25EZWxldGVkQnk6IHtcbiAgICBcImlkXCI6IFwiYmUuc2lkZWJhclZlcnNpb25zLmRlbGV0ZWRCeVwiLFxuICAgIFwiZGVmYXVsdE1lc3NhZ2VcIjogXCJEZWxldGVkIGJ5IHtuYW1lfVwiXG4gIH0sXG4gIHZlcnNpb25MaW1pdEV4Y2VlZGVkOiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy52ZXJzaW9uTGltaXRFeGNlZWRlZFwiLFxuICAgIFwiZGVmYXVsdE1lc3NhZ2VcIjogXCJZb3UgYXJlIGxpbWl0ZWQgdG8gdGhlIGxhc3Qge3ZlcnNpb25MaW1pdCwgbnVtYmVyfSB7dmVyc2lvbkxpbWl0LCBwbHVyYWwsIG9uZSB7dmVyc2lvbn0gb3RoZXIge3ZlcnNpb25zfX0uXCJcbiAgfSxcbiAgdmVyc2lvbk51bWJlckJhZGdlOiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy52ZXJzaW9uTnVtYmVyQmFkZ2VcIixcbiAgICBcImRlZmF1bHRNZXNzYWdlXCI6IFwiVnt2ZXJzaW9uTnVtYmVyfVwiXG4gIH0sXG4gIHZlcnNpb25OdW1iZXJMYWJlbDoge1xuICAgIFwiaWRcIjogXCJiZS5zaWRlYmFyVmVyc2lvbnMudmVyc2lvbk51bWJlckxhYmVsXCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIlZlcnNpb24gbnVtYmVyIHt2ZXJzaW9uTnVtYmVyfVwiXG4gIH0sXG4gIHZlcnNpb25SZXN0b3JlZEJ5OiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy5yZXN0b3JlZEJ5XCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIlJlc3RvcmVkIGJ5IHtuYW1lfVwiXG4gIH0sXG4gIHZlcnNpb25VcGxvYWRlZEJ5OiB7XG4gICAgXCJpZFwiOiBcImJlLnNpZGViYXJWZXJzaW9ucy51cGxvYWRlZEJ5XCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIlVwbG9hZGVkIGJ5IHtuYW1lfVwiXG4gIH0sXG4gIHZlcnNpb25Vc2VyVW5rbm93bjoge1xuICAgIFwiaWRcIjogXCJiZS5zaWRlYmFyVmVyc2lvbnMudmVyc2lvblVzZXJVbmtub3duXCIsXG4gICAgXCJkZWZhdWx0TWVzc2FnZVwiOiBcIlVua25vd25cIlxuICB9XG59KTtcbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBY2Nlc3NpYmxlU1ZHIGZyb20gJy4uL2FjY2Vzc2libGUtc3ZnJztcblxudmFyIEljb25DbG9ja1Bhc3QgPSBmdW5jdGlvbiBJY29uQ2xvY2tQYXN0KF9yZWYpIHtcbiAgdmFyIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmJGNsYXNzTmFtZSxcbiAgICAgIF9yZWYkY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcmVmJGNvbG9yID09PSB2b2lkIDAgPyAnIzQ0NCcgOiBfcmVmJGNvbG9yLFxuICAgICAgX3JlZiRoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIGhlaWdodCA9IF9yZWYkaGVpZ2h0ID09PSB2b2lkIDAgPyAxNCA6IF9yZWYkaGVpZ2h0LFxuICAgICAgdGl0bGUgPSBfcmVmLnRpdGxlLFxuICAgICAgX3JlZiR3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICB3aWR0aCA9IF9yZWYkd2lkdGggPT09IHZvaWQgMCA/IDE2IDogX3JlZiR3aWR0aDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQWNjZXNzaWJsZVNWRywge1xuICAgIGNsYXNzTmFtZTogXCJpY29uLWNsb2NrLXBhc3QgXCIuY29uY2F0KGNsYXNzTmFtZSksXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgdGl0bGU6IHRpdGxlLFxuICAgIHZpZXdCb3g6IFwiMCAwIDE2IDE0XCIsXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHtcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgwIDEpXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgIGNsYXNzTmFtZTogXCJmaWxsLWNvbG9yXCIsXG4gICAgZmlsbDogY29sb3IsXG4gICAgaGVpZ2h0OiBcIjVcIixcbiAgICByeDogXCIuNVwiLFxuICAgIHdpZHRoOiBcIjFcIixcbiAgICB4OiBcIjkuNjZcIixcbiAgICB5OiBcIjNcIlxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInJlY3RcIiwge1xuICAgIGNsYXNzTmFtZTogXCJmaWxsLWNvbG9yXCIsXG4gICAgZmlsbDogY29sb3IsXG4gICAgaGVpZ2h0OiBcIjFcIixcbiAgICByeDogXCIuNVwiLFxuICAgIHdpZHRoOiBcIjNcIixcbiAgICB4OiBcIjkuNjZcIixcbiAgICB5OiBcIjdcIlxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJzdHJva2UtY29sb3JcIixcbiAgICBkOiBcIk01LjY2IDEwLjYyQzYuNjk3IDExLjQ4IDguMDMyIDEyIDkuNDg3IDEyYzMuMzE0IDAgNi0yLjY4NiA2LTZzLTIuNjg2LTYtNi02Yy0zLjMxMyAwLTYgMi42ODYtNiA2XCIsXG4gICAgc3Ryb2tlOiBjb2xvcixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIlxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJmaWxsLWNvbG9yXCIsXG4gICAgZDogXCJNNi4zMTcgNWwtMi44MyAyLjgyOEwuNjYgNVwiLFxuICAgIGZpbGw6IGNvbG9yXG4gIH0pKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uQ2xvY2tQYXN0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBY2Nlc3NpYmxlU1ZHIGZyb20gJy4uL2FjY2Vzc2libGUtc3ZnJztcblxudmFyIEljb25Eb3dubG9hZCA9IGZ1bmN0aW9uIEljb25Eb3dubG9hZChfcmVmKSB7XG4gIHZhciBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHZvaWQgMCA/ICcnIDogX3JlZiRjbGFzc05hbWUsXG4gICAgICBfcmVmJGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIGNvbG9yID0gX3JlZiRjb2xvciA9PT0gdm9pZCAwID8gJyM0NDQnIDogX3JlZiRjb2xvcixcbiAgICAgIF9yZWYkaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICBoZWlnaHQgPSBfcmVmJGhlaWdodCA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGhlaWdodCxcbiAgICAgIHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgIF9yZWYkd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgd2lkdGggPSBfcmVmJHdpZHRoID09PSB2b2lkIDAgPyAxMiA6IF9yZWYkd2lkdGg7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEFjY2Vzc2libGVTVkcsIHtcbiAgICBjbGFzc05hbWU6IFwiaWNvbi1kb3dubG9hZCBcIi5jb25jYXQoY2xhc3NOYW1lKSxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB0aXRsZTogdGl0bGUsXG4gICAgdmlld0JveDogXCIwIDAgMTIgMTRcIixcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJzdHJva2UtY29sb3JcIixcbiAgICBkOiBcIk04LjUuOGgtNXY1SDEuMkw2IDEwLjZsNC44LTQuOEg4LjV2LTV6XCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlOiBjb2xvclxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGNsYXNzTmFtZTogXCJzdHJva2UtY29sb3JcIixcbiAgICBkOiBcIk0wIDEzLjNoMTJcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBzdHJva2U6IGNvbG9yXG4gIH0pKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEljb25Eb3dubG9hZDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWNjZXNzaWJsZVNWRyBmcm9tICcuLi9hY2Nlc3NpYmxlLXN2Zyc7XG5cbnZhciBJY29uVXBsb2FkID0gZnVuY3Rpb24gSWNvblVwbG9hZChfcmVmKSB7XG4gIHZhciBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHZvaWQgMCA/ICcnIDogX3JlZiRjbGFzc05hbWUsXG4gICAgICBfcmVmJGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIGNvbG9yID0gX3JlZiRjb2xvciA9PT0gdm9pZCAwID8gJyM0NDQ0NDQnIDogX3JlZiRjb2xvcixcbiAgICAgIF9yZWYkaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICBoZWlnaHQgPSBfcmVmJGhlaWdodCA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGhlaWdodCxcbiAgICAgIHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgIF9yZWYkd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgd2lkdGggPSBfcmVmJHdpZHRoID09PSB2b2lkIDAgPyAxMiA6IF9yZWYkd2lkdGg7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEFjY2Vzc2libGVTVkcsIHtcbiAgICBjbGFzc05hbWU6IFwiaWNvbi11cGxvYWQgXCIuY29uY2F0KGNsYXNzTmFtZSksXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgdGl0bGU6IHRpdGxlLFxuICAgIHZpZXdCb3g6IFwiMCAwIDEyIDE0XCIsXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3Ryb2tlLWNvbG9yXCIsXG4gICAgZDogXCJNMy41IDEwLjRoNXYtNWgyLjNMNiAuNiAxLjIgNS40aDIuM3Y1elwiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHN0cm9rZTogY29sb3JcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3Ryb2tlLWNvbG9yXCIsXG4gICAgZDogXCJNMTIgMTMuNUgwXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlOiBjb2xvclxuICB9KSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uVXBsb2FkOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbi8qKlxuICogXG4gKiBAZmlsZSBWZXJzaW9ucyBJdGVtIEFjdGlvbiBjb21wb25lbnRcbiAqIEBhdXRob3IgQm94XG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQbGFpbkJ1dHRvbiBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3BsYWluLWJ1dHRvbic7XG5pbXBvcnQgJy4vVmVyc2lvbnNJdGVtQWN0aW9uLnNjc3MnO1xuXG52YXIgVmVyc2lvbnNJdGVtQWN0aW9uID0gZnVuY3Rpb24gVmVyc2lvbnNJdGVtQWN0aW9uKF9yZWYpIHtcbiAgdmFyIGFjdGlvbiA9IF9yZWYuYWN0aW9uLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgZmlsZUlkID0gX3JlZi5maWxlSWQsXG4gICAgICBpc0N1cnJlbnQgPSBfcmVmLmlzQ3VycmVudCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiYWN0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJmaWxlSWRcIiwgXCJpc0N1cnJlbnRcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtQWN0aW9uXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChQbGFpbkJ1dHRvbiAvLyBCdXR0b24gZWxlbWVudCBpcyByZXF1aXJlZCB0byB0cmlnZ2VyIHJlc2luIGV2ZW50c1xuICAsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zSXRlbUFjdGlvbi1idXR0b24gbWVudS1pdGVtXCIsXG4gICAgXCJkYXRhLXJlc2luLWlzY3VycmVudFwiOiBpc0N1cnJlbnQsXG4gICAgXCJkYXRhLXJlc2luLWl0ZW1pZFwiOiBmaWxlSWQsXG4gICAgXCJkYXRhLXJlc2luLXRhcmdldFwiOiBhY3Rpb24sXG4gICAgcm9sZTogXCJtZW51aXRlbVwiLFxuICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgfSwgcmVzdCksIGNoaWxkcmVuKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWZXJzaW9uc0l0ZW1BY3Rpb247IiwiLyoqXG4gKiBcbiAqIEBmaWxlIFZlcnNpb25zIEl0ZW0gQWN0aW9ucyBjb21wb25lbnRcbiAqIEBhdXRob3IgQm94XG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBEcm9wZG93bk1lbnUgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9kcm9wZG93bi1tZW51JztcbmltcG9ydCBJY29uQ2xvY2tQYXN0IGZyb20gJy4uLy4uLy4uL2ljb25zL2dlbmVyYWwvSWNvbkNsb2NrUGFzdCc7XG5pbXBvcnQgSWNvbkRvd25sb2FkIGZyb20gJy4uLy4uLy4uL2ljb25zL2dlbmVyYWwvSWNvbkRvd25sb2FkJztcbmltcG9ydCBJY29uRWxsaXBzaXMgZnJvbSAnLi4vLi4vLi4vaWNvbnMvZ2VuZXJhbC9JY29uRWxsaXBzaXMnO1xuaW1wb3J0IEljb25PcGVuV2l0aCBmcm9tICcuLi8uLi8uLi9pY29ucy9nZW5lcmFsL0ljb25PcGVuV2l0aCc7XG5pbXBvcnQgSWNvblRyYXNoIGZyb20gJy4uLy4uLy4uL2ljb25zL2dlbmVyYWwvSWNvblRyYXNoJztcbmltcG9ydCBJY29uVXBsb2FkIGZyb20gJy4uLy4uLy4uL2ljb25zL2dlbmVyYWwvSWNvblVwbG9hZCc7XG5pbXBvcnQgbWVzc2FnZXMgZnJvbSAnLi9tZXNzYWdlcyc7XG5pbXBvcnQgUGxhaW5CdXR0b24gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9wbGFpbi1idXR0b24nO1xuaW1wb3J0IFZlcnNpb25zSXRlbUFjdGlvbiBmcm9tICcuL1ZlcnNpb25zSXRlbUFjdGlvbic7XG5pbXBvcnQgeyBNZW51IH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9tZW51JztcbmltcG9ydCAnLi9WZXJzaW9uc0l0ZW1BY3Rpb25zLnNjc3MnO1xudmFyIElDT05fU0laRSA9IHtcbiAgaGVpZ2h0OiAxMixcbiAgd2lkdGg6IDEyXG59O1xuXG52YXIgaGFuZGxlTWVudUNsb3NlID0gZnVuY3Rpb24gaGFuZGxlTWVudUNsb3NlKGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xufTtcblxudmFyIGhhbmRsZVRvZ2dsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlVG9nZ2xlQ2xpY2soZXZlbnQpIHtcbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59O1xuXG52YXIgVmVyc2lvbnNJdGVtQWN0aW9ucyA9IGZ1bmN0aW9uIFZlcnNpb25zSXRlbUFjdGlvbnMoX3JlZikge1xuICB2YXIgZmlsZUlkID0gX3JlZi5maWxlSWQsXG4gICAgICBfcmVmJGlzQ3VycmVudCA9IF9yZWYuaXNDdXJyZW50LFxuICAgICAgaXNDdXJyZW50ID0gX3JlZiRpc0N1cnJlbnQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpc0N1cnJlbnQsXG4gICAgICBvbkRlbGV0ZSA9IF9yZWYub25EZWxldGUsXG4gICAgICBvbkRvd25sb2FkID0gX3JlZi5vbkRvd25sb2FkLFxuICAgICAgb25QcmV2aWV3ID0gX3JlZi5vblByZXZpZXcsXG4gICAgICBvblByb21vdGUgPSBfcmVmLm9uUHJvbW90ZSxcbiAgICAgIG9uUmVzdG9yZSA9IF9yZWYub25SZXN0b3JlLFxuICAgICAgX3JlZiRzaG93RGVsZXRlID0gX3JlZi5zaG93RGVsZXRlLFxuICAgICAgc2hvd0RlbGV0ZSA9IF9yZWYkc2hvd0RlbGV0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHNob3dEZWxldGUsXG4gICAgICBfcmVmJHNob3dEb3dubG9hZCA9IF9yZWYuc2hvd0Rvd25sb2FkLFxuICAgICAgc2hvd0Rvd25sb2FkID0gX3JlZiRzaG93RG93bmxvYWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzaG93RG93bmxvYWQsXG4gICAgICBfcmVmJHNob3dQcmV2aWV3ID0gX3JlZi5zaG93UHJldmlldyxcbiAgICAgIHNob3dQcmV2aWV3ID0gX3JlZiRzaG93UHJldmlldyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHNob3dQcmV2aWV3LFxuICAgICAgX3JlZiRzaG93UHJvbW90ZSA9IF9yZWYuc2hvd1Byb21vdGUsXG4gICAgICBzaG93UHJvbW90ZSA9IF9yZWYkc2hvd1Byb21vdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzaG93UHJvbW90ZSxcbiAgICAgIF9yZWYkc2hvd1Jlc3RvcmUgPSBfcmVmLnNob3dSZXN0b3JlLFxuICAgICAgc2hvd1Jlc3RvcmUgPSBfcmVmJHNob3dSZXN0b3JlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkc2hvd1Jlc3RvcmU7XG5cbiAgaWYgKCFzaG93RGVsZXRlICYmICFzaG93RG93bmxvYWQgJiYgIXNob3dQcmV2aWV3ICYmICFzaG93UHJvbW90ZSAmJiAhc2hvd1Jlc3RvcmUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duTWVudSwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtQWN0aW9uc1wiLFxuICAgIGNvbnN0cmFpblRvU2Nyb2xsUGFyZW50OiB0cnVlLFxuICAgIGNvbnN0cmFpblRvV2luZG93OiB0cnVlLFxuICAgIGlzUmlnaHRBbGlnbmVkOiB0cnVlLFxuICAgIG9uTWVudUNsb3NlOiBoYW5kbGVNZW51Q2xvc2VcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChQbGFpbkJ1dHRvbiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtQWN0aW9ucy10b2dnbGVcIixcbiAgICBcImRhdGEtcmVzaW4taXNjdXJyZW50XCI6IGlzQ3VycmVudCxcbiAgICBcImRhdGEtcmVzaW4taXRlbWlkXCI6IGZpbGVJZCxcbiAgICBcImRhdGEtcmVzaW4tdGFyZ2V0XCI6IFwib3ZlcmZsb3dcIixcbiAgICBvbkNsaWNrOiBoYW5kbGVUb2dnbGVDbGljayxcbiAgICB0eXBlOiBcImJ1dHRvblwiXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkVsbGlwc2lzLCB7XG4gICAgaGVpZ2h0OiA0LFxuICAgIHdpZHRoOiAxNFxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBtZXNzYWdlcy52ZXJzaW9uQWN0aW9uVG9nZ2xlLCBmdW5jdGlvbiAodGV4dCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiYWNjZXNzaWJpbGl0eS1oaWRkZW5cIlxuICAgIH0sIHRleHQpO1xuICB9KSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtQWN0aW9ucy1tZW51XCIsXG4gICAgXCJkYXRhLXJlc2luLWNvbXBvbmVudFwiOiBcInByZXZpZXdcIiAvLyBOZWVkZWQgZm9yIHJlc2luIGV2ZW50cyBkdWUgdG8gdGV0aGVyIG1vdmluZyBtZW51IHRvIGJvZHlcbiAgICAsXG4gICAgXCJkYXRhLXJlc2luLWZlYXR1cmVcIjogXCJ2ZXJzaW9uc1wiIC8vIE5lZWRlZCBmb3IgcmVzaW4gZXZlbnRzIGR1ZSB0byB0ZXRoZXIgbW92aW5nIG1lbnUgdG8gYm9keVxuXG4gIH0sIHNob3dQcmV2aWV3ICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmVyc2lvbnNJdGVtQWN0aW9uLCB7XG4gICAgYWN0aW9uOiBcInByZXZpZXdcIixcbiAgICBmaWxlSWQ6IGZpbGVJZCxcbiAgICBpc0N1cnJlbnQ6IGlzQ3VycmVudCxcbiAgICBvbkNsaWNrOiBvblByZXZpZXdcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChJY29uT3BlbldpdGgsIElDT05fU0laRSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgbWVzc2FnZXMudmVyc2lvbkFjdGlvblByZXZpZXcpKSwgc2hvd0Rvd25sb2FkICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmVyc2lvbnNJdGVtQWN0aW9uLCB7XG4gICAgYWN0aW9uOiBcImRvd25sb2FkXCIsXG4gICAgZmlsZUlkOiBmaWxlSWQsXG4gICAgaXNDdXJyZW50OiBpc0N1cnJlbnQsXG4gICAgb25DbGljazogb25Eb3dubG9hZFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Eb3dubG9hZCwgSUNPTl9TSVpFKSwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBtZXNzYWdlcy52ZXJzaW9uQWN0aW9uRG93bmxvYWQpKSwgc2hvd1Byb21vdGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChWZXJzaW9uc0l0ZW1BY3Rpb24sIHtcbiAgICBhY3Rpb246IFwicHJvbW90ZVwiLFxuICAgIGZpbGVJZDogZmlsZUlkLFxuICAgIGlzQ3VycmVudDogaXNDdXJyZW50LFxuICAgIG9uQ2xpY2s6IG9uUHJvbW90ZVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25VcGxvYWQsIElDT05fU0laRSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgbWVzc2FnZXMudmVyc2lvbkFjdGlvblByb21vdGUpKSwgc2hvd1Jlc3RvcmUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChWZXJzaW9uc0l0ZW1BY3Rpb24sIHtcbiAgICBhY3Rpb246IFwicmVzdG9yZVwiLFxuICAgIGZpbGVJZDogZmlsZUlkLFxuICAgIGlzQ3VycmVudDogaXNDdXJyZW50LFxuICAgIG9uQ2xpY2s6IG9uUmVzdG9yZVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25DbG9ja1Bhc3QsIHtcbiAgICBoZWlnaHQ6IDE0LFxuICAgIHdpZHRoOiAxNFxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBtZXNzYWdlcy52ZXJzaW9uQWN0aW9uUmVzdG9yZSkpLCBzaG93RGVsZXRlICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmVyc2lvbnNJdGVtQWN0aW9uLCB7XG4gICAgYWN0aW9uOiBcInJlbW92ZVwiLFxuICAgIGZpbGVJZDogZmlsZUlkLFxuICAgIGlzQ3VycmVudDogaXNDdXJyZW50LFxuICAgIG9uQ2xpY2s6IG9uRGVsZXRlXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvblRyYXNoLCBJQ09OX1NJWkUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIG1lc3NhZ2VzLnZlcnNpb25BY3Rpb25EZWxldGUpKSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmVyc2lvbnNJdGVtQWN0aW9uczsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBcbiAqIEBmaWxlIFZlcnNpb25zIEl0ZW0gQnV0dG9uIGNvbXBvbmVudFxuICogQGF1dGhvciBCb3hcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUGxhaW5CdXR0b24gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9wbGFpbi1idXR0b24nO1xuaW1wb3J0IHsgc2Nyb2xsSW50b1ZpZXcgfSBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0ICcuL1ZlcnNpb25zSXRlbUJ1dHRvbi5zY3NzJztcblxudmFyIFZlcnNpb25zSXRlbUJ1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVmVyc2lvbnNJdGVtQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBWZXJzaW9uc0l0ZW1CdXR0b24oKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmVyc2lvbnNJdGVtQnV0dG9uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFZlcnNpb25zSXRlbUJ1dHRvbikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInNldEJ1dHRvblJlZlwiLCBmdW5jdGlvbiAoYnV0dG9uUmVmKSB7XG4gICAgICBfdGhpcy5idXR0b25SZWYgPSBidXR0b25SZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2V0U2Nyb2xsXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpc1NlbGVjdGVkID0gX3RoaXMucHJvcHMuaXNTZWxlY3RlZDtcblxuICAgICAgaWYgKF90aGlzLmJ1dHRvblJlZiAmJiBpc1NlbGVjdGVkKSB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3KF90aGlzLmJ1dHRvblJlZik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmVyc2lvbnNJdGVtQnV0dG9uLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0U2Nyb2xsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoX3JlZikge1xuICAgICAgdmFyIHByZXZJc1NlbGVjdGVkID0gX3JlZi5pc1NlbGVjdGVkO1xuICAgICAgdmFyIGlzU2VsZWN0ZWQgPSB0aGlzLnByb3BzLmlzU2VsZWN0ZWQ7XG5cbiAgICAgIGlmIChpc1NlbGVjdGVkICE9PSBwcmV2SXNTZWxlY3RlZCkge1xuICAgICAgICB0aGlzLnNldFNjcm9sbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGZpbGVJZCA9IF90aGlzJHByb3BzLmZpbGVJZCxcbiAgICAgICAgICBpc0N1cnJlbnQgPSBfdGhpcyRwcm9wcy5pc0N1cnJlbnQsXG4gICAgICAgICAgaXNEaXNhYmxlZCA9IF90aGlzJHByb3BzLmlzRGlzYWJsZWQsXG4gICAgICAgICAgaXNTZWxlY3RlZCA9IF90aGlzJHByb3BzLmlzU2VsZWN0ZWQsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgICB2YXIgYnV0dG9uQ2xhc3NOYW1lID0gY2xhc3NOYW1lcygnYmNzLVZlcnNpb25zSXRlbUJ1dHRvbicsIHtcbiAgICAgICAgJ2Jjcy1pcy1kaXNhYmxlZCc6IGlzRGlzYWJsZWQsXG4gICAgICAgICdiY3MtaXMtc2VsZWN0ZWQnOiBpc1NlbGVjdGVkICYmICFpc0Rpc2FibGVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBsYWluQnV0dG9uLCB7XG4gICAgICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBpc0Rpc2FibGVkLFxuICAgICAgICBjbGFzc05hbWU6IGJ1dHRvbkNsYXNzTmFtZSxcbiAgICAgICAgXCJkYXRhLXJlc2luLWlzY3VycmVudFwiOiBpc0N1cnJlbnQsXG4gICAgICAgIFwiZGF0YS1yZXNpbi1pdGVtaWRcIjogZmlsZUlkLFxuICAgICAgICBcImRhdGEtcmVzaW4tdGFyZ2V0XCI6IFwic2VsZWN0XCIsXG4gICAgICAgIGdldERPTVJlZjogdGhpcy5zZXRCdXR0b25SZWYsXG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmVyc2lvbnNJdGVtQnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoVmVyc2lvbnNJdGVtQnV0dG9uLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGlzQ3VycmVudDogZmFsc2UsXG4gIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICBpc1NlbGVjdGVkOiBmYWxzZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnNpb25zSXRlbUJ1dHRvbjsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG4vKipcbiAqIFxuICogQGZpbGUgVmVyc2lvbnMgSXRlbSBCYWRnZSBjb21wb25lbnRcbiAqIEBhdXRob3IgQm94XG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UsIGluamVjdEludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBtZXNzYWdlcyBmcm9tICcuL21lc3NhZ2VzJztcbmltcG9ydCAnLi9WZXJzaW9uc0l0ZW1CYWRnZS5zY3NzJztcblxudmFyIFZlcnNpb25zSXRlbUJhZGdlID0gZnVuY3Rpb24gVmVyc2lvbnNJdGVtQmFkZ2UoX3JlZikge1xuICB2YXIgaW50bCA9IF9yZWYuaW50bCxcbiAgICAgIHZlcnNpb25OdW1iZXIgPSBfcmVmLnZlcnNpb25OdW1iZXI7XG4gIHZhciBpbnRsVmFsdWVzID0ge1xuICAgIHZlcnNpb25OdW1iZXI6IHZlcnNpb25OdW1iZXJcbiAgfTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIFwiYXJpYS1sYWJlbFwiOiBpbnRsLmZvcm1hdE1lc3NhZ2UobWVzc2FnZXMudmVyc2lvbk51bWJlckxhYmVsLCBpbnRsVmFsdWVzKSxcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zSXRlbUJhZGdlXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBfZXh0ZW5kcyh7fSwgbWVzc2FnZXMudmVyc2lvbk51bWJlckJhZGdlLCB7XG4gICAgdmFsdWVzOiBpbnRsVmFsdWVzXG4gIH0pKSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmplY3RJbnRsKFZlcnNpb25zSXRlbUJhZGdlKTsiLCJ2YXIgX0FDVElPTl9NQVA7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8qKlxuICogXG4gKiBAZmlsZSBWZXJzaW9ucyBJdGVtIGNvbXBvbmVudFxuICogQGF1dGhvciBCb3hcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGdldFByb3AgZnJvbSAnbG9kYXNoL2dldCc7XG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgbWVzc2FnZXMgZnJvbSAnLi9tZXNzYWdlcyc7XG5pbXBvcnQgc2l6ZVV0aWwgZnJvbSAnLi4vLi4vLi4vdXRpbHMvc2l6ZSc7XG5pbXBvcnQgVmVyc2lvbnNJdGVtQWN0aW9ucyBmcm9tICcuL1ZlcnNpb25zSXRlbUFjdGlvbnMnO1xuaW1wb3J0IFZlcnNpb25zSXRlbUJ1dHRvbiBmcm9tICcuL1ZlcnNpb25zSXRlbUJ1dHRvbic7XG5pbXBvcnQgVmVyc2lvbnNJdGVtQmFkZ2UgZnJvbSAnLi9WZXJzaW9uc0l0ZW1CYWRnZSc7XG5pbXBvcnQgeyBSZWFkYWJsZVRpbWUgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3RpbWUnO1xuaW1wb3J0IHsgVkVSU0lPTl9ERUxFVEVfQUNUSU9OLCBWRVJTSU9OX1JFU1RPUkVfQUNUSU9OLCBWRVJTSU9OX1VQTE9BRF9BQ1RJT04gfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMnO1xuaW1wb3J0ICcuL1ZlcnNpb25zSXRlbS5zY3NzJztcbnZhciBBQ1RJT05fTUFQID0gKF9BQ1RJT05fTUFQID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfQUNUSU9OX01BUCwgVkVSU0lPTl9ERUxFVEVfQUNUSU9OLCBtZXNzYWdlcy52ZXJzaW9uRGVsZXRlZEJ5KSwgX2RlZmluZVByb3BlcnR5KF9BQ1RJT05fTUFQLCBWRVJTSU9OX1JFU1RPUkVfQUNUSU9OLCBtZXNzYWdlcy52ZXJzaW9uUmVzdG9yZWRCeSksIF9kZWZpbmVQcm9wZXJ0eShfQUNUSU9OX01BUCwgVkVSU0lPTl9VUExPQURfQUNUSU9OLCBtZXNzYWdlcy52ZXJzaW9uVXBsb2FkZWRCeSksIF9BQ1RJT05fTUFQKTtcbnZhciBGSVZFX01JTlVURVNfTVMgPSA1ICogNjAgKiAxMDAwO1xuXG52YXIgZ2V0QWN0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIGdldEFjdGlvbk1lc3NhZ2UoYWN0aW9uKSB7XG4gIHJldHVybiBBQ1RJT05fTUFQW2FjdGlvbl0gfHwgQUNUSU9OX01BUFtWRVJTSU9OX1VQTE9BRF9BQ1RJT05dO1xufTtcblxudmFyIFZlcnNpb25zSXRlbSA9IGZ1bmN0aW9uIFZlcnNpb25zSXRlbShfcmVmKSB7XG4gIHZhciBmaWxlSWQgPSBfcmVmLmZpbGVJZCxcbiAgICAgIF9yZWYkaXNDdXJyZW50ID0gX3JlZi5pc0N1cnJlbnQsXG4gICAgICBpc0N1cnJlbnQgPSBfcmVmJGlzQ3VycmVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlzQ3VycmVudCxcbiAgICAgIF9yZWYkaXNTZWxlY3RlZCA9IF9yZWYuaXNTZWxlY3RlZCxcbiAgICAgIGlzU2VsZWN0ZWQgPSBfcmVmJGlzU2VsZWN0ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpc1NlbGVjdGVkLFxuICAgICAgX3JlZiRpc1dhdGVybWFya2VkID0gX3JlZi5pc1dhdGVybWFya2VkLFxuICAgICAgaXNXYXRlcm1hcmtlZCA9IF9yZWYkaXNXYXRlcm1hcmtlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlzV2F0ZXJtYXJrZWQsXG4gICAgICBvbkRlbGV0ZSA9IF9yZWYub25EZWxldGUsXG4gICAgICBvbkRvd25sb2FkID0gX3JlZi5vbkRvd25sb2FkLFxuICAgICAgb25QcmV2aWV3ID0gX3JlZi5vblByZXZpZXcsXG4gICAgICBvblByb21vdGUgPSBfcmVmLm9uUHJvbW90ZSxcbiAgICAgIG9uUmVzdG9yZSA9IF9yZWYub25SZXN0b3JlLFxuICAgICAgdmVyc2lvbiA9IF9yZWYudmVyc2lvbixcbiAgICAgIHZlcnNpb25Db3VudCA9IF9yZWYudmVyc2lvbkNvdW50LFxuICAgICAgdmVyc2lvbkxpbWl0ID0gX3JlZi52ZXJzaW9uTGltaXQ7XG4gIHZhciBfdmVyc2lvbiRhY3Rpb24gPSB2ZXJzaW9uLmFjdGlvbixcbiAgICAgIGFjdGlvbiA9IF92ZXJzaW9uJGFjdGlvbiA9PT0gdm9pZCAwID8gVkVSU0lPTl9VUExPQURfQUNUSU9OIDogX3ZlcnNpb24kYWN0aW9uLFxuICAgICAgY3JlYXRlZEF0ID0gdmVyc2lvbi5jcmVhdGVkX2F0LFxuICAgICAgdmVyc2lvbklkID0gdmVyc2lvbi5pZCxcbiAgICAgIGlzX2Rvd25sb2FkX2F2YWlsYWJsZSA9IHZlcnNpb24uaXNfZG93bmxvYWRfYXZhaWxhYmxlLFxuICAgICAgbW9kaWZpZWRCeSA9IHZlcnNpb24ubW9kaWZpZWRfYnksXG4gICAgICBfdmVyc2lvbiRwZXJtaXNzaW9ucyA9IHZlcnNpb24ucGVybWlzc2lvbnMsXG4gICAgICBwZXJtaXNzaW9ucyA9IF92ZXJzaW9uJHBlcm1pc3Npb25zID09PSB2b2lkIDAgPyB7fSA6IF92ZXJzaW9uJHBlcm1pc3Npb25zLFxuICAgICAgc2l6ZSA9IHZlcnNpb24uc2l6ZSxcbiAgICAgIHZlcnNpb25OdW1iZXIgPSB2ZXJzaW9uLnZlcnNpb25fbnVtYmVyO1xuICB2YXIgY2FuX2RlbGV0ZSA9IHBlcm1pc3Npb25zLmNhbl9kZWxldGUsXG4gICAgICBjYW5fZG93bmxvYWQgPSBwZXJtaXNzaW9ucy5jYW5fZG93bmxvYWQsXG4gICAgICBjYW5fcHJldmlldyA9IHBlcm1pc3Npb25zLmNhbl9wcmV2aWV3LFxuICAgICAgY2FuX3VwbG9hZCA9IHBlcm1pc3Npb25zLmNhbl91cGxvYWQ7IC8vIFZlcnNpb24gaW5mbyBoZWxwZXJzXG5cbiAgdmFyIHZlcnNpb25TaXplID0gc2l6ZVV0aWwoc2l6ZSk7XG4gIHZhciB2ZXJzaW9uVGltZXN0YW1wID0gY3JlYXRlZEF0ICYmIG5ldyBEYXRlKGNyZWF0ZWRBdCkuZ2V0VGltZSgpO1xuICB2YXIgdmVyc2lvblVzZXJOYW1lID0gZ2V0UHJvcChtb2RpZmllZEJ5LCAnbmFtZScsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgbWVzc2FnZXMudmVyc2lvblVzZXJVbmtub3duKSk7XG4gIHZhciB2ZXJzaW9uSW50ZWdlciA9IHZlcnNpb25OdW1iZXIgPyBwYXJzZUludCh2ZXJzaW9uTnVtYmVyLCAxMCkgOiAxOyAvLyBWZXJzaW9uIHN0YXRlIGhlbHBlcnNcblxuICB2YXIgaXNEZWxldGVkID0gYWN0aW9uID09PSBWRVJTSU9OX0RFTEVURV9BQ1RJT047XG4gIHZhciBpc0Rvd25sb2FkYWJsZSA9ICEhaXNfZG93bmxvYWRfYXZhaWxhYmxlO1xuICB2YXIgaXNMaW1pdGVkID0gdmVyc2lvbkNvdW50IC0gdmVyc2lvbkludGVnZXIgPj0gdmVyc2lvbkxpbWl0O1xuICB2YXIgaXNSZXN0cmljdGVkID0gaXNXYXRlcm1hcmtlZCAmJiAhaXNDdXJyZW50ICYmICFjYW5fZG93bmxvYWQ7IC8vIFdhdGVybWFya2VkIGZpbGVzIHVzZSBjYW5fZG93bmxvYWQgZm9yIHByZXZpZXdcbiAgLy8gVmVyc2lvbiBhY3Rpb24gaGVscGVyc1xuXG4gIHZhciBjYW5QcmV2aWV3ID0gY2FuX3ByZXZpZXcgJiYgIWlzRGVsZXRlZCAmJiAhaXNMaW1pdGVkICYmICFpc1Jlc3RyaWN0ZWQ7XG4gIHZhciBzaG93RGVsZXRlID0gY2FuX2RlbGV0ZSAmJiAhaXNEZWxldGVkICYmICFpc0N1cnJlbnQ7XG4gIHZhciBzaG93RG93bmxvYWQgPSBjYW5fZG93bmxvYWQgJiYgIWlzRGVsZXRlZCAmJiBpc0Rvd25sb2FkYWJsZTtcbiAgdmFyIHNob3dQcm9tb3RlID0gY2FuX3VwbG9hZCAmJiAhaXNEZWxldGVkICYmICFpc0N1cnJlbnQ7XG4gIHZhciBzaG93UmVzdG9yZSA9IGNhbl9kZWxldGUgJiYgaXNEZWxldGVkO1xuICB2YXIgc2hvd1ByZXZpZXcgPSBjYW5QcmV2aWV3ICYmICFpc1NlbGVjdGVkO1xuICB2YXIgaGFzQWN0aW9ucyA9IHNob3dEZWxldGUgfHwgc2hvd0Rvd25sb2FkIHx8IHNob3dQcmV2aWV3IHx8IHNob3dQcm9tb3RlIHx8IHNob3dSZXN0b3JlOyAvLyBWZXJzaW9uIGFjdGlvbiBjYWxsYmFjayBoZWxwZXJcblxuICB2YXIgaGFuZGxlQWN0aW9uID0gZnVuY3Rpb24gaGFuZGxlQWN0aW9uKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgaGFuZGxlcih2ZXJzaW9uSWQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChWZXJzaW9uc0l0ZW1CdXR0b24sIHtcbiAgICBmaWxlSWQ6IGZpbGVJZCxcbiAgICBpc0N1cnJlbnQ6IGlzQ3VycmVudCxcbiAgICBpc0Rpc2FibGVkOiAhY2FuUHJldmlldyxcbiAgICBpc1NlbGVjdGVkOiBpc1NlbGVjdGVkLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUFjdGlvbihvblByZXZpZXcpXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtLWJhZGdlXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChWZXJzaW9uc0l0ZW1CYWRnZSwge1xuICAgIHZlcnNpb25OdW1iZXI6IHZlcnNpb25OdW1iZXJcbiAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zSXRlbS1kZXRhaWxzXCJcbiAgfSwgaXNDdXJyZW50ICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtLWN1cnJlbnRcIlxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIG1lc3NhZ2VzLnZlcnNpb25DdXJyZW50KSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtLWxvZ1wiLFxuICAgIHRpdGxlOiB2ZXJzaW9uVXNlck5hbWVcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBfZXh0ZW5kcyh7fSwgZ2V0QWN0aW9uTWVzc2FnZShhY3Rpb24pLCB7XG4gICAgdmFsdWVzOiB7XG4gICAgICBuYW1lOiB2ZXJzaW9uVXNlck5hbWVcbiAgICB9XG4gIH0pKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNJdGVtLWluZm9cIlxuICB9LCB2ZXJzaW9uVGltZXN0YW1wICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aW1lXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zSXRlbS1kYXRlXCIsXG4gICAgZGF0ZVRpbWU6IGNyZWF0ZWRBdFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWRhYmxlVGltZSwge1xuICAgIGFsd2F5c1Nob3dUaW1lOiB0cnVlLFxuICAgIHJlbGF0aXZlVGhyZXNob2xkOiBGSVZFX01JTlVURVNfTVMsXG4gICAgdGltZXN0YW1wOiB2ZXJzaW9uVGltZXN0YW1wXG4gIH0pKSwgISFzaXplICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zSXRlbS1zaXplXCJcbiAgfSwgdmVyc2lvblNpemUpKSwgaXNMaW1pdGVkICYmIGhhc0FjdGlvbnMgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcImJjcy1WZXJzaW9uc0l0ZW0tZm9vdGVyXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBfZXh0ZW5kcyh7fSwgbWVzc2FnZXMudmVyc2lvbkxpbWl0RXhjZWVkZWQsIHtcbiAgICB2YWx1ZXM6IHtcbiAgICAgIHZlcnNpb25MaW1pdDogdmVyc2lvbkxpbWl0XG4gICAgfVxuICB9KSkpKSksICFpc0xpbWl0ZWQgJiYgaGFzQWN0aW9ucyAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFZlcnNpb25zSXRlbUFjdGlvbnMsIHtcbiAgICBmaWxlSWQ6IGZpbGVJZCxcbiAgICBpc0N1cnJlbnQ6IGlzQ3VycmVudCxcbiAgICBvbkRlbGV0ZTogaGFuZGxlQWN0aW9uKG9uRGVsZXRlKSxcbiAgICBvbkRvd25sb2FkOiBoYW5kbGVBY3Rpb24ob25Eb3dubG9hZCksXG4gICAgb25QcmV2aWV3OiBoYW5kbGVBY3Rpb24ob25QcmV2aWV3KSxcbiAgICBvblByb21vdGU6IGhhbmRsZUFjdGlvbihvblByb21vdGUpLFxuICAgIG9uUmVzdG9yZTogaGFuZGxlQWN0aW9uKG9uUmVzdG9yZSksXG4gICAgc2hvd0RlbGV0ZTogc2hvd0RlbGV0ZSxcbiAgICBzaG93RG93bmxvYWQ6IHNob3dEb3dubG9hZCxcbiAgICBzaG93UHJldmlldzogc2hvd1ByZXZpZXcsXG4gICAgc2hvd1Byb21vdGU6IHNob3dQcm9tb3RlLFxuICAgIHNob3dSZXN0b3JlOiBzaG93UmVzdG9yZVxuICB9KSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWZXJzaW9uc0l0ZW07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuLyoqXG4gKiBcbiAqIEBmaWxlIFZlcnNpb25zIExpc3QgY29tcG9uZW50XG4gKiBAYXV0aG9yIEJveFxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBWZXJzaW9uc0l0ZW0gZnJvbSAnLi9WZXJzaW9uc0l0ZW0nO1xuaW1wb3J0ICcuL1ZlcnNpb25zTGlzdC5zY3NzJztcblxudmFyIFZlcnNpb25zTGlzdCA9IGZ1bmN0aW9uIFZlcnNpb25zTGlzdChfcmVmKSB7XG4gIHZhciBjdXJyZW50SWQgPSBfcmVmLmN1cnJlbnRJZCxcbiAgICAgIHZlcnNpb25zID0gX3JlZi52ZXJzaW9ucyxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiY3VycmVudElkXCIsIFwidmVyc2lvbnNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnNMaXN0XCJcbiAgfSwgdmVyc2lvbnMubWFwKGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zTGlzdC1pdGVtXCIsXG4gICAgICBrZXk6IHZlcnNpb24uaWRcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihfcmVmMikge1xuICAgICAgICB2YXIgbWF0Y2ggPSBfcmVmMi5tYXRjaDtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmVyc2lvbnNJdGVtLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgaXNDdXJyZW50OiBjdXJyZW50SWQgPT09IHZlcnNpb24uaWQsXG4gICAgICAgICAgaXNTZWxlY3RlZDogbWF0Y2gucGFyYW1zLnZlcnNpb25JZCA9PT0gdmVyc2lvbi5pZCxcbiAgICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uXG4gICAgICAgIH0sIHJlc3QpKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH0pKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnNpb25zTGlzdDsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG4vKipcbiAqIFxuICogQGZpbGUgVmVyc2lvbnMgR3JvdXAgY29tcG9uZW50XG4gKiBAYXV0aG9yIEJveFxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybWF0dGVkRGF0ZSwgRm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi8uLi8uLi91dGlscy9kYXRldGltZSc7XG5pbXBvcnQgbWVzc2FnZXMgZnJvbSAnLi9tZXNzYWdlcyc7XG5pbXBvcnQgVmVyc2lvbnNMaXN0IGZyb20gJy4vVmVyc2lvbnNMaXN0JztcbmltcG9ydCAnLi9WZXJzaW9uc0dyb3VwLnNjc3MnO1xuZXhwb3J0IHZhciBHUk9VUFMgPSB7XG4gIFBSSU9SX01PTlRIOiAnUFJJT1JfTU9OVEgnLFxuICBQUklPUl9XRUVLOiAnUFJJT1JfV0VFSycsXG4gIFBSSU9SX1lFQVI6ICdQUklPUl9ZRUFSJyxcbiAgVEhJU19NT05USDogJ1RISVNfTU9OVEgnLFxuICBUT0RBWTogJ1RPREFZJyxcbiAgV0VFS0RBWTogJ1dFRUtEQVknLFxuICBZRVNURVJEQVk6ICdZRVNURVJEQVknXG59O1xuZXhwb3J0IHZhciBnZXRHcm91cCA9IGZ1bmN0aW9uIGdldEdyb3VwKF9yZWYpIHtcbiAgdmFyIGNyZWF0ZWRBdCA9IF9yZWYuY3JlYXRlZF9hdDtcbiAgdmFyIGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbiAgdmFyIGN1cnJlbnREYXkgPSBjdXJyZW50RGF0ZS5nZXREYXkoKTtcbiAgdmFyIGN1cnJlbnRTdW5kYXkgPSBjdXJyZW50RGF0ZS5nZXREYXRlKCkgLSBjdXJyZW50RGF5O1xuICB2YXIgY3JlYXRlZEF0RGF0ZSA9IHV0aWwuY29udmVydFRvRGF0ZShjcmVhdGVkQXQpO1xuICB2YXIgZ3JvdXA7XG5cbiAgaWYgKHV0aWwuaXNUb2RheShjcmVhdGVkQXREYXRlKSkge1xuICAgIGdyb3VwID0gR1JPVVBTLlRPREFZO1xuICB9IGVsc2UgaWYgKHV0aWwuaXNZZXN0ZXJkYXkoY3JlYXRlZEF0RGF0ZSkpIHtcbiAgICBncm91cCA9IEdST1VQUy5ZRVNURVJEQVk7XG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNDdXJyZW50WWVhcihjcmVhdGVkQXREYXRlKSkge1xuICAgIGdyb3VwID0gR1JPVVBTLlBSSU9SX1lFQVI7XG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNDdXJyZW50TW9udGgoY3JlYXRlZEF0RGF0ZSkpIHtcbiAgICBncm91cCA9IEdST1VQUy5QUklPUl9NT05USDtcbiAgfSBlbHNlIGlmIChjcmVhdGVkQXREYXRlLmdldERhdGUoKSA8PSBjdXJyZW50U3VuZGF5IC0gNykge1xuICAgIGdyb3VwID0gR1JPVVBTLlRISVNfTU9OVEg7XG4gIH0gZWxzZSBpZiAoY3JlYXRlZEF0RGF0ZS5nZXREYXRlKCkgPD0gY3VycmVudFN1bmRheSkge1xuICAgIGdyb3VwID0gR1JPVVBTLlBSSU9SX1dFRUs7XG4gIH0gZWxzZSB7XG4gICAgZ3JvdXAgPSBHUk9VUFMuV0VFS0RBWTtcbiAgfVxuXG4gIHJldHVybiBncm91cDtcbn07XG5leHBvcnQgdmFyIGdldEhlYWRpbmcgPSBmdW5jdGlvbiBnZXRIZWFkaW5nKGRhdGUsIGdyb3VwKSB7XG4gIGlmICghZGF0ZSB8fCAhZ3JvdXApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN3aXRjaCAoZ3JvdXApIHtcbiAgICBjYXNlIEdST1VQUy5UT0RBWTpcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIG1lc3NhZ2VzLnZlcnNpb25zVG9kYXkpO1xuICAgIC8vIFRvZGF5XG5cbiAgICBjYXNlIEdST1VQUy5ZRVNURVJEQVk6XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBtZXNzYWdlcy52ZXJzaW9uc1llc3RlcmRheSk7XG4gICAgLy8gWWVzdGVyZGF5XG5cbiAgICBjYXNlIEdST1VQUy5XRUVLREFZOlxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkRGF0ZSwge1xuICAgICAgICB2YWx1ZTogZGF0ZSxcbiAgICAgICAgd2Vla2RheTogXCJsb25nXCJcbiAgICAgIH0pO1xuICAgIC8vIE1vbmRheVxuXG4gICAgY2FzZSBHUk9VUFMuUFJJT1JfV0VFSzpcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIG1lc3NhZ2VzLnZlcnNpb25zUHJpb3JXZWVrKTtcbiAgICAvLyBMYXN0IFdlZWtcblxuICAgIGNhc2UgR1JPVVBTLlRISVNfTU9OVEg6XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBtZXNzYWdlcy52ZXJzaW9uc1RoaXNNb250aCk7XG4gICAgLy8gVGhpcyBNb250aFxuXG4gICAgY2FzZSBHUk9VUFMuUFJJT1JfTU9OVEg6XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWREYXRlLCB7XG4gICAgICAgIHZhbHVlOiBkYXRlLFxuICAgICAgICBtb250aDogXCJsb25nXCJcbiAgICAgIH0pO1xuICAgIC8vIEphbnVhcnlcblxuICAgIGNhc2UgR1JPVVBTLlBSSU9SX1lFQVI6XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWREYXRlLCB7XG4gICAgICAgIHZhbHVlOiBkYXRlLFxuICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIlxuICAgICAgfSk7XG4gICAgLy8gMjAxOFxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgVmVyc2lvbnNHcm91cCA9IGZ1bmN0aW9uIFZlcnNpb25zR3JvdXAoX3JlZjIpIHtcbiAgdmFyIHZlcnNpb25Hcm91cCA9IF9yZWYyLnZlcnNpb25Hcm91cCxcbiAgICAgIHZlcnNpb25zID0gX3JlZjIudmVyc2lvbnMsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbXCJ2ZXJzaW9uR3JvdXBcIiwgXCJ2ZXJzaW9uc1wiXSk7XG5cbiAgdmFyIGdyb3VwRGF0ZSA9IHZlcnNpb25zWzBdLmNyZWF0ZWRfYXQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcImJjcy1WZXJzaW9uc0dyb3VwXCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImgxXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zR3JvdXAtaGVhZGluZ1wiXG4gIH0sIGdldEhlYWRpbmcoZ3JvdXBEYXRlLCB2ZXJzaW9uR3JvdXApKSwgUmVhY3QuY3JlYXRlRWxlbWVudChWZXJzaW9uc0xpc3QsIF9leHRlbmRzKHtcbiAgICB2ZXJzaW9uczogdmVyc2lvbnNcbiAgfSwgcmVzdCkpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnNpb25zR3JvdXA7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuLyoqXG4gKiBcbiAqIEBmaWxlIFZlcnNpb25zIFNpZGViYXIgY29tcG9uZW50XG4gKiBAYXV0aG9yIEJveFxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IElubGluZUVycm9yIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvaW5saW5lLWVycm9yJztcbmltcG9ydCBtZXNzYWdlcyBmcm9tICcuL21lc3NhZ2VzJztcbmltcG9ydCBtZXNzYWdlc0NvbW1vbiBmcm9tICcuLi8uLi9jb21tb24vbWVzc2FnZXMnO1xuaW1wb3J0IFNpZGViYXJDb250ZW50IGZyb20gJy4uL1NpZGViYXJDb250ZW50JztcbmltcG9ydCBWZXJzaW9uc0dyb3VwLCB7IGdldEdyb3VwIH0gZnJvbSAnLi9WZXJzaW9uc0dyb3VwJztcbmltcG9ydCB7IEJhY2tCdXR0b24gfSBmcm9tICcuLi8uLi9jb21tb24vbmF2LWJ1dHRvbic7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yV3JhcHBlciB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvbG9hZGluZy1pbmRpY2F0b3InO1xuaW1wb3J0ICcuL1ZlcnNpb25zU2lkZWJhci5zY3NzJztcblxudmFyIFZlcnNpb25zU2lkZWJhciA9IGZ1bmN0aW9uIFZlcnNpb25zU2lkZWJhcihfcmVmKSB7XG4gIHZhciBlcnJvciA9IF9yZWYuZXJyb3IsXG4gICAgICBpc0xvYWRpbmcgPSBfcmVmLmlzTG9hZGluZyxcbiAgICAgIGZpbGVJZCA9IF9yZWYuZmlsZUlkLFxuICAgICAgcGFyZW50TmFtZSA9IF9yZWYucGFyZW50TmFtZSxcbiAgICAgIHZlcnNpb25zID0gX3JlZi52ZXJzaW9ucyxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiZXJyb3JcIiwgXCJpc0xvYWRpbmdcIiwgXCJmaWxlSWRcIiwgXCJwYXJlbnROYW1lXCIsIFwidmVyc2lvbnNcIl0pO1xuXG4gIHZhciBfcmVmMiA9IHZlcnNpb25zWzBdIHx8IHt9LFxuICAgICAgY3VycmVudElkID0gX3JlZjIuaWQ7XG5cbiAgdmFyIHNob3dWZXJzaW9ucyA9ICEhdmVyc2lvbnMubGVuZ3RoO1xuICB2YXIgc2hvd0VtcHR5ID0gIWlzTG9hZGluZyAmJiAhc2hvd1ZlcnNpb25zO1xuICB2YXIgdmVyc2lvbkdyb3VwcyA9IHZlcnNpb25zLnJlZHVjZShmdW5jdGlvbiAoZ3JvdXBzLCB2ZXJzaW9uKSB7XG4gICAgdmFyIHZlcnNpb25Hcm91cCA9IGdldEdyb3VwKHZlcnNpb24pO1xuICAgIGdyb3Vwc1t2ZXJzaW9uR3JvdXBdID0gZ3JvdXBzW3ZlcnNpb25Hcm91cF0gfHwgW107XG4gICAgZ3JvdXBzW3ZlcnNpb25Hcm91cF0ucHVzaCh2ZXJzaW9uKTtcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9LCB7fSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNpZGViYXJDb250ZW50LCB7XG4gICAgY2xhc3NOYW1lOiBcImJjcy1WZXJzaW9uc1wiLFxuICAgIFwiZGF0YS1yZXNpbi1jb21wb25lbnRcIjogXCJwcmV2aWV3XCIsXG4gICAgXCJkYXRhLXJlc2luLWZlYXR1cmVcIjogXCJ2ZXJzaW9uc1wiLFxuICAgIHRpdGxlOiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KEJhY2tCdXR0b24sIHtcbiAgICAgIFwiZGF0YS1yZXNpbi10YXJnZXRcIjogXCJiYWNrXCIsXG4gICAgICB0bzogXCIvXCIuY29uY2F0KHBhcmVudE5hbWUpXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybWF0dGVkTWVzc2FnZSwgbWVzc2FnZXMudmVyc2lvbnNUaXRsZSkpXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0luZGljYXRvcldyYXBwZXIsIHtcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zLWNvbnRlbnRcIixcbiAgICBjcmF3bGVyUG9zaXRpb246IFwidG9wXCIsXG4gICAgaXNMb2FkaW5nOiBpc0xvYWRpbmdcbiAgfSwgZXJyb3IgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChJbmxpbmVFcnJvciwge1xuICAgIHRpdGxlOiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1hdHRlZE1lc3NhZ2UsIG1lc3NhZ2VzQ29tbW9uLmVycm9yKVxuICB9LCBlcnJvciksIHNob3dFbXB0eSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zLWVtcHR5XCJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtYXR0ZWRNZXNzYWdlLCBtZXNzYWdlcy52ZXJzaW9uc0VtcHR5KSksIHNob3dWZXJzaW9ucyAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgIGNsYXNzTmFtZTogXCJiY3MtVmVyc2lvbnMtbWVudVwiXG4gIH0sIE9iamVjdC5rZXlzKHZlcnNpb25Hcm91cHMpLm1hcChmdW5jdGlvbiAodmVyc2lvbkdyb3VwS2V5KSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiYmNzLVZlcnNpb25zLW1lbnUtaXRlbVwiLFxuICAgICAga2V5OiB2ZXJzaW9uR3JvdXBLZXlcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFZlcnNpb25zR3JvdXAsIF9leHRlbmRzKHtcbiAgICAgIGN1cnJlbnRJZDogY3VycmVudElkLFxuICAgICAgZmlsZUlkOiBmaWxlSWQsXG4gICAgICB2ZXJzaW9uR3JvdXA6IHZlcnNpb25Hcm91cEtleSxcbiAgICAgIHZlcnNpb25zOiB2ZXJzaW9uR3JvdXBzW3ZlcnNpb25Hcm91cEtleV1cbiAgICB9LCByZXN0KSkpO1xuICB9KSkpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnNpb25zU2lkZWJhcjsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBcbiAqIEBmaWxlIFZlcnNpb25zIFNpZGViYXIgY29udGFpbmVyXG4gKiBAYXV0aG9yIEJveFxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGZsb3cgZnJvbSAnbG9kYXNoL2Zsb3cnO1xuaW1wb3J0IGdldFByb3AgZnJvbSAnbG9kYXNoL2dldCc7XG5pbXBvcnQgbm9vcCBmcm9tICdsb2Rhc2gvbm9vcCc7XG5pbXBvcnQgeyBnZW5lcmF0ZVBhdGgsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBBUEkgZnJvbSAnLi4vLi4vLi4vYXBpJztcbmltcG9ydCBvcGVuVXJsSW5zaWRlSWZyYW1lIGZyb20gJy4uLy4uLy4uL3V0aWxzL2lmcmFtZSc7XG5pbXBvcnQgVmVyc2lvbnNTaWRlYmFyIGZyb20gJy4vVmVyc2lvbnNTaWRlYmFyJztcbmltcG9ydCB7IEZJTEVfVkVSU0lPTl9GSUVMRFNfVE9fRkVUQ0ggfSBmcm9tICcuLi8uLi8uLi91dGlscy9maWVsZHMnO1xuaW1wb3J0IHsgd2l0aEFQSUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb21tb24vYXBpLWNvbnRleHQnO1xuXG52YXIgVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWZXJzaW9uc1NpZGViYXJDb250YWluZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFZlcnNpb25zU2lkZWJhckNvbnRhaW5lcigpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWZXJzaW9uc1NpZGViYXJDb250YWluZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic3RhdGVcIiwge1xuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgaXNXYXRlcm1hcmtlZDogZmFsc2UsXG4gICAgICB2ZXJzaW9uQ291bnQ6IEluZmluaXR5LFxuICAgICAgdmVyc2lvbkxpbWl0OiBJbmZpbml0eSxcbiAgICAgIHZlcnNpb25zOiBbXVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhbmRsZUFjdGlvbkRlbGV0ZVwiLCBmdW5jdGlvbiAodmVyc2lvbklkKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5kZWxldGVWZXJzaW9uKHZlcnNpb25JZCkudGhlbihfdGhpcy5mZXRjaERhdGEpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVEZWxldGVTdWNjZXNzKHZlcnNpb25JZCk7XG4gICAgICAgIH0pLmNhdGNoKF90aGlzLmhhbmRsZUFjdGlvbkVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhbmRsZUFjdGlvbkRvd25sb2FkXCIsIGZ1bmN0aW9uICh2ZXJzaW9uSWQpIHtcbiAgICAgIF90aGlzLmZldGNoRG93bmxvYWRVcmwodmVyc2lvbklkKS50aGVuKG9wZW5VcmxJbnNpZGVJZnJhbWUpLmNhdGNoKF90aGlzLmhhbmRsZUFjdGlvbkVycm9yKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYW5kbGVBY3Rpb25FcnJvclwiLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2U7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZXJyb3I6IG1lc3NhZ2UsXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhbmRsZUFjdGlvblByZXZpZXdcIiwgZnVuY3Rpb24gKHZlcnNpb25JZCkge1xuICAgICAgX3RoaXMudXBkYXRlVmVyc2lvbih2ZXJzaW9uSWQpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhbmRsZUFjdGlvblByb21vdGVcIiwgZnVuY3Rpb24gKHZlcnNpb25JZCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0xvYWRpbmc6IHRydWVcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucHJvbW90ZVZlcnNpb24odmVyc2lvbklkKS50aGVuKF90aGlzLmZldGNoRGF0YSkudGhlbihfdGhpcy5oYW5kbGVQcm9tb3RlU3VjY2VzcykuY2F0Y2goX3RoaXMuaGFuZGxlQWN0aW9uRXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFuZGxlQWN0aW9uUmVzdG9yZVwiLCBmdW5jdGlvbiAodmVyc2lvbklkKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5yZXN0b3JlVmVyc2lvbih2ZXJzaW9uSWQpLnRoZW4oX3RoaXMuZmV0Y2hEYXRhKS5jYXRjaChfdGhpcy5oYW5kbGVBY3Rpb25FcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYW5kbGVEZWxldGVTdWNjZXNzXCIsIGZ1bmN0aW9uICh2ZXJzaW9uSWQpIHtcbiAgICAgIHZhciBzZWxlY3RlZFZlcnNpb25JZCA9IF90aGlzLnByb3BzLnZlcnNpb25JZDsgLy8gQnVtcCB0aGUgdXNlciB0byB0aGUgY3VycmVudCB2ZXJzaW9uIGlmIHRoZXkgZGVsZXRlZCB0aGVpciBzZWxlY3RlZCB2ZXJzaW9uXG5cbiAgICAgIGlmICh2ZXJzaW9uSWQgPT09IHNlbGVjdGVkVmVyc2lvbklkKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZVZlcnNpb25Ub0N1cnJlbnQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJoYW5kbGVGZXRjaEVycm9yXCIsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIG1lc3NhZ2UgPSBfcmVmMi5tZXNzYWdlO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGVycm9yOiBtZXNzYWdlLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBpc1dhdGVybWFya2VkOiBmYWxzZSxcbiAgICAgICAgdmVyc2lvbkNvdW50OiAwLFxuICAgICAgICB2ZXJzaW9uczogW11cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImhhbmRsZUZldGNoU3VjY2Vzc1wiLCBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSxcbiAgICAgICAgICBmaWxlUmVzcG9uc2UgPSBfcmVmNFswXSxcbiAgICAgICAgICB2ZXJzaW9uc1Jlc3BvbnNlID0gX3JlZjRbMV07XG5cbiAgICAgIHZhciBhcGkgPSBfdGhpcy5wcm9wcy5hcGk7XG4gICAgICB2YXIgdmVyc2lvbl9saW1pdCA9IGZpbGVSZXNwb25zZS52ZXJzaW9uX2xpbWl0O1xuICAgICAgdmFyIGlzV2F0ZXJtYXJrZWQgPSBnZXRQcm9wKGZpbGVSZXNwb25zZSwgJ3dhdGVybWFya19pbmZvLmlzX3dhdGVybWFya2VkJywgZmFsc2UpO1xuICAgICAgdmFyIHZlcnNpb25MaW1pdCA9IHZlcnNpb25fbGltaXQgIT09IG51bGwgJiYgdmVyc2lvbl9saW1pdCAhPT0gdW5kZWZpbmVkID8gdmVyc2lvbl9saW1pdCA6IEluZmluaXR5O1xuICAgICAgdmFyIHZlcnNpb25zQXBpID0gYXBpLmdldFZlcnNpb25zQVBJKGZhbHNlKTtcbiAgICAgIHZhciB2ZXJzaW9uc1dpdGhQZXJtaXNzaW9ucyA9IHZlcnNpb25zQXBpLmFkZFBlcm1pc3Npb25zKHZlcnNpb25zUmVzcG9uc2UsIGZpbGVSZXNwb25zZSk7XG5cbiAgICAgIHZhciBfcmVmNSA9IHZlcnNpb25zQXBpLnNvcnRWZXJzaW9ucyh2ZXJzaW9uc1dpdGhQZXJtaXNzaW9ucykgfHwge30sXG4gICAgICAgICAgdmVyc2lvbnMgPSBfcmVmNS5lbnRyaWVzLFxuICAgICAgICAgIHRvdGFsQ291bnQgPSBfcmVmNS50b3RhbF9jb3VudDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBpc1dhdGVybWFya2VkOiBpc1dhdGVybWFya2VkLFxuICAgICAgICB2ZXJzaW9uQ291bnQ6IHRvdGFsQ291bnQsXG4gICAgICAgIHZlcnNpb25MaW1pdDogdmVyc2lvbkxpbWl0LFxuICAgICAgICB2ZXJzaW9uczogdmVyc2lvbnNcbiAgICAgIH0sIF90aGlzLnZlcmlmeVZlcnNpb24pO1xuXG4gICAgICByZXR1cm4gW2ZpbGVSZXNwb25zZSwgdmVyc2lvbnNSZXNwb25zZV07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiaGFuZGxlUHJvbW90ZVN1Y2Nlc3NcIiwgZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICB2YXIgX3JlZjcgPSBfc2xpY2VkVG9BcnJheShfcmVmNiwgMSksXG4gICAgICAgICAgZmlsZSA9IF9yZWY3WzBdO1xuXG4gICAgICB2YXIgZmlsZVZlcnNpb24gPSBmaWxlLmZpbGVfdmVyc2lvbjtcblxuICAgICAgaWYgKGZpbGVWZXJzaW9uKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZVZlcnNpb24oZmlsZVZlcnNpb24uaWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImZldGNoRGF0YVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW190aGlzLmZldGNoRmlsZSgpLCBfdGhpcy5mZXRjaFZlcnNpb25zKCldKS50aGVuKF90aGlzLmZldGNoVmVyc2lvbkN1cnJlbnQpLnRoZW4oX3RoaXMuaGFuZGxlRmV0Y2hTdWNjZXNzKS5jYXRjaChfdGhpcy5oYW5kbGVGZXRjaEVycm9yKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJmZXRjaERvd25sb2FkVXJsXCIsIGZ1bmN0aW9uICh2ZXJzaW9uSWQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFwaSA9IF90aGlzJHByb3BzLmFwaSxcbiAgICAgICAgICBmaWxlSWQgPSBfdGhpcyRwcm9wcy5maWxlSWQ7XG5cbiAgICAgIHZhciB2ZXJzaW9uID0gX3RoaXMuZmluZFZlcnNpb24odmVyc2lvbklkKTtcblxuICAgICAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHJlcXVlc3RlZCB2ZXJzaW9uJykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBhcGkuZ2V0RmlsZUFQSSgpLmdldERvd25sb2FkVXJsKGZpbGVJZCwgdmVyc2lvbiwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImZldGNoRmlsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXBpID0gX3RoaXMkcHJvcHMyLmFwaSxcbiAgICAgICAgICBmaWxlSWQgPSBfdGhpcyRwcm9wczIuZmlsZUlkO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcmV0dXJuIGFwaS5nZXRGaWxlQVBJKCkuZ2V0RmlsZShmaWxlSWQsIHJlc29sdmUsIHJlamVjdCwgX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgZmllbGRzOiBGSUxFX1ZFUlNJT05fRklFTERTX1RPX0ZFVENILFxuICAgICAgICAgIGZvcmNlRmV0Y2g6IHRydWVcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZmV0Y2hWZXJzaW9uc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXBpID0gX3RoaXMkcHJvcHMzLmFwaSxcbiAgICAgICAgICBmaWxlSWQgPSBfdGhpcyRwcm9wczMuZmlsZUlkO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcmV0dXJuIGFwaS5nZXRWZXJzaW9uc0FQSShmYWxzZSkuZ2V0VmVyc2lvbnMoZmlsZUlkLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZmV0Y2hWZXJzaW9uQ3VycmVudFwiLCBmdW5jdGlvbiAoX3JlZjgpIHtcbiAgICAgIHZhciBfcmVmOSA9IF9zbGljZWRUb0FycmF5KF9yZWY4LCAyKSxcbiAgICAgICAgICBmaWxlUmVzcG9uc2UgPSBfcmVmOVswXSxcbiAgICAgICAgICB2ZXJzaW9uc1Jlc3BvbnNlID0gX3JlZjlbMV07XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhcGkgPSBfdGhpcyRwcm9wczQuYXBpLFxuICAgICAgICAgIGZpbGVJZCA9IF90aGlzJHByb3BzNC5maWxlSWQ7XG4gICAgICB2YXIgX2ZpbGVSZXNwb25zZSRmaWxlX3ZlID0gZmlsZVJlc3BvbnNlLmZpbGVfdmVyc2lvbixcbiAgICAgICAgICBmaWxlX3ZlcnNpb24gPSBfZmlsZVJlc3BvbnNlJGZpbGVfdmUgPT09IHZvaWQgMCA/IHt9IDogX2ZpbGVSZXNwb25zZSRmaWxlX3ZlO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcmV0dXJuIGFwaS5nZXRWZXJzaW9uc0FQSShmYWxzZSkuZ2V0Q3VycmVudFZlcnNpb24oZmlsZUlkLCBmaWxlX3ZlcnNpb24uaWQsIGZ1bmN0aW9uIChjdXJyZW50VmVyc2lvblJlc3BvbnNlKSB7XG4gICAgICAgICAgcmVzb2x2ZShbZmlsZVJlc3BvbnNlLCBhcGkuZ2V0VmVyc2lvbnNBUEkoZmFsc2UpLmFkZEN1cnJlbnRWZXJzaW9uKGN1cnJlbnRWZXJzaW9uUmVzcG9uc2UsIHZlcnNpb25zUmVzcG9uc2UsIGZpbGVSZXNwb25zZSldKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImZpbmRWZXJzaW9uXCIsIGZ1bmN0aW9uICh2ZXJzaW9uSWQpIHtcbiAgICAgIHZhciB2ZXJzaW9ucyA9IF90aGlzLnN0YXRlLnZlcnNpb25zO1xuICAgICAgcmV0dXJuIHZlcnNpb25zLmZpbmQoZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb24uaWQgPT09IHZlcnNpb25JZDtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldEN1cnJlbnRWZXJzaW9uSWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZlcnNpb25zID0gX3RoaXMuc3RhdGUudmVyc2lvbnM7XG4gICAgICByZXR1cm4gdmVyc2lvbnNbMF0gPyB2ZXJzaW9uc1swXS5pZCA6IG51bGw7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZGVsZXRlVmVyc2lvblwiLCBmdW5jdGlvbiAodmVyc2lvbklkKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM1ID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYXBpID0gX3RoaXMkcHJvcHM1LmFwaSxcbiAgICAgICAgICBmaWxlSWQgPSBfdGhpcyRwcm9wczUuZmlsZUlkO1xuXG4gICAgICB2YXIgX3JlZjEwID0gX3RoaXMuZmluZFZlcnNpb24odmVyc2lvbklkKSB8fCB7fSxcbiAgICAgICAgICBfcmVmMTAkcGVybWlzc2lvbnMgPSBfcmVmMTAucGVybWlzc2lvbnMsXG4gICAgICAgICAgcGVybWlzc2lvbnMgPSBfcmVmMTAkcGVybWlzc2lvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjEwJHBlcm1pc3Npb25zO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gYXBpLmdldFZlcnNpb25zQVBJKGZhbHNlKS5kZWxldGVWZXJzaW9uKHtcbiAgICAgICAgICBmaWxlSWQ6IGZpbGVJZCxcbiAgICAgICAgICBwZXJtaXNzaW9uczogcGVybWlzc2lvbnMsXG4gICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrOiBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICAgICAgZXJyb3JDYWxsYmFjazogZXJyb3JDYWxsYmFjayxcbiAgICAgICAgICB2ZXJzaW9uSWQ6IHZlcnNpb25JZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInByb21vdGVWZXJzaW9uXCIsIGZ1bmN0aW9uICh2ZXJzaW9uSWQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczYgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhcGkgPSBfdGhpcyRwcm9wczYuYXBpLFxuICAgICAgICAgIGZpbGVJZCA9IF90aGlzJHByb3BzNi5maWxlSWQ7XG5cbiAgICAgIHZhciBfcmVmMTEgPSBfdGhpcy5maW5kVmVyc2lvbih2ZXJzaW9uSWQpIHx8IHt9LFxuICAgICAgICAgIF9yZWYxMSRwZXJtaXNzaW9ucyA9IF9yZWYxMS5wZXJtaXNzaW9ucyxcbiAgICAgICAgICBwZXJtaXNzaW9ucyA9IF9yZWYxMSRwZXJtaXNzaW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMTEkcGVybWlzc2lvbnM7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBhcGkuZ2V0VmVyc2lvbnNBUEkoZmFsc2UpLnByb21vdGVWZXJzaW9uKHtcbiAgICAgICAgICBmaWxlSWQ6IGZpbGVJZCxcbiAgICAgICAgICBwZXJtaXNzaW9uczogcGVybWlzc2lvbnMsXG4gICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrOiBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICAgICAgZXJyb3JDYWxsYmFjazogZXJyb3JDYWxsYmFjayxcbiAgICAgICAgICB2ZXJzaW9uSWQ6IHZlcnNpb25JZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInJlc3RvcmVWZXJzaW9uXCIsIGZ1bmN0aW9uICh2ZXJzaW9uSWQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczcgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhcGkgPSBfdGhpcyRwcm9wczcuYXBpLFxuICAgICAgICAgIGZpbGVJZCA9IF90aGlzJHByb3BzNy5maWxlSWQ7XG5cbiAgICAgIHZhciBfcmVmMTIgPSBfdGhpcy5maW5kVmVyc2lvbih2ZXJzaW9uSWQpIHx8IHt9LFxuICAgICAgICAgIF9yZWYxMiRwZXJtaXNzaW9ucyA9IF9yZWYxMi5wZXJtaXNzaW9ucyxcbiAgICAgICAgICBwZXJtaXNzaW9ucyA9IF9yZWYxMiRwZXJtaXNzaW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMTIkcGVybWlzc2lvbnM7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBhcGkuZ2V0VmVyc2lvbnNBUEkoZmFsc2UpLnJlc3RvcmVWZXJzaW9uKHtcbiAgICAgICAgICBmaWxlSWQ6IGZpbGVJZCxcbiAgICAgICAgICBwZXJtaXNzaW9uczogcGVybWlzc2lvbnMsXG4gICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrOiBzdWNjZXNzQ2FsbGJhY2ssXG4gICAgICAgICAgZXJyb3JDYWxsYmFjazogZXJyb3JDYWxsYmFjayxcbiAgICAgICAgICB2ZXJzaW9uSWQ6IHZlcnNpb25JZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInVwZGF0ZVZlcnNpb25cIiwgZnVuY3Rpb24gKHZlcnNpb25JZCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzOCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGhpc3RvcnkgPSBfdGhpcyRwcm9wczguaGlzdG9yeSxcbiAgICAgICAgICBtYXRjaCA9IF90aGlzJHByb3BzOC5tYXRjaDtcbiAgICAgIHJldHVybiBoaXN0b3J5LnB1c2goZ2VuZXJhdGVQYXRoKG1hdGNoLnBhdGgsIF9vYmplY3RTcHJlYWQoe30sIG1hdGNoLnBhcmFtcywge1xuICAgICAgICB2ZXJzaW9uSWQ6IHZlcnNpb25JZFxuICAgICAgfSkpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJ1cGRhdGVWZXJzaW9uVG9DdXJyZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnVwZGF0ZVZlcnNpb24oX3RoaXMuZ2V0Q3VycmVudFZlcnNpb25JZCgpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJ2ZXJpZnlWZXJzaW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczkgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvblZlcnNpb25DaGFuZ2UgPSBfdGhpcyRwcm9wczkub25WZXJzaW9uQ2hhbmdlLFxuICAgICAgICAgIHZlcnNpb25JZCA9IF90aGlzJHByb3BzOS52ZXJzaW9uSWQ7XG5cbiAgICAgIHZhciBzZWxlY3RlZFZlcnNpb24gPSBfdGhpcy5maW5kVmVyc2lvbih2ZXJzaW9uSWQpO1xuXG4gICAgICBpZiAoc2VsZWN0ZWRWZXJzaW9uKSB7XG4gICAgICAgIG9uVmVyc2lvbkNoYW5nZShzZWxlY3RlZFZlcnNpb24sIHtcbiAgICAgICAgICBjdXJyZW50VmVyc2lvbklkOiBfdGhpcy5nZXRDdXJyZW50VmVyc2lvbklkKCksXG4gICAgICAgICAgdXBkYXRlVmVyc2lvblRvQ3VycmVudDogX3RoaXMudXBkYXRlVmVyc2lvblRvQ3VycmVudFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZVZlcnNpb25Ub0N1cnJlbnQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWZXJzaW9uc1NpZGViYXJDb250YWluZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShfcmVmMTMpIHtcbiAgICAgIHZhciBwcmV2VmVyc2lvbklkID0gX3JlZjEzLnZlcnNpb25JZDtcbiAgICAgIHZhciB2ZXJzaW9uSWQgPSB0aGlzLnByb3BzLnZlcnNpb25JZDtcblxuICAgICAgaWYgKHZlcnNpb25JZCAhPT0gcHJldlZlcnNpb25JZCkge1xuICAgICAgICB0aGlzLnZlcmlmeVZlcnNpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAvLyBSZXNldCB0aGUgY3VycmVudCB2ZXJzaW9uIGlkIHNpbmNlIHRoZSB3cmFwcGluZyByb3V0ZSBpcyBubyBsb25nZXIgYWN0aXZlXG4gICAgICB0aGlzLnByb3BzLm9uVmVyc2lvbkNoYW5nZShudWxsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczEwID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBmaWxlSWQgPSBfdGhpcyRwcm9wczEwLmZpbGVJZCxcbiAgICAgICAgICBwYXJlbnROYW1lID0gX3RoaXMkcHJvcHMxMC5wYXJlbnROYW1lO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmVyc2lvbnNTaWRlYmFyLCBfZXh0ZW5kcyh7XG4gICAgICAgIGZpbGVJZDogZmlsZUlkLFxuICAgICAgICBvbkRlbGV0ZTogdGhpcy5oYW5kbGVBY3Rpb25EZWxldGUsXG4gICAgICAgIG9uRG93bmxvYWQ6IHRoaXMuaGFuZGxlQWN0aW9uRG93bmxvYWQsXG4gICAgICAgIG9uUHJldmlldzogdGhpcy5oYW5kbGVBY3Rpb25QcmV2aWV3LFxuICAgICAgICBvblByb21vdGU6IHRoaXMuaGFuZGxlQWN0aW9uUHJvbW90ZSxcbiAgICAgICAgb25SZXN0b3JlOiB0aGlzLmhhbmRsZUFjdGlvblJlc3RvcmUsXG4gICAgICAgIHBhcmVudE5hbWU6IHBhcmVudE5hbWVcbiAgICAgIH0sIHRoaXMuc3RhdGUpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIG9uVmVyc2lvbkNoYW5nZTogbm9vcCxcbiAgcGFyZW50TmFtZTogJydcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmbG93KFt3aXRoUm91dGVyLCB3aXRoQVBJQ29udGV4dF0pKFZlcnNpb25zU2lkZWJhckNvbnRhaW5lcik7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vVmVyc2lvbnNTaWRlYmFyQ29udGFpbmVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVmVyc2lvbnNTaWRlYmFyQ29tcG9uZW50IH0gZnJvbSAnLi9WZXJzaW9uc1NpZGViYXInOyJdLCJzb3VyY2VSb290IjoiIn0=