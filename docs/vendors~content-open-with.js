(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1120:function(e,t,n){"use strict";var r=n(0),o=n(7);t.a=function(e){var t=e.className,n=void 0===t?"":t,i=e.color,a=void 0===i?"#444444":i,c=e.height,l=void 0===c?12:c,s=e.title,u=e.width,f=void 0===u?12:u;return r.createElement(o.a,{className:"icon-open-with ".concat(n),height:l,title:s,viewBox:"0 0 12 12",width:f},r.createElement("path",{className:"fill-color",d:"M10 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8m0-1H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z",fill:a}),r.createElement("path",{className:"fill-color",d:"M3 3v1h4.29L2.65 8.65l.7.7L8 4.71V9h1V3H3z",fill:a}))}},1159:function(e,t,n){},1160:function(e,t,n){},1161:function(e,t,n){},1219:function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=n(13),l=n.n(c),s=n(5),u=n.n(s),f=n(2),p=n(181),d=n.n(p),h=n(107),m=n(3),b=n(339),y=n(98),g=n(239),v=n(80),E=n(45);var w=function(e){var t=e.integrationWindow,n=e.children,r=t.document.createElement("div");return function(e,t){Array.from(e.styleSheets).forEach(function(e){if(e.href){var n=t.document.createElement("link");n.rel="stylesheet",n.href=e.href,t.document.head.appendChild(n)}}),t.document.body.style.margin=0,t.document.body.style.padding=0}(document,t),t.document.body.appendChild(r),Object(E.createPortal)(n,r)},x=function(e){var t=e.hasError,n=e.integrationWindow;return r.createElement(w,{integrationWindow:n},r.createElement("div",{className:"be bcow bcow-portal-container"},t?r.createElement(g.a,{errorHeader:r.createElement(f.b,m.a.executeIntegrationOpenWithErrorHeader),errorSubHeader:r.createElement(f.b,m.a.executeIntegrationOpenWithErrorSubHeader)}):r.createElement(v.a,{className:"bcow-portal-loading-indicator",size:"large"})))},O=n(88),P=n(89),S=n(36),I=n(1),k=n(7),j=function(e){var t=e.className,n=void 0===t?"":t,o=e.height,i=void 0===o?30:o,a=e.title,c=e.width,l=void 0===c?30:c;return r.createElement(k.a,{className:"icon-adobe-sign ".concat(n),height:i,title:a,viewBox:"0 0 30 30",width:l},r.createElement("path",{d:"M1.27 1.27h27.45v26.67H1.27z",fill:"#260000"}),r.createElement("path",{d:"M0 0v29.23h30V0zm1.45 1.45h27.1v26.31H1.45z",fill:"#ff3601"}),r.createElement("path",{d:"M5.8 11.59v4.01l1.73 2.76 1.72-2.76v-4.01H5.8M5.68 20.4h19.06v1.04H5.68z",fill:"#ff3601"}),r.createElement("path",{d:"M24.78 16a.29.29 0 0 0-.2-.16 8.9 8.9 0 0 0-4.64.45c1.24-1.64 1-1.93.91-2.09s-.38-.22-.72-.08a28.23 28.23 0 0 0-3.07 1.54c1-1.54 1.35-2.55 1.1-2.94a.55.55 0 0 0-.58-.23 7.25 7.25 0 0 0-1.13.29c2.07-3.1 2.72-4.71 2.23-5.54-.23-.38-.7-.54-1.39-.46a8.13 8.13 0 0 0-3.77 1.92 5.38 5.38 0 0 0-2.12 2.84 1.17 1.17 0 0 0 1 1.25.31.31 0 0 0 .25 0 .29.29 0 0 0 .16-.2.29.29 0 0 0 0-.24.29.29 0 0 0-.2-.16c-.49-.15-.54-.38-.53-.57.11-1.3 3.49-3.94 5.32-4.16.4 0 .65 0 .74.16.34.58-.59 2.48-2.77 5.64-2.8 1.29-4.85 3.25-5 4.27a.85.85 0 0 0 .48.92.8.8 0 0 0 .44.11c1.15 0 2.61-2 4.54-4.78a7.77 7.77 0 0 1 1.79-.57 13.36 13.36 0 0 1-1.88 3.33.32.32 0 0 0 0 .42.34.34 0 0 0 .41 0 38.86 38.86 0 0 1 4-2.11 15.55 15.55 0 0 1-1.42 1.94.35.35 0 0 0 0 .41.32.32 0 0 0 .38.11c.58-.23 3.56-1.33 5.29-.82a.31.31 0 0 0 .25 0 .35.35 0 0 0 .16-.2.31.31 0 0 0-.03-.29zm-10.22-1.62c-.93 1.31-2.75 3.83-3.45 3.46-.11-.05-.14-.1-.12-.23.1-.72 1.74-2.19 3.57-3.23z",fill:"#facfcb"}))};function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function z(e,t){return(z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function C(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function W(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var A="icon-google-docs",D=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];return r=this,n=!(o=(e=N(t)).call.apply(e,[this].concat(a)))||"object"!==_(o)&&"function"!=typeof o?C(r):o,W(C(C(n)),"idPrefix","".concat(l()(A),"-")),n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&z(e,t)}(t,r["Component"]),n=t,(o=[{key:"render",value:function(){var e=this.props,t=e.className,n=e.height,o=e.title,i=e.width;return r.createElement(k.a,{className:"".concat(A," ").concat(t),height:n,title:o,viewBox:"0 0 30 30",width:i},r.createElement("defs",null,r.createElement("linearGradient",{gradientTransform:"matrix(2.67 0 0 -2.67 596.67 1357)",gradientUnits:"userSpaceOnUse",id:"".concat(this.idPrefix,"a"),x1:"-215.49",x2:"-215.49",y1:"505.79",y2:"503.19"},r.createElement("stop",{offset:"0",stopColor:"#1a237e",stopOpacity:".2"}),r.createElement("stop",{offset:"1",stopColor:"#1a237e",stopOpacity:".02"}))),r.createElement("path",{d:"M17.64 0H6.05A2.05 2.05 0 0 0 4 2.05V28a2.05 2.05 0 0 0 2.05 2h17.72a2.05 2.05 0 0 0 2.05-2V8.18l-4.77-3.41z",fill:"#4285f4"}),r.createElement("path",{d:"M18.23 7.58l7.59 7.58V8.18l-7.59-.6z",fill:"url(#".concat(this.idPrefix,"a)")}),r.createElement("path",{d:"M9.45 21.82h10.91v-1.37H9.45zm0 2.73h8.19v-1.37H9.45zm0-9.55v1.36h10.91V15zm0 4.09h10.91v-1.36H9.45z",fill:"#f1f1f1"}),r.createElement("path",{d:"M17.64 0v6.14a2 2 0 0 0 2 2h6.14z",fill:"#a1c2fa"}),r.createElement("path",{d:"M6.05 0A2.05 2.05 0 0 0 4 2.05v.17A2.05 2.05 0 0 1 6.05.17h11.59V0z",fill:"#fff",fillOpacity:".2"}),r.createElement("path",{d:"M19.68 8.18a2 2 0 0 1-2-2v.17a2 2 0 0 0 2 2h6.14v-.17z",fill:"#1a237e",fillOpacity:".1"}))}}])&&H(n.prototype,o),i&&H(n,i),t}();W(D,"defaultProps",{className:"",height:30,width:30});var M=D;function T(e){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var G="icon-google-sheets",U=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];return r=this,n=!(o=(e=R(t)).call.apply(e,[this].concat(a)))||"object"!==T(o)&&"function"!=typeof o?F(r):o,L(F(F(n)),"idPrefix","".concat(l()(G),"-")),n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(t,r["Component"]),n=t,(o=[{key:"render",value:function(){var e=this.props,t=e.className,n=e.height,o=e.title,i=e.width;return r.createElement(k.a,{className:"".concat(G," ").concat(t),height:n,title:o,viewBox:"0 0 30 30",width:i},r.createElement("defs",null,r.createElement("linearGradient",{gradientTransform:"matrix(2.67 0 0 -2.67 596.67 1357)",gradientUnits:"userSpaceOnUse",id:"".concat(this.idPrefix,"a"),x1:"-215.49",x2:"-215.49",y1:"505.79",y2:"503.19"},r.createElement("stop",{offset:"0",stopColor:"#208256"}),r.createElement("stop",{offset:".55",stopColor:"#19955a",stopOpacity:".2"}))),r.createElement("path",{d:"M17.64 0H6.05A2.05 2.05 0 0 0 4 2.05V28a2.05 2.05 0 0 0 2.05 2h17.72a2.05 2.05 0 0 0 2.05-2V8.18l-4.77-3.41z",fill:"#22a565"}),r.createElement("path",{d:"M18.23 7.58l7.59 7.58V8.18l-7.59-.6z",fill:"url(#".concat(this.idPrefix,"a)")}),r.createElement("path",{d:"M17.64 0v6.14a2 2 0 0 0 2 2h6.14z",fill:"#8ed1b1"}),r.createElement("path",{d:"M6.05 0A2.05 2.05 0 0 0 4 2.05v.17A2.05 2.05 0 0 1 6.05.17h11.59V0z",fill:"#fff",fillOpacity:".2"}),r.createElement("path",{d:"M19.68 8.18a2 2 0 0 1-2-2v.17a2 2 0 0 0 2 2h6.14v-.17z",fill:"#1a237e",fillOpacity:".1"}),r.createElement("path",{d:"M10 14v10h10V14zm1 1h3.5v2H11zm0 3h3.5v2H11zm0 5v-2h3.5v2zm8 0h-3.5v-2H19zm0-3h-3.5v-2H19zm0-3h-3.5v-2H19z",fill:"#f1f1f1"}))}}])&&B(n.prototype,o),i&&B(n,i),t}();L(U,"defaultProps",{className:"",height:30,width:30});var q=U;function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e){return(Y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $="icon-google-slides",ee=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];return r=this,n=!(o=(e=Y(t)).call.apply(e,[this].concat(a)))||"object"!==J(o)&&"function"!=typeof o?Q(r):o,Z(Q(Q(n)),"idPrefix","".concat(l()($),"-")),n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(t,r["Component"]),n=t,(o=[{key:"render",value:function(){var e=this.props,t=e.className,n=e.height,o=e.title,i=e.width;return r.createElement(k.a,{className:"".concat($," ").concat(t),height:n,title:o,viewBox:"0 0 30 30",width:i},r.createElement("defs",null,r.createElement("linearGradient",{gradientTransform:"matrix(2.67 0 0 -2.67 596.67 1357)",gradientUnits:"userSpaceOnUse",id:"".concat(this.idPrefix,"a"),x1:"-215.49",x2:"-215.49",y1:"505.79",y2:"503.19"},r.createElement("stop",{offset:"0",stopColor:"#d08714",stopOpacity:".88"}),r.createElement("stop",{offset:".55",stopColor:"#cf8714",stopOpacity:".2"}))),r.createElement("path",{d:"M17.64 0H6.05A2.05 2.05 0 0 0 4 2.05V28a2.05 2.05 0 0 0 2.05 2h17.72a2.05 2.05 0 0 0 2.05-2V8.18l-4.77-3.41z",fill:"#f4b912"}),r.createElement("path",{d:"M18.23 7.58l7.59 7.58V8.18l-7.59-.6z",fill:"url(#".concat(this.idPrefix,"a)")}),r.createElement("path",{d:"M17.64 0v6.14a2 2 0 0 0 2 2h6.14z",fill:"#fadc87"}),r.createElement("path",{d:"M6.05 0A2.05 2.05 0 0 0 4 2.05v.17A2.05 2.05 0 0 1 6.05.17h11.59V0z",fill:"#fff",fillOpacity:".2"}),r.createElement("path",{d:"M19.68 8.18a2 2 0 0 1-2-2v.17a2 2 0 0 0 2 2h6.14v-.17z",fill:"#1a237e",fillOpacity:".1"}),r.createElement("path",{d:"M10 15v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1h-8a1 1 0 0 0-1 1zm9 6h-8v-4h8z",fill:"#f1f1f1"}))}}])&&X(n.prototype,o),i&&X(n,i),t}();Z(ee,"defaultProps",{className:"",height:30,width:30});var te=ee,ne=n(152),re={"Adobe Sign":j,"Google Docs":M,"Google Docs (beta)":M,"Google Sheets":q,"Google Sheets (beta)":q,"Google Slides":te,"Google Slides (beta)":te};var oe=function(e){return re[e]||ne.a},ie=n(9),ae=n.n(ie);n(1159);function ce(){return(ce=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var le=function(e){var t=e.boxToolsName,n=void 0===t?"Box Tools":t,o=e.boxToolsInstallUrl,i=void 0===o?"https://cloud.box.com/v/installboxtools":o;return r.createElement(f.b,ce({},m.a.boxToolsInstallMessage,{values:{boxTools:r.createElement("a",{href:"#",onClick:function(){window.open(i)},rel:"noopener noreferrer"},n)}}))},se=function(e){return ae()(e,"disabledReasons.0.type")===le},ue=(n(1160),function(e){var t=e.integration,n=e.onClick,o=t.displayName,i=t.displayDescription,c=t.isDisabled,l=t.extension,s=t.disabledReasons,u=oe(o),p=s[0]||r.createElement(f.b,m.a.errorOpenWithDescription),d=c?p:i,h=a()({"bcow-box-tools-uninstalled":se(t)});return r.createElement(S.a,{className:h,isDisabled:c,onClick:function(){return n(t)}},r.createElement(u,{dimension:I.Gd,extension:l,height:I.Gd,width:I.Gd}),r.createElement("span",null,r.createElement("p",{className:"bcow-menu-item-title"},o),r.createElement("p",{className:"bcow-menu-item-description"},d)))}),fe=n(341),pe=n(1120),de=n(31),he=n(130),me=function(e){var t=e.children;return r.createElement(r.Fragment,null,t,r.createElement("span",{className:"bcow-btn-header-text"},r.createElement(f.b,m.a.open)))},be=function(e){return r.createElement(he.a,{position:"middle-left",text:r.createElement(f.b,m.a.defaultOpenWithDescription)},r.createElement(de.a,e,r.createElement(fe.a,null,r.createElement(me,null,r.createElement(pe.a,{className:I.n,dimension:I.Fd,height:I.Fd,width:I.Fd})))))},ye=function(e){var t=e.dropdownAlignment,n=void 0===t?"right":t,o=e.integrations,i=e.onClick;return r.createElement(O.a,{isRightAligned:"right"===n},r.createElement(be,null),r.createElement(P.a,{className:"bcow-menu"},o.map(function(e){return r.createElement(ue,{key:e.appIntegrationId,integration:e,onClick:i})})))};function ge(){return(ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ve(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Ee=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];if(t)return null;var i=r.createElement(f.b,m.a.emptyOpenWithDescription);o.length>0?i=ve(o,1)[0]:n?i=r.createElement(f.b,m.a.errorOpenWithDescription):e&&(i=e);return i},we=function(e){var t=e.error,n=e.onClick,o=void 0===n?u.a:n,i=e.displayIntegration,a=e.isLoading,c=i||{},l=c.displayName,s=c.isDisabled,f=c.extension,p=c.disabledReasons,d=c.displayDescription,h=!!s||!l,m=l?oe(l):pe.a,b=se(i)?{isShown:!0,showCloseButton:!0}:{};return r.createElement(he.a,ge({className:"bcow-tooltip",position:"bottom-center",text:Ee(d,a,t,p)},b),r.createElement(de.a,{isDisabled:h,onClick:function(){return i?o(i):u.a}},r.createElement(me,null,r.createElement(m,{className:I.n,dimension:I.Fd,extension:f,height:I.Fd,width:I.Fd}))))},xe=function(e){var t=e.error;return r.createElement("div",{className:"be bcow"},r.createElement(we,{error:t,isLoading:!1}))};function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Se(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ie(e){return(Ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ke(e,t){return(ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var je=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Se(this,Ie(t).call(this,e))).ref=o.a.createRef(),n}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ke(e,t)}(t,r["PureComponent"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this.props.onSubmit;this.ref.current.submit(),e()}},{key:"render",value:function(){var e=this.props,t=e.executePostData,n=t.url,r=t.params,i=e.id,a=e.windowName;return o.a.createElement("form",{ref:this.ref,action:n,id:"bcow-execute-form-".concat(i),method:I.hd,rel:"noreferrer noopener",target:a||"_blank"},r&&r.map(function(e){var t=e.key,n=e.value;return o.a.createElement("input",{key:t,name:t,type:"hidden",value:n})}))}}])&&Pe(n.prototype,i),a&&Pe(n,a),t}();n(256),n(1161);function _e(e){return(_e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function He(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){De(e,t,n[t])})}return e}function Ne(e,t,n,r,o,i,a){try{var c=e[i](a),l=c.value}catch(e){return void n(e)}c.done?t(l):Promise.resolve(l).then(r,o)}function ze(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function We(e,t){return(We=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ae(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function De(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Me="Integration invocation using this HTTP method type is not supported",Te="boxToolsBlacklistedError",Be="boxToolsInstallErrorMessage",Re="executeIntegrationOpenWithErrorHeader",Ve="auth_code",Fe=function(e){function t(e){var n,r,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,i=Ce(t).call(this,e),n=!i||"object"!==_e(i)&&"function"!=typeof i?Ae(r):i,De(Ae(Ae(n)),"initialState",{isDropdownOpen:!1,integrations:null,isLoading:!0,fetchError:null,executePostData:null,shouldRenderErrorIntegrationPortal:!1,shouldRenderLoadingIntegrationPortal:!1}),De(Ae(Ae(n)),"fetchOpenWithSuccessHandler",function(){var e,t=(e=regeneratorRuntime.mark(function e(t){var r,i,a,c,l,s,u,p;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.props,i=r.boxToolsName,a=r.boxToolsInstallUrl,!(c=t.find(function(e){var t=e.appIntegrationId;return n.isBoxEditIntegration(t)}))||c.isDisabled){e.next=22;break}return e.prev=3,e.next=6,n.getIntegrationFileExtension();case 6:return l=e.sent,s=l.extension,c.extension=s,e.next=11,n.isBoxEditAvailable();case 11:return e.next=13,n.canOpenExtensionWithBoxEdit(c);case 13:e.next=22;break;case 15:e.prev=15,e.t0=e.catch(3),u=m.a[e.t0.message]||m.a[Re],p=o.a.createElement(f.b,u),e.t0.message===Be&&(p=o.a.createElement(le,{boxToolsInstallUrl:a,boxToolsName:i})),c.disabledReasons.push(p),c.isDisabled=!0;case 22:n.setState({integrations:t,isLoading:!1});case 23:case"end":return e.stop()}},e,this,[[3,15]])}),function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){Ne(i,r,o,a,c,"next",e)}function c(e){Ne(i,r,o,a,c,"throw",e)}a(void 0)})});return function(e){return t.apply(this,arguments)}}()),De(Ae(Ae(n)),"getIntegrationFileExtension",function(){var e=n.props.fileId;return new Promise(function(t,r){n.api.getFileAPI().getFileExtension(e,t,function(){return r(new Error(Re))})})}),De(Ae(Ae(n)),"isBoxEditAvailable",function(){return n.api.getBoxEditAPI().checkBoxEditAvailability().catch(function(){throw new Error(Be)})}),De(Ae(Ae(n)),"canOpenExtensionWithBoxEdit",function(e){var t=e.extension,r=void 0===t?"":t;return n.api.getBoxEditAPI().getAppForExtension(r).catch(function(){throw new Error(Te)})}),De(Ae(Ae(n)),"fetchErrorHandler",function(e,t){n.props.onError(e,t,{error:e}),n.setState({fetchError:e,isLoading:!1})}),De(Ae(Ae(n)),"onIntegrationClick",function(e){var t=e.appIntegrationId,r=e.displayName,o=n.props.fileId,i=n.isBoxEditIntegration(t);if(n.api.getAppIntegrationsAPI(!1).execute(t,o,n.executeIntegrationSuccessHandler.bind(Ae(Ae(n)),t),i?n.executeBoxEditErrorHandler:n.executeIntegrationErrorHandler),!i){var a="left=".concat(window.screenX,",top=").concat(window.screenY,",height=").concat(window.outerHeight,",width=").concat(window.innerWidth,",toolbar=0");n.integrationWindow=n.window.open("","".concat(l()(t)),a),n.integrationWindow.document.title=r,n.integrationWindow.onunload=n.cleanupIntegrationWindow,n.setState({shouldRenderLoadingIntegrationPortal:!0,shouldRenderErrorIntegrationPortal:!1})}}),De(Ae(Ae(n)),"cleanupIntegrationWindow",function(){n.setState({shouldRenderLoadingIntegrationPortal:!1,shouldRenderErrorIntegrationPortal:!1})}),De(Ae(Ae(n)),"executeIntegrationSuccessHandler",function(e,t){n.isBoxEditIntegration(e)?n.executeBoxEditSuccessHandler(e,t):n.executeOnlineIntegrationSuccessHandler(t),n.onExecute(e)}),De(Ae(Ae(n)),"executeOnlineIntegrationSuccessHandler",function(e){var t=e.method,r=e.url;switch(t){case I.hd:n.setState({executePostData:e});break;case I.ed:if(!n.integrationWindow)return;n.integrationWindow.location=r,n.integrationWindow.opener=null;break;default:n.executeIntegrationErrorHandler(Error(Me),I.ob)}n.integrationWindow=null}),De(Ae(Ae(n)),"executeBoxEditSuccessHandler",function(e,t){var r=t.url,o=n.props,i=o.fileId,a=o.token,c=o.onError,l=d.a.parse(r)[Ve],s=n.isBoxEditSFCIntegration(e);n.api.getBoxEditAPI().openFile(i,{data:{auth_code:l,token:a,token_scope:s?I.Se:I.Te}}).catch(function(e){c(e,I.ob,{error:e})})}),De(Ae(Ae(n)),"onExecuteFormSubmit",function(){n.setState({executePostData:null})}),De(Ae(Ae(n)),"executeIntegrationErrorHandler",function(e,t){n.props.onError(e,t,{error:e}),console.error(e),n.setState({shouldRenderLoadingIntegrationPortal:!1,shouldRenderErrorIntegrationPortal:!0})}),De(Ae(Ae(n)),"executeBoxEditErrorHandler",function(e){n.props.onError(e),console.error(e)});var a=e.token,c=e.apiHost,s=e.clientName,u=e.requestInterceptor,p=e.responseInterceptor;return n.id=l()("bcow_"),n.api=new y.a({token:a,apiHost:c,clientName:s,requestInterceptor:u,responseInterceptor:p}),n.state=He({},n.initialState),n}var n,i,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&We(e,t)}(t,r["PureComponent"]),n=t,(i=[{key:"clearCache",value:function(){this.api.destroy(!0)}},{key:"componentWillUnmount",value:function(){this.api.destroy(!1)}},{key:"componentDidMount",value:function(){this.props.fileId&&(this.window=window,this.fetchOpenWithData())}},{key:"componentDidUpdate",value:function(e){var t=this.props.fileId,n=e.fileId;t&&t!==n&&(this.setState(He({},this.initialState)),this.fetchOpenWithData())}},{key:"isBoxEditIntegration",value:function(e){return e===I.f||this.isBoxEditSFCIntegration(e)}},{key:"isBoxEditSFCIntegration",value:function(e){return e===I.g}},{key:"fetchOpenWithData",value:function(){var e=this.props,t=e.fileId,n=e.language;this.api.getOpenWithAPI(!1).getOpenWithIntegrations(t,this.fetchOpenWithSuccessHandler,this.fetchErrorHandler,n)}},{key:"componentWillReceiveProps",value:function(){}},{key:"onExecute",value:function(e){this.props.onExecute(e),this.setState({shouldRenderLoadingIntegrationPortal:!1})}},{key:"getDisplayIntegration",value:function(){var e=this.state.integrations;return Array.isArray(e)&&1===e.length?e[0]:null}},{key:"render",value:function(){var e=this.props,t=e.language,n=e.messages,r=e.dropdownAlignment,i=this.state,c=i.fetchError,l=i.isLoading,s=i.integrations,u=i.executePostData,f=i.shouldRenderLoadingIntegrationPortal,p=i.shouldRenderErrorIntegrationPortal,d=a()("be bcow",this.props.className),m=this.getDisplayIntegration(),b=s?s.length:0;return o.a.createElement(h.a,{language:t,messages:n},o.a.createElement("div",{className:d,id:this.id},b<=1?o.a.createElement(we,{displayIntegration:m,error:c,isLoading:l,onClick:this.onIntegrationClick}):o.a.createElement(ye,{dropdownAlignment:r,integrations:s,onClick:this.onIntegrationClick}),(f||p)&&o.a.createElement(x,{hasError:p,integrationWindow:this.integrationWindow}),u&&o.a.createElement(je,{executePostData:u,id:this.id,onSubmit:this.onExecuteFormSubmit,windowName:this.integrationWindow&&this.integrationWindow.name})))}}])&&ze(n.prototype,i),c&&ze(n,c),t}();De(Fe,"defaultProps",{apiHost:I.I,className:"",clientName:I.A,onExecute:u.a,onError:u.a});var Le=Object(b.a)(I.Md,xe)(Fe);n.d(t,"default",function(){return Le})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,