(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1117:function(e,t,n){"use strict";var a=n(0),i=n(6),r=n.n(i),o=n(351),s=n(108),l=n(137),c=n(25);n(1138);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var f=function(e){var t=e.className,n=void 0===t?"":t,i=e.description,f=e.error,p=e.errorPosition,h=e.hideLabel,m=e.hideOptionalLabel,b=e.inputRef,g=e.isLoading,v=e.isRequired,y=e.isValid,E=e.label,w=e.labelTooltip,S=d(e,["className","description","error","errorPosition","hideLabel","hideOptionalLabel","inputRef","isLoading","isRequired","isValid","label","labelTooltip"]),O=r()(n,"text-input-container",{"show-error":!!f});return a.createElement("div",{className:O},a.createElement(s.a,{hideLabel:h,showOptionalText:!m&&!v,text:E,tooltip:w},!!i&&a.createElement("i",{className:"text-input-description"},i),a.createElement(c.a,{isShown:!!f,position:p||"middle-right",text:f||"",theme:"error"},a.createElement("input",u({ref:b,required:v},S))),g&&!y&&a.createElement(l.b,{className:"text-input-loading"}),y&&!g&&a.createElement(o.a,{className:"text-input-verified"})))};f.displayName="TextInput",t.a=f},1121:function(e,t,n){"use strict";var a=n(0),i=n(6),r=n.n(i),o=n(23),s=n.n(o),l=n(1136),c=n.n(l),u=n(46),d=n(225),f=n(22),p=n(15);n(1137);function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function b(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var w=function(e){function t(e){var n,a,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,i=g(t).call(this,e),n=!i||"object"!==h(i)&&"function"!=typeof i?y(a):i,E(y(y(n)),"toggleVisibility",function(){var e=n.props,t=e.onOpen,a=e.onClose;n.setState(function(e){return{isOpen:!e.isOpen}},function(){var e=n.state.isOpen;e&&t?t(y(y(n))):!e&&a&&a(y(y(n)))})}),n.state={isOpen:e.isOpen},n}var n,i,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,a["Component"]),n=t,(i=[{key:"render",value:function(){var e=this.state.isOpen,t=this.props,n=t.animationDuration,i=t.buttonProps,o=void 0===i?{}:i,l=t.children,h=t.className,b=t.isBordered,g=t.hasStickyHeader,v=t.headerActionItems,y=t.title,E=r()("collapsible-card",{"is-open":e},{"is-bordered":b},h),w=o[u.b],S=s()(o,[u.b]),O=g?"collapsible-card-header has-sticky-header":"collapsible-card-header";return w&&(S[u.b]="".concat(w).concat(e?"collapse":"expand")),a.createElement("div",{className:E},a.createElement("div",{className:O},a.createElement(f.a,m({},S,{className:"collapsible-card-title",onClick:this.toggleVisibility,type:"button"}),y,a.createElement(d.a,{className:"collapsible-card-header-caret",color:p.s,width:8})),e&&v),a.createElement(c.a,{duration:n,height:e?"auto":0},a.createElement("div",{className:"collapsible-card-content"},l)))}}])&&b(n.prototype,i),o&&b(n,o),t}();E(w,"defaultProps",{buttonProps:{},className:"",isOpen:!0,animationDuration:100}),t.a=w},1123:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(11),o=n.n(r);function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e};"object"==typeof Reflect&&Reflect.construct;var c="undefined"!=typeof window&&"undefined"!=typeof document,u=!!c&&!!document.documentElement.currentStyle,d={"min-height":"0","max-height":"none",height:"0",visibility:"hidden",overflow:"hidden",position:"absolute","z-index":"-1000",top:"0",right:"0"},f=["letter-spacing","line-height","font-family","font-weight","font-size","font-style","tab-size","text-rendering","text-transform","width","text-indent","padding-top","padding-right","padding-bottom","padding-left","border-top-width","border-right-width","border-bottom-width","border-left-width","box-sizing"],p={},h=c&&document.createElement("textarea"),m=function(e){Object.keys(d).forEach(function(t){e.style.setProperty(t,d[t],"important")})};function b(e,t,n,a,i){void 0===n&&(n=!1),void 0===a&&(a=null),void 0===i&&(i=null),null===h.parentNode&&document.body.appendChild(h);var r=function(e,t,n){void 0===n&&(n=!1);if(n&&p[t])return p[t];var a=window.getComputedStyle(e);if(null===a)return null;var i=f.reduce(function(e,t){return e[t]=a.getPropertyValue(t),e},{}),r=i["box-sizing"];if(""===r)return null;u&&"border-box"===r&&(i.width=parseFloat(i.width)+parseFloat(a["border-right-width"])+parseFloat(a["border-left-width"])+parseFloat(a["padding-right"])+parseFloat(a["padding-left"])+"px");var o=parseFloat(i["padding-bottom"])+parseFloat(i["padding-top"]),s=parseFloat(i["border-bottom-width"])+parseFloat(i["border-top-width"]),l={sizingStyle:i,paddingSize:o,borderSize:s,boxSizing:r};n&&(p[t]=l);return l}(e,t,n);if(null===r)return null;var o=r.paddingSize,s=r.borderSize,l=r.boxSizing,c=r.sizingStyle;Object.keys(c).forEach(function(e){h.style[e]=c[e]}),m(h),h.value=e.value||e.placeholder||"x";var d=-1/0,b=1/0,g=h.scrollHeight;"border-box"===l?g+=s:"content-box"===l&&(g-=o),h.value="x";var v=h.scrollHeight-o;return null===a&&null===i||(null!==a&&(d=v*a,"border-box"===l&&(d=d+o+s),g=Math.max(d,g)),null!==i&&(b=v*i,"border-box"===l&&(b=b+o+s),g=Math.min(b,g))),{height:g,minHeight:d,maxHeight:b,rowCount:Math.floor(g/v)}}c&&m(h);var g,v=(void 0===g&&(g=0),function(){return++g}),y=function(){},E=c&&window.requestAnimationFrame?[window.requestAnimationFrame,window.cancelAnimationFrame]:[setTimeout,clearTimeout],w=E[0],S=E[1],O=function(e){var t,n;function a(t){var n;return(n=e.call(this,t)||this)._resizeLock=!1,n._onRootDOMNode=function(e){n._rootDOMNode=e,n.props.inputRef(e)},n._onChange=function(e){n._controlled||n._resizeComponent(),n.props.onChange(e)},n._resizeComponent=function(e){if(void 0===e&&(e=y),void 0!==n._rootDOMNode){var t=b(n._rootDOMNode,n._uid,n.props.useCacheForDOMMeasurements,n.props.minRows,n.props.maxRows);if(null!==t){var a=t.height,i=t.minHeight,r=t.maxHeight,o=t.rowCount;n.rowCount=o,n.state.height===a&&n.state.minHeight===i&&n.state.maxHeight===r?e():n.setState({height:a,minHeight:i,maxHeight:r},e)}else e()}else e()},n.state={height:t.style&&t.style.height||0,minHeight:-1/0,maxHeight:1/0},n._uid=v(),n._controlled="string"==typeof t.value,n}n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var r=a.prototype;return r.render=function(){var e=this.props,t=(e.inputRef,e.maxRows,e.minRows,e.onHeightChange,e.useCacheForDOMMeasurements,function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(e,["inputRef","maxRows","minRows","onHeightChange","useCacheForDOMMeasurements"]));return t.style=s({},t.style,{height:this.state.height}),Math.max(t.style.maxHeight||1/0,this.state.maxHeight)<this.state.height&&(t.style.overflow="hidden"),i.a.createElement("textarea",s({},t,{onChange:this._onChange,ref:this._onRootDOMNode}))},r.componentDidMount=function(){var e=this;this._resizeComponent(),this._resizeListener=function(){e._resizeLock||(e._resizeLock=!0,e._resizeComponent(function(){return e._resizeLock=!1}))},window.addEventListener("resize",this._resizeListener)},r.componentDidUpdate=function(e,t){var n=this;e!==this.props&&(this._clearNextFrame(),this._onNextFrameActionId=w(function(){return n._resizeComponent()})),this.state.height!==t.height&&this.props.onHeightChange(this.state.height,this)},r.componentWillUnmount=function(){var e;this._clearNextFrame(),window.removeEventListener("resize",this._resizeListener),e=this._uid,delete p[e]},r._clearNextFrame=function(){S(this._onNextFrameActionId)},a}(i.a.Component);O.propTypes={inputRef:o.a.func,maxRows:o.a.number,minRows:o.a.number,onChange:o.a.func,onHeightChange:o.a.func,useCacheForDOMMeasurements:o.a.bool,value:o.a.string},O.defaultProps={inputRef:y,onChange:y,onHeightChange:y,useCacheForDOMMeasurements:!1},t.a=O},1136:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=l(n(0)),o=l(n(11)),s=l(n(6));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u={animating:"rah-animating",animatingUp:"rah-animating--up",animatingDown:"rah-animating--down",animatingToHeightZero:"rah-animating--to-height-zero",animatingToHeightAuto:"rah-animating--to-height-auto",animatingToHeightSpecific:"rah-animating--to-height-specific",static:"rah-static",staticHeightZero:"rah-static--height-zero",staticHeightAuto:"rah-static--height-auto",staticHeightSpecific:"rah-static--height-specific"},d=["animateOpacity","animationStateClasses","applyInlineTransitions","children","contentClassName","delay","duration","easing","height","onAnimationEnd","onAnimationStart"];function f(e){return!isNaN(parseFloat(e))&&isFinite(e)}function p(e){return"string"==typeof e&&e.search("%")===e.length-1&&f(e.substr(0,e.length-1))}function h(e,t){e&&"function"==typeof e&&e(t)}var m=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),i="auto",r="visible";f(e.height)?(i=e.height<0?0:e.height,r="hidden"):p(e.height)&&(i=e.height,r="hidden"),n.animationStateClasses=a({},u,e.animationStateClasses);var o=n.getStaticStateClasses(i);return n.state={animationStateClasses:o,height:i,overflow:r,shouldUseTransitions:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),i(t,[{key:"componentDidMount",value:function(){var e=this.state.height;this.contentElement&&this.contentElement.style&&this.hideContent(e)}},{key:"componentDidUpdate",value:function(e,t){var n,a=this,i=this.props,r=i.delay,o=i.duration,l=i.height,u=i.onAnimationEnd,d=i.onAnimationStart;if(this.contentElement&&l!==e.height){var m;this.showContent(t.height),this.contentElement.style.overflow="hidden";var b=this.contentElement.offsetHeight;this.contentElement.style.overflow="";var g=o+r,v=null,y={height:null,overflow:"hidden"},E="auto"===t.height;f(l)?(v=l<0?0:l,y.height=v):p(l)?(v=l,y.height=v):(v=b,y.height="auto",y.overflow=null),E&&(y.height=v,v=b);var w=(0,s.default)((c(m={},this.animationStateClasses.animating,!0),c(m,this.animationStateClasses.animatingUp,"auto"===e.height||l<e.height),c(m,this.animationStateClasses.animatingDown,"auto"===l||l>e.height),c(m,this.animationStateClasses.animatingToHeightZero,0===y.height),c(m,this.animationStateClasses.animatingToHeightAuto,"auto"===y.height),c(m,this.animationStateClasses.animatingToHeightSpecific,y.height>0),m)),S=this.getStaticStateClasses(y.height);this.setState({animationStateClasses:w,height:v,overflow:"hidden",shouldUseTransitions:!E}),clearTimeout(this.timeoutID),clearTimeout(this.animationClassesTimeoutID),E?(y.shouldUseTransitions=!0,n=function(){a.setState(y),h(d,{newHeight:y.height})},requestAnimationFrame(function(){requestAnimationFrame(function(){n()})}),this.animationClassesTimeoutID=setTimeout(function(){a.setState({animationStateClasses:S,shouldUseTransitions:!1}),a.hideContent(y.height),h(u,{newHeight:y.height})},g)):(h(d,{newHeight:v}),this.timeoutID=setTimeout(function(){y.animationStateClasses=S,y.shouldUseTransitions=!1,a.setState(y),"auto"!==l&&a.hideContent(v),h(u,{newHeight:v})},g))}}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeoutID),clearTimeout(this.animationClassesTimeoutID),this.timeoutID=null,this.animationClassesTimeoutID=null,this.animationStateClasses=null}},{key:"showContent",value:function(e){0===e&&(this.contentElement.style.display="")}},{key:"hideContent",value:function(e){0===e&&(this.contentElement.style.display="none")}},{key:"getStaticStateClasses",value:function(e){var t;return(0,s.default)((c(t={},this.animationStateClasses.static,!0),c(t,this.animationStateClasses.staticHeightZero,0===e),c(t,this.animationStateClasses.staticHeightSpecific,e>0),c(t,this.animationStateClasses.staticHeightAuto,"auto"===e),t))}},{key:"render",value:function(){var e,t=this,n=this.props,i=n.animateOpacity,o=n.applyInlineTransitions,l=n.children,u=n.className,f=n.contentClassName,p=n.duration,h=n.easing,m=n.delay,b=n.style,g=this.state,v=g.height,y=g.overflow,E=g.animationStateClasses,w=g.shouldUseTransitions,S=a({},b,{height:v,overflow:y||b.overflow});w&&o&&(S.transition="height "+p+"ms "+h+" "+m+"ms",b.transition&&(S.transition=b.transition+", "+S.transition),S.WebkitTransition=S.transition);var O={};i&&(O.transition="opacity "+p+"ms "+h+" "+m+"ms",O.WebkitTransition=O.transition,0===v&&(O.opacity=0));var C=(0,s.default)((c(e={},E,!0),c(e,u,u),e));return r.default.createElement("div",a({},function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];if(!n.length)return e;for(var i={},r=Object.keys(e),o=0;o<r.length;o++){var s=r[o];-1===n.indexOf(s)&&(i[s]=e[s])}return i}.apply(void 0,[this.props].concat(d)),{"aria-hidden":0===v,className:C,style:S}),r.default.createElement("div",{className:f,style:O,ref:function(e){return t.contentElement=e}},l))}}]),t}();m.propTypes={animateOpacity:o.default.bool,animationStateClasses:o.default.object,applyInlineTransitions:o.default.bool,children:o.default.any.isRequired,className:o.default.string,contentClassName:o.default.string,duration:o.default.number,delay:o.default.number,easing:o.default.string,height:o.default.oneOfType([o.default.string,o.default.number]),onAnimationEnd:o.default.func,onAnimationStart:o.default.func,style:o.default.object},m.defaultProps={animateOpacity:!1,animationStateClasses:u,applyInlineTransitions:!0,duration:250,delay:0,easing:"ease",style:{}},t.default=m},1137:function(e,t,n){},1138:function(e,t,n){},1173:function(e,t,n){var a=n(71).isFinite;e.exports=function(e){return"number"==typeof e&&a(e)}},1174:function(e,t,n){},1175:function(e,t,n){},1176:function(e,t,n){},1177:function(e,t,n){},1178:function(e,t,n){},1179:function(e,t,n){},1180:function(e,t,n){},1181:function(e,t,n){"use strict";e.exports=function(e){var t=0;return function(n){return e&&Array.isArray(e)&&e.length?(e.forEach(function(e){return n=function e(n,a){if(!n.fn||"function"!=typeof n.fn)return a;if(!(n.regex&&n.regex instanceof RegExp))return a;if("string"==typeof a){for(var i=n.regex,r=null,o=[];null!==(r=i.exec(a));){var s=r.index,l=r[0];o.push(a.substring(0,s)),o.push(n.fn(++t,r)),a=a.substring(s+l.length,a.length+1),i.lastIndex=0}return o.push(a),o}return Array.isArray(a)?a.map(function(t){return e(n,t)}):a}(e,n)}),n):n}}},1182:function(e,t,n){},1183:function(e,t,n){"use strict";(function(t){
/**
 * filesize
 *
 * @copyright 2018 Jason Mulligan <jason.mulligan@avoidwork.com>
 * @license BSD-3-Clause
 * @version 3.6.1
 */
!function(t){var n=/^(b|B)$/,a={iec:{bits:["b","Kib","Mib","Gib","Tib","Pib","Eib","Zib","Yib"],bytes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},jedec:{bits:["b","Kb","Mb","Gb","Tb","Pb","Eb","Zb","Yb"],bytes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]}},i={iec:["","kibi","mebi","gibi","tebi","pebi","exbi","zebi","yobi"],jedec:["","kilo","mega","giga","tera","peta","exa","zetta","yotta"]};function r(e){var t,r,o,s,l,c,u,d,f,p,h,m,b,g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},v=[],y=0,E=void 0,w=void 0;if(isNaN(e))throw new Error("Invalid arguments");return r=!0===g.bits,f=!0===g.unix,t=g.base||2,d=void 0!==g.round?g.round:f?1:2,p=void 0!==g.separator&&g.separator||"",h=void 0!==g.spacer?g.spacer:f?"":" ",b=g.symbols||g.suffixes||{},m=2===t&&g.standard||"jedec",u=g.output||"string",s=!0===g.fullform,l=g.fullforms instanceof Array?g.fullforms:[],E=void 0!==g.exponent?g.exponent:-1,o=t>2?1e3:1024,(c=(w=Number(e))<0)&&(w=-w),(-1===E||isNaN(E))&&(E=Math.floor(Math.log(w)/Math.log(o)))<0&&(E=0),E>8&&(E=8),0===w?(v[0]=0,v[1]=f?"":a[m][r?"bits":"bytes"][E]):(y=w/(2===t?Math.pow(2,10*E):Math.pow(1e3,E)),r&&(y*=8)>=o&&E<8&&(y/=o,E++),v[0]=Number(y.toFixed(E>0?d:0)),v[1]=10===t&&1===E?r?"kb":"kB":a[m][r?"bits":"bytes"][E],f&&(v[1]="jedec"===m?v[1].charAt(0):E>0?v[1].replace(/B$/,""):v[1],n.test(v[1])&&(v[0]=Math.floor(v[0]),v[1]=""))),c&&(v[0]=-v[0]),v[1]=b[v[1]]||v[1],"array"===u?v:"exponent"===u?E:"object"===u?{value:v[0],suffix:v[1],symbol:v[1]}:(s&&(v[1]=l[E]?l[E]:i[m][E]+(r?"bit":"byte")+(1===v[0]?"":"s")),p.length>0&&(v[0]=v[0].toString().replace(".",p)),v.join(h))}r.partial=function(e){return function(t){return r(t,e)}},e.exports=r}("undefined"!=typeof window&&window)}).call(this,n(40))},1184:function(e,t,n){},1217:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),r=n(2),o=n(5),s=n.n(o),l=n(9),c=n.n(l),u=n(135),d=n.n(u),f=(n(98),n(3)),p=n(16),h=n(338),m=n(339),b=n(340),g=n(190),v=n(26),y=n(189),E=n(8),w=n(1173),S=n.n(w),O=n(32),C=n(7),P=function(e){var t=e.className,n=void 0===t?"":t,i=e.color,r=void 0===i?"#000000":i,o=e.height,s=void 0===o?11:o,l=e.title,c=e.width,u=void 0===c?15:c;return a.createElement(C.a,{className:"icon-eye ".concat(n),height:s,title:l,viewBox:"0 0 15 11",width:u},a.createElement("path",{className:"fill-color",d:"M.118 5.857C1.233 8.855 3.986 10.98 7.21 10.98c3.223 0 5.976-2.125 7.09-5.123C13.187 2.86 10.434.735 7.21.735 3.986.735 1.233 2.86.118 5.857zM7.21 9.27c-1.78 0-3.224-1.528-3.224-3.413 0-1.885 1.444-3.414 3.224-3.414 1.78 0 3.223 1.53 3.223 3.414 0 1.885-1.444 3.414-3.223 3.414zm0-5.462c-1.07 0-1.935.915-1.935 2.05 0 1.133.864 2.048 1.935 2.048 1.07 0 1.934-.915 1.934-2.05 0-1.133-.864-2.048-1.934-2.048z",fill:r}))},x=function(e){var t=e.className,n=void 0===t?"":t,i=e.color,r=void 0===i?"#000000":i,o=e.height,s=void 0===o?11:o,l=e.title,c=e.width,u=void 0===c?11:c;return a.createElement(C.a,{className:"icon-comment ".concat(n),height:s,title:l,viewBox:"0 0 11 11",width:u},a.createElement("path",{className:"fill-color",d:"M9.556.932H1.492C.938.932.49 1.386.49 1.94l-.006 9.072L2.5 8.996h7.056c.554 0 1.008-.454 1.008-1.008V1.94c0-.554-.454-1.008-1.008-1.008zM2.5 4.46h6.048v1.008H2.5V4.46zm4.032 2.52H2.5V5.972h4.032V6.98zm2.016-3.024H2.5V2.948h6.048v1.008z",fill:r}))},j=n(455),_=function(e){var t=e.className,n=void 0===t?"":t,i=e.color,r=void 0===i?"#000000":i,o=e.height,s=void 0===o?10:o,l=e.title,c=e.width,u=void 0===c?10:c;return a.createElement(C.a,{className:"icon-pencil-solid ".concat(n),height:s,title:l,viewBox:"0 0 10 10",width:u},a.createElement("path",{className:"fill-color",d:"M.5 7.625V9.5h1.875l5.53-5.53-1.876-1.874L.5 7.626zM9.354 2.52c.195-.194.195-.51 0-.704L8.184.646C7.99.45 7.674.45 7.48.646l-.916.915L8.44 3.437l.914-.915z",fill:r}))},N=Object(r.f)({accessStatsViewDetails:{id:"boxui.accessStats.accessStatsViewDetails",defaultMessage:"View Details"},accessStatsViews:{id:"boxui.accessStats.accessStatsViews",defaultMessage:"Views"},accessStatsPreviews:{id:"boxui.accessStats.accessStatsPreviews",defaultMessage:"Previews"},accessStatsEdits:{id:"boxui.accessStats.accessStatsEdits",defaultMessage:"Edits"},accessStatsComments:{id:"boxui.accessStats.accessStatsComments",defaultMessage:"Comments"},accessStatsDownloads:{id:"boxui.accessStats.accessStatsDownloads",defaultMessage:"Downloads"}});n(1174);function k(){return(k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var M={preview:{icon:P,message:N.accessStatsPreviews},view:{icon:P,message:N.accessStatsViews},download:{icon:j.a,message:N.accessStatsDownloads},comment:{icon:x,message:N.accessStatsComments},edit:{icon:_,message:N.accessStatsEdits}},T=function(e){var t=e.type,n=e.count,i=void 0===n?0:n,o=e.hasCountOverflowed,s=void 0!==o&&o,l=e.openAccessStatsModal,c=e.statButtonProps,u=M[t],d=u.icon,f=u.message,p=a.createElement(a.Fragment,null,a.createElement(d,{color:"#2a62b9",height:10,width:14}),a.createElement("span",{className:"access-stats-label"},a.createElement(r.b,f)),a.createElement(r.c,{value:i}),s&&"+");return a.createElement("li",{className:"access-stats-item"},l?a.createElement(O.a,k({className:"access-stats-item-content",onClick:l},c),p):a.createElement("span",{className:"access-stats-item-content"},p))},A=function(e){var t=e.commentCount,n=e.commentStatButtonProps,i=e.downloadCount,r=e.downloadStatButtonProps,o=e.editCount,s=e.editStatButtonProps,l=e.hasCountOverflowed,c=void 0!==l&&l,u=e.isBoxNote,d=e.openAccessStatsModal,f=e.previewCount,p=e.previewStatButtonProps,h=e.viewStatButtonProps;return a.createElement("ul",{className:"access-stats-list"},a.createElement(T,{count:f,hasCountOverflowed:c,openAccessStatsModal:d,statButtonProps:u?h:p,type:u?"view":"preview"}),a.createElement(T,{count:o,hasCountOverflowed:c,openAccessStatsModal:d,statButtonProps:s,type:"edit"}),a.createElement(T,{count:t,hasCountOverflowed:c,openAccessStatsModal:d,statButtonProps:n,type:"comment"}),!u&&a.createElement(T,{count:i,hasCountOverflowed:c,openAccessStatsModal:d,statButtonProps:r,type:"download"}))};n(1175);function D(){return(D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var B=function(e){var t=e.commentCount,n=void 0===t?0:t,i=e.commentStatButtonProps,o=void 0===i?{}:i,s=e.downloadCount,l=void 0===s?0:s,c=e.downloadStatButtonProps,u=void 0===c?{}:c,d=e.editCount,f=void 0===d?0:d,p=e.editStatButtonProps,h=void 0===p?{}:p,m=e.errorMessage,b=e.hasCountOverflowed,g=void 0!==b&&b,v=e.isBoxNote,y=void 0!==v&&v,E=e.openAccessStatsModal,w=e.previewCount,S=void 0===w?0:w,C=e.previewStatButtonProps,P=void 0===C?{}:C,x=e.viewMoreButtonProps,j=void 0===x?{}:x,_=e.viewStatButtonProps,k=void 0===_?{}:_;return a.createElement("div",{className:"access-stats"},m?a.createElement("p",null,m):a.createElement(a.Fragment,null,a.createElement(A,{commentCount:n,commentStatButtonProps:o,downloadCount:l,downloadStatButtonProps:u,editCount:f,editStatButtonProps:h,hasCountOverflowed:g,isBoxNote:y,openAccessStatsModal:E,previewCount:S,previewStatButtonProps:P,viewStatButtonProps:k}),E&&a.createElement(O.a,D({className:"lnk access-stats-view-details",onClick:E},j),a.createElement(r.b,N.accessStatsViewDetails))))},F=n(27),R=n(342),H=n(352);function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z=Object(H.a)(Object(r.g)(function(e){var t=e.onAccessStatsClick,n=e.accessStats,a=void 0===n?{has_count_overflowed:!1}:n,o=e.file,s=e.error,l=e.intl,c=a.preview_count,u=a.comment_count,d=a.download_count,h=a.edit_count;if(!(S()(c)||S()(u)||S()(d)||S()(h)||s))return null;var m=s?l.formatMessage(s):void 0;return i.a.createElement(R.a,{interactionTarget:p.d.ACCESS_STATS,title:i.a.createElement(r.b,f.a.sidebarAccessStats)},i.a.createElement(B,{errorMessage:m,commentCount:u,commentStatButtonProps:L({},p.c,p.b.ACCESS_STATS.COMMENTS),downloadCount:d,downloadStatButtonProps:L({},p.c,p.b.ACCESS_STATS.DOWNLOADS),previewCount:c,previewStatButtonProps:L({},p.c,p.b.ACCESS_STATS.PREVIEWS),viewStatButtonProps:L({},p.c,p.b.ACCESS_STATS.VIEWS),editCount:h,editStatButtonProps:L({},p.c,p.b.ACCESS_STATS.EDITS),openAccessStatsModal:t,isBoxNote:Object(F.c)(o),viewMoreButtonProps:L({},p.c,p.b.ACCESS_STATS.VIEW_DETAILS)}))})),I=n(25),V=n(15),U=function(e){var t=e.className,n=void 0===t?"":t,i=e.height,r=void 0===i?32:i,o=e.color,s=void 0===o?V.b:o,l=e.title,c=e.strokeWidth,u=void 0===c?2:c,d=e.width,f=void 0===d?32:d;return a.createElement(C.a,{className:"bdl-IconAddTags ".concat(n),height:r,title:l,viewBox:"0 0 32 32",width:f},a.createElement("path",{className:"stroke-color",d:"M17.2061467,1.00185126 L27.1498219,1.46386359 C28.9452716,1.54913484 30.4471858,3.05104904 30.532457,4.84649871 L30.9981001,14.7938047 C31.0193171,15.2397423 30.8622236,15.6655102 30.557238,15.9704958 L16.4160731,30.1116607 C15.1678914,31.3598425 13.0689103,31.2828028 11.7315894,29.945482 L2.04962843,20.263521 C0.712307562,18.9262001 0.644949887,16.836901 1.89313163,15.5887192 L16.0342965,1.44755431 C16.3392821,1.14256872 16.760209,0.980634284 17.2061467,1.00185126 Z",fill:"none",stroke:s,strokeWidth:u}),a.createElement("circle",{className:"fill-color",fill:s,cx:"23.5",cy:"8.5",r:"2.5"}))},W=(n(1176),function(e){var t=e.name,n=e.tooltipPosition,i=void 0===n?"bottom-center":n,r=e.tooltipText;return a.createElement(I.a,{isDisabled:!r,position:i,text:r},a.createElement("h1",{className:"bdl-ClassifiedBadge"},a.createElement(U,{color:V.l,height:10,width:10,strokeWidth:3}),a.createElement("span",{className:"bdl-ClassifiedBadge-name"},t)))}),q=Object(r.f)({add:{id:"boxui.classification.add",defaultMessage:"Add"},addClassification:{id:"boxui.classification.addClassification",defaultMessage:"Add Classification"},classification:{id:"boxui.classification.classification",defaultMessage:"Classification"},edit:{id:"boxui.classification.edit",defaultMessage:"Edit"},missing:{id:"boxui.classification.missing",defaultMessage:"Not classified"}}),Z=(n(1177),function(){return a.createElement("h1",{className:"bdl-AddClassificationBadge"},a.createElement(U,{color:V.c,height:10,width:10,strokeWidth:3}),a.createElement(r.b,q.addClassification,function(e){return a.createElement("span",{className:"bdl-AddClassificationBadge-name"},e)}))}),K=(n(1178),function(e){var t=e.advisoryMessage,n=e.className,i=void 0===n?"":n,o=e.messageStyle,s=e.name,l=!!s,c=!!t,u=l&&c&&"tooltip"===o,d=l&&c&&"inline"===o,f=!l&&!o,p=!l&&"inline"===o;return a.createElement("article",{className:"bdl-Classification ".concat(i)},l&&a.createElement(W,{name:s,tooltipText:u?t:void 0}),f&&a.createElement(Z,null),d&&a.createElement("p",{className:"bdl-Classification-advisoryMessage"},t),p&&a.createElement("span",{className:"bdl-Classification-missingMessage"},a.createElement(r.b,q.missing)))});function Y(){return(Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function G(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var $=function(e){var t=e.className,n=void 0===t?"":t,a=e.isEditing,o=e.onEdit,s=G(e,["className","isEditing","onEdit"]),l=a?q.edit:q.add,c=a?"editclassification":"addclassification";return i.a.createElement(O.a,Y({className:"bdl-EditClassificationButton ".concat(n),"data-resin-target":c,onClick:o,type:"button"},s),i.a.createElement(r.b,l))},J=n(1121),Q=n(1);n(1179);function X(){return(X=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var ee=function(e){var t,n,a,o=e.classification,s=e.file,l=e.onEdit,u=!!l&&c()(s,Q.Hc,!1),d=!!c()(o,"name");return d||u?i.a.createElement(J.a,{buttonProps:(t={},n=p.c,a=p.d.CLASSIFICATION,n in t?Object.defineProperty(t,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[n]=a,t),className:"bcs-SidebarClassification",headerActionItems:u?i.a.createElement($,{className:"bcs-SidebarClassification-edit",isEditing:d,onEdit:l}):null,title:i.a.createElement(r.b,q.classification)},i.a.createElement(K,X({},o,{messageStyle:"inline"}))):null},te=n(1116),ne=n(6),ae=n.n(ne),ie=n(22),re=Object(r.f)({bookmarkExpiration:{id:"boxui.itemDetails.bookmarkExpiration",defaultMessage:"This bookmark will be deleted on {expiration}."},created:{id:"boxui.itemDetails.created",defaultMessage:"Created"},deleted:{id:"boxui.itemDetails.deleted",defaultMessage:"Deleted"},description:{id:"boxui.itemDetails.description",defaultMessage:"Description"},descriptionPlaceholder:{id:"boxui.itemDetails.descriptionPlaceholder",defaultMessage:"Enter a description"},enterpriseOwner:{id:"boxui.itemDetails.enterpriseOwner",defaultMessage:"Enterprise Owner"},fileExpiration:{id:"boxui.itemDetails.fileExpiration",defaultMessage:"This file will be deleted on {expiration}."},folderExpiration:{id:"boxui.itemDetails.folderExpiration",defaultMessage:"This folder will be deleted on {expiration}."},modified:{id:"boxui.itemDetails.modified",defaultMessage:"Modified"},owner:{id:"boxui.itemDetails.owner",defaultMessage:"Owner"},retentionPolicyDescription:{id:"boxui.itemDetails.retentionPolicyDescription",defaultMessage:"Policy"},retentionPolicyExpiration:{id:"boxui.itemDetails.retentionPolicyExpiration",defaultMessage:"Policy Expiration"},retentionPolicyExtend:{id:"boxui.itemDetails.retentionPolicyExtend",defaultMessage:"Extend"},savedVersions:{id:"boxui.itemDetails.savedVersions",defaultMessage:"{versionCount, number} Saved Versions"},sharedLinkExpiration:{id:"boxui.itemDetails.sharedLinkExpiration",defaultMessage:"This shared link will be disabled on {expiration}."},size:{id:"boxui.itemDetails.size",defaultMessage:"Size"},uploader:{id:"boxui.itemDetails.uploader",defaultMessage:"Uploader"},url:{id:"boxui.itemDetails.url",defaultMessage:"URL"},urlPlaceholder:{id:"boxui.itemDetails.urlPlaceholder",defaultMessage:"Enter a valid url"}});function oe(){return(oe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function se(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var le=function(e){var t=e.className,n=e.versionCount,a=e.onClick,o=se(e,["className","versionCount","onClick"]),s=i.a.createElement(r.b,oe({},re.savedVersions,{values:{versionCount:n}}));return a?i.a.createElement(ie.a,oe({className:ae()("lnk",t),onClick:a},o),s):i.a.createElement("div",{className:t},s)};le.defaultProps={className:""};var ce=le,ue=(n(1180),function(e){var t=e.onVersionHistoryClick,n=e.file,a=n.version_number,r=parseInt(a,10);return Object(F.c)(n)||!r||r<=1?null:i.a.createElement(ce,{className:"bcs-SidebarVersions","data-resin-target":p.b.VERSION_HISTORY,onClick:t,versionCount:r})}),de=n(11),fe=n.n(de),pe=function(e){var t=e.children,n=e.className,i=void 0===n?"":n,r=e.type,o=void 0===r?"warning":r;return a.createElement("div",{className:"inline-alert inline-alert-visible inline-alert-".concat(o," ").concat(i)},t)};function he(){return(he=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var me=function(e){var t=e.expiration;return i.a.createElement(pe,null,i.a.createElement(r.b,he({},re.sharedLinkExpiration,{values:{expiration:t}})))};me.propTypes={expiration:fe.a.node.isRequired};var be=me;function ge(){return(ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var ve=function(e){var t=e.expiration,n="";switch(e.itemType){case"file":n="fileExpiration";break;case"folder":n="folderExpiration";break;case"web_link":n="bookmarkExpiration"}return i.a.createElement(pe,null,i.a.createElement(r.b,ge({},re[n],{values:{expiration:t}})))};ve.propTypes={expiration:fe.a.node.isRequired,itemType:fe.a.oneOf(["file","folder","web_link"]).isRequired};var ye=ve,Ee=n(87),we=n(241),Se={month:"short",day:"numeric",year:"numeric"},Oe=function(e){var t=e.file,n=c()(t,"expires_at"),i=c()(t,"shared_link.unshared_at");return n||i?a.createElement(a.Fragment,null,!!n&&a.createElement(ye,{expiration:a.createElement(we.a,{date:Object(Ee.a)(new Date(n),6e4),dateFormat:Se,relative:!1}),itemType:"file"}),!!i&&a.createElement(be,{expiration:a.createElement(we.a,{date:Object(Ee.a)(new Date(i),6e4),dateFormat:Se,relative:!1})})):null},Ce=n(13),Pe=n.n(Ce),xe=n(1123);function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _e(){return(_e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function Ne(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Me(e,t){return(Me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Te(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ae(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var De=function(e){function t(e){var n,a,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,i=ke(t).call(this,e),n=!i||"object"!==je(i)&&"function"!=typeof i?Te(a):i,Ae(Te(Te(n)),"handleBlur",function(){var e=n.state.value;n.props.onDescriptionChange(e)}),Ae(Te(Te(n)),"handleChange",function(e){var t=e.currentTarget.value;n.setState({value:t})}),n.state={value:e.value||""},n}var n,i,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Me(e,t)}(t,a["PureComponent"]),n=t,(i=[{key:"componentWillReceiveProps",value:function(e){this.setState({value:e.value})}},{key:"render",value:function(){var e=this.props,t=e.intl,n=e.textAreaProps,i=this.state.value;return a.createElement(xe.a,_e({},n,{className:"description-textarea",maxLength:"255",maxRows:6,onBlur:this.handleBlur,onChange:this.handleChange,placeholder:t.formatMessage(re.descriptionPlaceholder),value:i}))}}])&&Ne(n.prototype,i),r&&Ne(n,r),t}();Ae(De,"defaultProps",{textAreaProps:{},value:""});var Be,Fe=Object(r.g)(De),Re=n(1117),He=n(50);function Le(e){return(Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ze(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function Ie(e){return(Ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ve(e,t){return(Ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ue(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function We(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var qe="valueMissing",Ze="typeMismatch",Ke=(We(Be={},qe,a.createElement(r.b,He.a.requiredFieldError)),We(Be,Ze,a.createElement(r.b,He.a.invalidURLError)),Be),Ye=function(e){function t(){var e,n,a,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),s=0;s<r;s++)o[s]=arguments[s];return a=this,i=(e=Ie(t)).call.apply(e,[this].concat(o)),n=!i||"object"!==Le(i)&&"function"!=typeof i?Ue(a):i,We(Ue(Ue(n)),"state",{error:"",value:n.props.value}),We(Ue(Ue(n)),"handleBlur",function(){if(n.inputEl){var e=n.inputEl.validity,t=e.valid,a=e.valueMissing;t?n.props.onValidURLChange(n.state.value):n.setState({error:a?qe:Ze})}}),We(Ue(Ue(n)),"handleChange",function(e){n.setState({value:e.currentTarget.value})}),We(Ue(Ue(n)),"handleFocus",function(){n.setState({error:""})}),n}var n,i,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ve(e,t)}(t,a["Component"]),n=t,(i=[{key:"componentWillReceiveProps",value:function(e){var t=e.value;t!==this.props.value&&this.setState({value:t})}},{key:"render",value:function(){var e=this,t=this.props.intl.formatMessage,n=this.state,i=n.error,r=n.value;return a.createElement(Re.a,{className:"url-input",error:i?Ke[i]:void 0,hideLabel:!0,inputRef:function(t){e.inputEl=t},isRequired:!0,label:t(re.url),onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,placeholder:t(re.urlPlaceholder),type:"url",value:r})}}])&&ze(n.prototype,i),r&&ze(n,r),t}(),Ge=Object(r.g)(Ye);function $e(){return($e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var Je={day:"numeric",month:"short",year:"numeric"},Qe=function(e){var t=e.dispositionTime,n=e.openModal,i=e.policyType,o=e.retentionPolicyDescription;return o?a.createElement(a.Fragment,null,a.createElement(r.b,$e({tagName:"dt"},re.retentionPolicyDescription)),a.createElement("dd",null,o),"indefinite"!==i?a.createElement(a.Fragment,null,a.createElement(r.b,$e({tagName:"dt"},re.retentionPolicyExpiration)),t?a.createElement("dd",null,a.createElement(r.a,$e({value:new Date(t)},Je)),n?a.createElement(ie.a,{className:"lnk",onClick:n},a.createElement(r.b,re.retentionPolicyExtend)):null):null):null):null},Xe=n(1181),et=n.n(Xe),tt=/(\r\n|\n\r|\n|\r)/g,nt=/\b(ht|f)tps?:\/\/[\w\._\-]+(:\d+)?(\/[\w\-_\.~\+\/#\?&%=:\[\]@!\$'\(\)\*;,]*)?/gim,at=function(e){var t=e.value;return et()([{regex:tt,fn:function(e){return i.a.createElement("br",{key:e})}},{regex:nt,fn:function(e,t){return i.a.createElement("a",{key:e,href:t[0],rel:"noopener noreferrer",target:"_blank"},t[0])}}])(t)};at.propTypes={value:fe.a.string};var it=at;n(1182);function rt(){return(rt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function ot(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.forEach(function(t){st(e,t,n[t])})}return e}function st(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var lt={year:"numeric",month:"short",day:"numeric",hour:"numeric",minute:"numeric"},ct=function(e){var t=e.createdAt,n=e.description,a=e.descriptionTextareaProps,o=void 0===a?{}:a,s=e.enterpriseOwner,l=e.modifiedAt,c=e.onDescriptionChange,u=e.onValidURLChange,d=e.owner,f=e.retentionPolicyProps,p=void 0===f?{}:f,h=e.size,m=e.trashedAt,b=e.uploader,g=e.url,v=Pe()("description_");return i.a.createElement("dl",{className:"item-properties"},n||c?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,re.description,function(e){return i.a.createElement("dt",{id:v},e)}),i.a.createElement("dd",null,c?i.a.createElement(Fe,{onDescriptionChange:c,textAreaProps:ot({},o,{"aria-labelledby":v}),value:n}):i.a.createElement(it,{value:n}))):null,!!g&&i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.url)),i.a.createElement("dd",null,u?i.a.createElement(Ge,{onValidURLChange:u,value:g}):g)),d?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.owner)),i.a.createElement("dd",null,d)):null,s?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.enterpriseOwner)),i.a.createElement("dd",null,s)):null,b?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.uploader)),i.a.createElement("dd",null,b)):null,t?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.created)),i.a.createElement("dd",null,i.a.createElement(r.a,rt({value:new Date(t)},lt)))):null,l?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.modified)),i.a.createElement("dd",null,i.a.createElement(r.a,rt({value:new Date(l)},lt)))):null,h?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.size)),i.a.createElement("dd",null,h)):null,m?i.a.createElement(i.a.Fragment,null,i.a.createElement(r.b,rt({tagName:"dt"},re.deleted)),i.a.createElement("dd",null,i.a.createElement(r.a,rt({value:new Date(m)},lt)))):null,i.a.createElement(Qe,p))};ct.propTypes={createdAt:fe.a.oneOfType([fe.a.number,fe.a.string]),description:fe.a.string,descriptionTextareaProps:fe.a.object,enterpriseOwner:fe.a.string,modifiedAt:fe.a.oneOfType([fe.a.number,fe.a.string]),onDescriptionChange:fe.a.func,onValidURLChange:fe.a.func,owner:fe.a.string,retentionPolicyProps:fe.a.object,size:fe.a.string,trashedAt:fe.a.oneOfType([fe.a.number,fe.a.string]),uploader:fe.a.string,url:fe.a.string};var ut=ct,dt=n(337),ft=n(1183),pt=n.n(ft),ht=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],mt={fi:["t","kt","Mt","Gt","Tt","Pt","Et","Zt","Yt"],fr:["o","Ko","Mo","Go","To","Po","Eo","Zo","Yo"],ru:["Б","КБ","МБ","ГБ","ТБ","ПБ","ЭБ","ЗБ","ЙБ"]},bt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"en",n={round:1},a=mt[t];return a&&(n.symbols=ht.reduce(function(e,t,n){return e[t]=a[n],e},{})),pt()(e,n)};function gt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.forEach(function(t){vt(e,t,n[t])})}return e}function vt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var yt=Object(r.g)(Object(H.a)(function(e){var t=e.file,n=e.onDescriptionChange,a=e.hasRetentionPolicy,r=e.retentionPolicy,o=e.onRetentionPolicyExtendClick,s=e.isLoading,l=e.intl;return i.a.createElement(dt.a,{isLoading:s},i.a.createElement(ut,{createdAt:t.content_created_at,description:t.description,descriptionTextareaProps:vt({},p.c,p.b.DESCRIPTION),modifiedAt:t.content_modified_at,onDescriptionChange:c()(t,"permissions.can_rename")?n:void 0,owner:c()(t,"owned_by.name"),retentionPolicyProps:a?gt({},r,{openModal:o}):{},size:bt(t.size,l.locale),uploader:c()(t,"created_by.name")}))})),Et=n(1115);n(1184);function wt(e){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function St(){return(St=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function Ot(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function Ct(e){return(Ct=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Pt(e,t){return(Pt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function jt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"DetailsSidebarComponent",function(){return Nt});var _t="".concat(Q.Kd,"_").concat(g.a);Object(y.b)(_t);var Nt=function(e){function t(e){var n,a,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,i=Ct(t).call(this,e),n=!i||"object"!==wt(i)&&"function"!=typeof i?xt(a):i,jt(xt(xt(n)),"descriptionChangeSuccessCallback",function(e){n.setState({file:e,fileError:void 0})}),jt(xt(xt(n)),"fetchFileSuccessCallback",function(e){n.setState({file:e,fileError:void 0})}),jt(xt(xt(n)),"fetchFileErrorCallback",function(e,t){n.setState({file:void 0}),n.props.onError(e,t,{e:e})}),jt(xt(xt(n)),"descriptionChangeErrorCallback",function(e){n.setState({file:e,fileError:{inlineError:{title:f.a.fileDescriptionInlineErrorTitleMessage,content:f.a.defaultInlineErrorContentMessage}}})}),jt(xt(xt(n)),"onDescriptionChange",function(e){var t=n.props.api,a=n.state.file;if(!a)throw Object(E.a)();e!==a.description&&t.getFileAPI().setFileDescription(a,e,n.descriptionChangeSuccessCallback,n.descriptionChangeErrorCallback)}),jt(xt(xt(n)),"fetchAccessStatsErrorCallback",function(e,t){if(n.props.hasAccessStats){var a,i=c()(e,"status")===Q.ld;a=i?{error:f.a.fileAccessStatsPermissionsError}:{maskError:{errorHeader:f.a.fileAccessStatsErrorHeaderMessage,errorSubHeader:f.a.defaultErrorMaskSubHeaderMessage}},n.setState({isLoadingAccessStats:!1,accessStats:void 0,accessStatsError:a}),n.props.onError(e,t,jt({e:e},Q.td,!i))}}),jt(xt(xt(n)),"fetchAccessStatsSuccessCallback",function(e){n.props.hasAccessStats&&n.setState({accessStats:e,accessStatsError:void 0,isLoadingAccessStats:!1})}),n.state={isLoadingAccessStats:!1},n.props.logger.onReadyMetric({endMarkName:_t}),n}var n,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pt(e,t)}(t,i.a.PureComponent),n=t,(a=[{key:"componentDidMount",value:function(){this.fetchFile(),this.props.hasAccessStats&&this.fetchAccessStats()}},{key:"componentDidUpdate",value:function(e){var t=this.props.hasAccessStats;e.hasAccessStats!==t&&(t?this.fetchAccessStats():this.setState({isLoadingAccessStats:!1,accessStats:void 0,accessStatsError:void 0}))}},{key:"fetchFile",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.fetchFileSuccessCallback,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.fetchFileErrorCallback,n=this.props,a=n.api,i=n.fileId;a.getFileAPI().getFile(i,e,t,{fields:v.g})}},{key:"fetchAccessStats",value:function(){var e=this.props,t=e.api,n=e.fileId;this.state.isLoadingAccessStats||(this.setState({isLoadingAccessStats:!0}),t.getFileAccessStatsAPI(!1).getFileAccessStats(n,this.fetchAccessStatsSuccessCallback,this.fetchAccessStatsErrorCallback))}},{key:"render",value:function(){var e=this.props,t=e.classification,n=e.hasProperties,a=e.hasNotices,o=e.hasAccessStats,s=e.hasClassification,l=e.hasRetentionPolicy,c=e.hasVersions,u=e.onAccessStatsClick,d=e.onVersionHistoryClick,h=e.onClassificationClick,m=e.onRetentionPolicyExtendClick,b=e.retentionPolicy,g=this.state,v=g.accessStats,y=g.accessStatsError,E=g.file,w=g.fileError,S=g.isLoadingAccessStats;return i.a.createElement(te.a,{className:"bcs-details",title:Et.a.getTitleForView(Q.be)},E&&a&&i.a.createElement("div",{className:"bcs-DetailsSidebar-notices"},i.a.createElement(Oe,{file:E})),E&&s&&i.a.createElement(ee,{classification:t,file:E,onEdit:h}),E&&o&&i.a.createElement(z,St({accessStats:v,file:E,onAccessStatsClick:u},y)),E&&n&&i.a.createElement(R.a,{interactionTarget:p.d.FILE_PROPERTIES,title:i.a.createElement(r.b,f.a.sidebarProperties)},c&&i.a.createElement(ue,{file:E,onVersionHistoryClick:d}),i.a.createElement(yt,St({file:E,onDescriptionChange:this.onDescriptionChange},w,{hasRetentionPolicy:l,isLoading:S,onRetentionPolicyExtendClick:m,retentionPolicy:b}))))}}])&&Ot(n.prototype,a),o&&Ot(n,o),t}();jt(Nt,"defaultProps",{hasNotices:!1,hasProperties:!1,hasAccessStats:!1,hasClassification:!1,hasRetentionPolicy:!1,hasVersions:!1,onError:s.a});t.default=d()([Object(b.a)(Q.Kd),Object(m.a)(Q.Kd),h.b])(Nt)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,