(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{1119:function(e,t,a){"use strict";var n=a(0),o=a(6),r=a.n(o),i=a(354),l=a(108),s=a(137),c=a(25);a(1140);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=function(e){var t=e.className,a=void 0===t?"":t,o=e.description,p=e.error,f=e.errorPosition,m=e.hideLabel,h=e.hideOptionalLabel,y=e.inputRef,v=e.isLoading,b=e.isRequired,g=e.isValid,E=e.label,O=e.labelTooltip,w=d(e,["className","description","error","errorPosition","hideLabel","hideOptionalLabel","inputRef","isLoading","isRequired","isValid","label","labelTooltip"]),C=r()(a,"text-input-container",{"show-error":!!p});return n.createElement("div",{className:C},n.createElement(l.a,{hideLabel:m,showOptionalText:!h&&!b,text:E,tooltip:O},!!o&&n.createElement("i",{className:"text-input-description"},o),n.createElement(c.a,{isShown:!!p,position:f||"middle-right",text:p||"",theme:"error"},n.createElement("input",u({ref:y,required:b},w))),v&&!g&&n.createElement(s.b,{className:"text-input-loading"}),g&&!v&&n.createElement(i.a,{className:"text-input-verified"})))};p.displayName="TextInput",t.a=p},1120:function(e,t,a){"use strict";var n=a(0),o=a(7);t.a=function(e){var t=e.className,a=void 0===t?"":t,r=e.color,i=void 0===r?"#999":r,l=e.height,s=void 0===l?14:l,c=e.title,u=e.width,d=void 0===u?14:u;return n.createElement(o.a,{className:"icon-edit ".concat(a),height:s,title:c,viewBox:"0 0 14 14",width:d},n.createElement("path",{className:"fill-color",d:"M3.21 7.89l6.47-6.48a2 2 0 0 1 2.88 2.78h-.05L6 10.72 3.21 7.89zM2.24 9l2.83 2.83L1.67 13c-.52.18-.79-.1-.62-.61z",fill:i}))}},1121:function(e,t,a){var n=a(1129),o=a(1132),r=a(1133),i=1,l=2;e.exports=function(e,t,a,s,c,u){var d=a&i,p=e.length,f=t.length;if(p!=f&&!(d&&f>p))return!1;var m=u.get(e);if(m&&u.get(t))return m==t;var h=-1,y=!0,v=a&l?new n:void 0;for(u.set(e,t),u.set(t,e);++h<p;){var b=e[h],g=t[h];if(s)var E=d?s(g,b,h,t,e,u):s(b,g,h,e,t,u);if(void 0!==E){if(E)continue;y=!1;break}if(v){if(!o(t,function(e,t){if(!r(v,t)&&(b===e||c(b,e,a,s,u)))return v.push(t)})){y=!1;break}}else if(b!==g&&!c(b,g,a,s,u)){y=!1;break}}return u.delete(e),u.delete(t),y}},1123:function(e,t,a){"use strict";var n=a(0),o=a(6),r=a.n(o),i=a(23),l=a.n(i),s=a(1138),c=a.n(s),u=a(46),d=a(225),p=a(22),f=a(15);a(1139);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function y(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var O=function(e){function t(e){var a,n,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=v(t).call(this,e),a=!o||"object"!==m(o)&&"function"!=typeof o?g(n):o,E(g(g(a)),"toggleVisibility",function(){var e=a.props,t=e.onOpen,n=e.onClose;a.setState(function(e){return{isOpen:!e.isOpen}},function(){var e=a.state.isOpen;e&&t?t(g(g(a))):!e&&n&&n(g(g(a)))})}),a.state={isOpen:e.isOpen},a}var a,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,n["Component"]),a=t,(o=[{key:"render",value:function(){var e=this.state.isOpen,t=this.props,a=t.animationDuration,o=t.buttonProps,i=void 0===o?{}:o,s=t.children,m=t.className,y=t.isBordered,v=t.hasStickyHeader,b=t.headerActionItems,g=t.title,E=r()("collapsible-card",{"is-open":e},{"is-bordered":y},m),O=i[u.b],w=l()(i,[u.b]),C=v?"collapsible-card-header has-sticky-header":"collapsible-card-header";return O&&(w[u.b]="".concat(O).concat(e?"collapse":"expand")),n.createElement("div",{className:E},n.createElement("div",{className:C},n.createElement(p.a,h({},w,{className:"collapsible-card-title",onClick:this.toggleVisibility,type:"button"}),g,n.createElement(d.a,{className:"collapsible-card-header-caret",color:f.s,width:8})),e&&b),n.createElement(c.a,{duration:a,height:e?"auto":0},n.createElement("div",{className:"collapsible-card-content"},s)))}}])&&y(a.prototype,o),i&&y(a,i),t}();E(O,"defaultProps",{buttonProps:{},className:"",isOpen:!0,animationDuration:100}),t.a=O},1126:function(e,t,a){var n=a(1127);e.exports=function(e,t){return n(e,t)}},1127:function(e,t,a){var n=a(1128),o=a(70);e.exports=function e(t,a,r,i,l){return t===a||(null==t||null==a||!o(t)&&!o(a)?t!=t&&a!=a:n(t,a,r,i,e,l))}},1128:function(e,t,a){var n=a(346),o=a(1121),r=a(1134),i=a(1137),l=a(258),s=a(61),c=a(257),u=a(348),d=1,p="[object Arguments]",f="[object Array]",m="[object Object]",h=Object.prototype.hasOwnProperty;e.exports=function(e,t,a,y,v,b){var g=s(e),E=s(t),O=g?f:l(e),w=E?f:l(t),C=(O=O==p?m:O)==m,S=(w=w==p?m:w)==m,j=O==w;if(j&&c(e)){if(!c(t))return!1;g=!0,C=!1}if(j&&!C)return b||(b=new n),g||u(e)?o(e,t,a,y,v,b):r(e,t,O,a,y,v,b);if(!(a&d)){var P=C&&h.call(e,"__wrapped__"),N=S&&h.call(t,"__wrapped__");if(P||N){var M=P?e.value():e,T=N?t.value():t;return b||(b=new n),v(M,T,a,y,b)}}return!!j&&(b||(b=new n),i(e,t,a,y,v,b))}},1129:function(e,t,a){var n=a(347),o=a(1130),r=a(1131);function i(e){var t=-1,a=null==e?0:e.length;for(this.__data__=new n;++t<a;)this.add(e[t])}i.prototype.add=i.prototype.push=o,i.prototype.has=r,e.exports=i},1130:function(e,t){var a="__lodash_hash_undefined__";e.exports=function(e){return this.__data__.set(e,a),this}},1131:function(e,t){e.exports=function(e){return this.__data__.has(e)}},1132:function(e,t){e.exports=function(e,t){for(var a=-1,n=null==e?0:e.length;++a<n;)if(t(e[a],a,e))return!0;return!1}},1133:function(e,t){e.exports=function(e,t){return e.has(t)}},1134:function(e,t,a){var n=a(161),o=a(513),r=a(191),i=a(1121),l=a(1135),s=a(1136),c=1,u=2,d="[object Boolean]",p="[object Date]",f="[object Error]",m="[object Map]",h="[object Number]",y="[object RegExp]",v="[object Set]",b="[object String]",g="[object Symbol]",E="[object ArrayBuffer]",O="[object DataView]",w=n?n.prototype:void 0,C=w?w.valueOf:void 0;e.exports=function(e,t,a,n,w,S,j){switch(a){case O:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case E:return!(e.byteLength!=t.byteLength||!S(new o(e),new o(t)));case d:case p:case h:return r(+e,+t);case f:return e.name==t.name&&e.message==t.message;case y:case b:return e==t+"";case m:var P=l;case v:var N=n&c;if(P||(P=s),e.size!=t.size&&!N)return!1;var M=j.get(e);if(M)return M==t;n|=u,j.set(e,t);var T=i(P(e),P(t),n,w,S,j);return j.delete(e),T;case g:if(C)return C.call(e)==C.call(t)}return!1}},1135:function(e,t){e.exports=function(e){var t=-1,a=Array(e.size);return e.forEach(function(e,n){a[++t]=[n,e]}),a}},1136:function(e,t){e.exports=function(e){var t=-1,a=Array(e.size);return e.forEach(function(e){a[++t]=e}),a}},1137:function(e,t,a){var n=a(514),o=1,r=Object.prototype.hasOwnProperty;e.exports=function(e,t,a,i,l,s){var c=a&o,u=n(e),d=u.length;if(d!=n(t).length&&!c)return!1;for(var p=d;p--;){var f=u[p];if(!(c?f in t:r.call(t,f)))return!1}var m=s.get(e);if(m&&s.get(t))return m==t;var h=!0;s.set(e,t),s.set(t,e);for(var y=c;++p<d;){var v=e[f=u[p]],b=t[f];if(i)var g=c?i(b,v,f,t,e,s):i(v,b,f,e,t,s);if(!(void 0===g?v===b||l(v,b,a,i,s):g)){h=!1;break}y||(y="constructor"==f)}if(h&&!y){var E=e.constructor,O=t.constructor;E!=O&&"constructor"in e&&"constructor"in t&&!("function"==typeof E&&E instanceof E&&"function"==typeof O&&O instanceof O)&&(h=!1)}return s.delete(e),s.delete(t),h}},1138:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},o=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),r=s(a(0)),i=s(a(11)),l=s(a(6));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var u={animating:"rah-animating",animatingUp:"rah-animating--up",animatingDown:"rah-animating--down",animatingToHeightZero:"rah-animating--to-height-zero",animatingToHeightAuto:"rah-animating--to-height-auto",animatingToHeightSpecific:"rah-animating--to-height-specific",static:"rah-static",staticHeightZero:"rah-static--height-zero",staticHeightAuto:"rah-static--height-auto",staticHeightSpecific:"rah-static--height-specific"},d=["animateOpacity","animationStateClasses","applyInlineTransitions","children","contentClassName","delay","duration","easing","height","onAnimationEnd","onAnimationStart"];function p(e){return!isNaN(parseFloat(e))&&isFinite(e)}function f(e){return"string"==typeof e&&e.search("%")===e.length-1&&p(e.substr(0,e.length-1))}function m(e,t){e&&"function"==typeof e&&e(t)}var h=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o="auto",r="visible";p(e.height)?(o=e.height<0?0:e.height,r="hidden"):f(e.height)&&(o=e.height,r="hidden"),a.animationStateClasses=n({},u,e.animationStateClasses);var i=a.getStaticStateClasses(o);return a.state={animationStateClasses:i,height:o,overflow:r,shouldUseTransitions:!1},a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.default.Component),o(t,[{key:"componentDidMount",value:function(){var e=this.state.height;this.contentElement&&this.contentElement.style&&this.hideContent(e)}},{key:"componentDidUpdate",value:function(e,t){var a,n=this,o=this.props,r=o.delay,i=o.duration,s=o.height,u=o.onAnimationEnd,d=o.onAnimationStart;if(this.contentElement&&s!==e.height){var h;this.showContent(t.height),this.contentElement.style.overflow="hidden";var y=this.contentElement.offsetHeight;this.contentElement.style.overflow="";var v=i+r,b=null,g={height:null,overflow:"hidden"},E="auto"===t.height;p(s)?(b=s<0?0:s,g.height=b):f(s)?(b=s,g.height=b):(b=y,g.height="auto",g.overflow=null),E&&(g.height=b,b=y);var O=(0,l.default)((c(h={},this.animationStateClasses.animating,!0),c(h,this.animationStateClasses.animatingUp,"auto"===e.height||s<e.height),c(h,this.animationStateClasses.animatingDown,"auto"===s||s>e.height),c(h,this.animationStateClasses.animatingToHeightZero,0===g.height),c(h,this.animationStateClasses.animatingToHeightAuto,"auto"===g.height),c(h,this.animationStateClasses.animatingToHeightSpecific,g.height>0),h)),w=this.getStaticStateClasses(g.height);this.setState({animationStateClasses:O,height:b,overflow:"hidden",shouldUseTransitions:!E}),clearTimeout(this.timeoutID),clearTimeout(this.animationClassesTimeoutID),E?(g.shouldUseTransitions=!0,a=function(){n.setState(g),m(d,{newHeight:g.height})},requestAnimationFrame(function(){requestAnimationFrame(function(){a()})}),this.animationClassesTimeoutID=setTimeout(function(){n.setState({animationStateClasses:w,shouldUseTransitions:!1}),n.hideContent(g.height),m(u,{newHeight:g.height})},v)):(m(d,{newHeight:b}),this.timeoutID=setTimeout(function(){g.animationStateClasses=w,g.shouldUseTransitions=!1,n.setState(g),"auto"!==s&&n.hideContent(b),m(u,{newHeight:b})},v))}}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeoutID),clearTimeout(this.animationClassesTimeoutID),this.timeoutID=null,this.animationClassesTimeoutID=null,this.animationStateClasses=null}},{key:"showContent",value:function(e){0===e&&(this.contentElement.style.display="")}},{key:"hideContent",value:function(e){0===e&&(this.contentElement.style.display="none")}},{key:"getStaticStateClasses",value:function(e){var t;return(0,l.default)((c(t={},this.animationStateClasses.static,!0),c(t,this.animationStateClasses.staticHeightZero,0===e),c(t,this.animationStateClasses.staticHeightSpecific,e>0),c(t,this.animationStateClasses.staticHeightAuto,"auto"===e),t))}},{key:"render",value:function(){var e,t=this,a=this.props,o=a.animateOpacity,i=a.applyInlineTransitions,s=a.children,u=a.className,p=a.contentClassName,f=a.duration,m=a.easing,h=a.delay,y=a.style,v=this.state,b=v.height,g=v.overflow,E=v.animationStateClasses,O=v.shouldUseTransitions,w=n({},y,{height:b,overflow:g||y.overflow});O&&i&&(w.transition="height "+f+"ms "+m+" "+h+"ms",y.transition&&(w.transition=y.transition+", "+w.transition),w.WebkitTransition=w.transition);var C={};o&&(C.transition="opacity "+f+"ms "+m+" "+h+"ms",C.WebkitTransition=C.transition,0===b&&(C.opacity=0));var S=(0,l.default)((c(e={},E,!0),c(e,u,u),e));return r.default.createElement("div",n({},function(e){for(var t=arguments.length,a=Array(t>1?t-1:0),n=1;n<t;n++)a[n-1]=arguments[n];if(!a.length)return e;for(var o={},r=Object.keys(e),i=0;i<r.length;i++){var l=r[i];-1===a.indexOf(l)&&(o[l]=e[l])}return o}.apply(void 0,[this.props].concat(d)),{"aria-hidden":0===b,className:S,style:w}),r.default.createElement("div",{className:p,style:C,ref:function(e){return t.contentElement=e}},s))}}]),t}();h.propTypes={animateOpacity:i.default.bool,animationStateClasses:i.default.object,applyInlineTransitions:i.default.bool,children:i.default.any.isRequired,className:i.default.string,contentClassName:i.default.string,duration:i.default.number,delay:i.default.number,easing:i.default.string,height:i.default.oneOfType([i.default.string,i.default.number]),onAnimationEnd:i.default.func,onAnimationStart:i.default.func,style:i.default.object},h.defaultProps={animateOpacity:!1,animationStateClasses:u,applyInlineTransitions:!0,duration:250,delay:0,easing:"ease",style:{}},t.default=h},1139:function(e,t,a){},1140:function(e,t,a){},1187:function(e,t,a){},1188:function(e,t,a){},1189:function(e,t,a){},1190:function(e,t,a){},1191:function(e,t,a){},1192:function(e,t,a){},1193:function(e,t,a){},1194:function(e,t,a){},1195:function(e,t,a){},1196:function(e,t,a){},1197:function(e,t,a){},1198:function(e,t,a){},1199:function(e,t,a){},1200:function(e,t,a){},1201:function(e,t,a){},1202:function(e,t,a){},1203:function(e,t,a){},1204:function(e,t,a){},1205:function(e,t,a){},1206:function(e,t,a){},1217:function(e,t,a){"use strict";a.r(t);var n=a(0),o=a.n(n),r=a(5),i=a.n(r),l=a(9),s=a.n(l),c=a(135),u=a.n(c),d=a(2),p=a(6),f=a.n(p),m=a(1126),h=a.n(m),y=a(59),v=a.n(y),b=a(1123),g=a(340),E=a(32),O=a(25),w=a(15),C=a(7),S=function(e){var t,a=e.className,o=void 0===a?"":a,r=e.color,i=e.title,l=e.type,s=e.width,c=void 0===s?16:s,u=e.height,d=void 0===u?16:u;return t=r||("cascade"===l?w.t:w.m),n.createElement(C.a,{className:"icon-metadata ".concat(o),height:d,title:i,viewBox:"0 0 16 16",width:c},n.createElement("path",{className:"fill-color",d:"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm-2.515-5.879L6.2 7.263l1.376 2.202a.5.5 0 0 0 .848 0L9.8 7.263l.715 2.858a.5.5 0 0 0 .97-.242l-1-4a.5.5 0 0 0-.909-.144L8 8.257 6.424 5.735a.5.5 0 0 0-.91.144l-1 4a.5.5 0 0 0 .971.242z",fill:t,fillRule:"evenodd"}))},j=a(456),P=a(1120),N=a(38);a(1187);function M(){return(M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var T=function(e){var t=e.className,a=void 0===t?"":t,o=e.description,r=e.inputProps,i=void 0===r?{}:r,l=e.isDisabled,s=e.isOn,c=e.isToggleRightAligned,u=void 0!==c&&c,d=e.label,p=e.name,m=e.onBlur,h=e.onChange,y=f()("toggle-container",a,{"is-toggle-right-aligned":u}),v=[n.createElement("div",{key:"toggle-simple-switch",className:"toggle-simple-switch"}),n.createElement("div",{key:"toggle-simple-label",className:"toggle-simple-label"},d)];return u&&(v=v.reverse()),n.createElement("div",{className:y},n.createElement("label",{className:"toggle-simple"},n.createElement("input",M({checked:s,className:"toggle-simple-input",disabled:l,name:p,onBlur:m,onChange:h,type:"checkbox"},i)),v),o?n.createElement("div",{className:"toggle-simple-description"},o):null)};a(1188);function k(){return(k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function x(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var I=function(){},A=function(e){var t=e.isDisabled,a=e.isSelected,o=void 0!==a&&a,r=e.description,i=e.hideLabel,l=void 0!==i&&i,s=e.label,c=e.name,u=e.value,d=x(e,["isDisabled","isSelected","description","hideLabel","label","name","value"]);return n.createElement("div",{className:"radio-container"},n.createElement("label",{className:"radio-label"},n.createElement("input",k({checked:o,disabled:t,name:c,onChange:I,type:"radio",value:u},d)),n.createElement("span",null),n.createElement("span",{className:l?"accessibility-hidden":""},s)),r?n.createElement("div",{className:"radio-description"},r):null)};function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function D(e){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function V(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function H(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var B=function(e){function t(e){var a,n,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=D(t).call(this,e),a=!o||"object"!==_(o)&&"function"!=typeof o?V(n):o,H(V(V(a)),"onChangeHandler",function(e){var t=e.target,n=a.props.onChange;t instanceof HTMLInputElement&&a.setState({value:t.value}),n&&n(e)}),a.state={value:e.value},a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(t,n["Component"]),a=t,(o=[{key:"render",value:function(){var e=this.props,t=e.children,a=e.className,o=e.name,r=this.state.value;return n.createElement("div",{className:"radio-group ".concat(a),onChange:this.onChangeHandler},n.Children.map(t,function(e){return n.createElement(A,{description:e.props.description,isDisabled:e.props.isDisabled,isSelected:e.props.value===r,label:e.props.label,name:o,value:e.props.value})}))}}])&&R(a.prototype,o),r&&R(a,r),t}();H(B,"defaultProps",{className:""});var K=B;var L=a(353),z=function(e){var t=e.className,a=void 0===t?"":t,o=e.color,r=void 0===o?"#F7931D":o,i=e.height,l=void 0===i?26:i,s=e.title,c=e.width,u=void 0===c?26:c;return n.createElement(C.a,{className:"icon-alert-default ".concat(a),title:s,height:l,width:u,viewBox:"0 0 26 26"},n.createElement("defs",null,n.createElement("circle",{id:"b",cx:"8",cy:"8",r:"8"}),n.createElement("filter",{x:"-46.9%",y:"-46.9%",width:"193.8%",height:"193.8%",filterUnits:"objectBoundingBox",id:"a"},n.createElement("feMorphology",{radius:".5",operator:"dilate",in:"SourceAlpha",result:"shadowSpreadOuter1"}),n.createElement("feOffset",{in:"shadowSpreadOuter1",result:"shadowOffsetOuter1"}),n.createElement("feGaussianBlur",{stdDeviation:"2",in:"shadowOffsetOuter1",result:"shadowBlurOuter1"}),n.createElement("feColorMatrix",{values:"0 0 0 0 0.733285502 0 0 0 0 0.733285502 0 0 0 0 0.733285502 0 0 0 0.5 0",in:"shadowBlurOuter1"}))),n.createElement("g",{transform:"translate(5 5)",fill:"none",fillRule:"evenodd"},n.createElement("use",{fill:"#000",filter:"url(#a)",xlinkHref:"#b"}),n.createElement("use",{fill:r,xlinkHref:"#b"}),n.createElement("path",{d:"M8.047 4.706v4.111",stroke:"#FFF",strokeWidth:"1.412",strokeLinecap:"round",strokeLinejoin:"round"}),n.createElement("circle",{fill:"#FFF",cx:"8.047",cy:"11.294",r:"1"})))},q=Object(d.f)({customTitle:{id:"boxui.metadataInstanceEditor.customTitle",defaultMessage:"Custom Metadata"},customAdd:{id:"boxui.metadataInstanceEditor.customAdd",defaultMessage:"Add"},customRemove:{id:"boxui.metadataInstanceEditor.customRemove",defaultMessage:"Remove"},customKey:{id:"boxui.metadataInstanceEditor.customKey",defaultMessage:"Key"},customKeyPlaceholder:{id:"boxui.metadataInstanceEditor.customKeyPlaceholder",defaultMessage:"e.g. Order Number"},customValue:{id:"boxui.metadataInstanceEditor.customValue",defaultMessage:"Value"},customValuePlaceholder:{id:"boxui.metadataInstanceEditor.customValuePlaceholder",defaultMessage:"e.g. 42"},customNewField:{id:"boxui.metadataInstanceEditor.customNewField",defaultMessage:"New Field"},customNewFieldMessage:{id:"boxui.metadataInstanceEditor.customNewFieldMessage",defaultMessage:"Add a custom metadata field. Other people will be able to see and search for this field."},customErrorRequired:{id:"boxui.metadataInstanceEditor.customErrorRequired",defaultMessage:"A key is required."},customErrorDuplicateKey:{id:"boxui.metadataInstanceEditor.customErrorDuplicateKey",defaultMessage:"A field with that key already exists."},customErrorInternalKey:{id:"boxui.metadataInstanceEditor.customErrorInternalKey",defaultMessage:"Keys cannot begin with a $."},invalidInput:{id:"boxui.metadataInstanceEditor.invalidValue",defaultMessage:"Invalid Input!"},invalidMetadataFieldType:{id:"boxui.metadataInstanceEditor.invalidMetadataFieldType",defaultMessage:"Invalid metadata field type!"},metadataEditTooltip:{id:"boxui.metadataInstanceEditor.editTooltip",defaultMessage:"Edit Metadata"},metadataFieldNoValue:{id:"boxui.metadataInstanceEditor.fieldNoValue",defaultMessage:"No Value"},metadataFieldSelectValue:{id:"boxui.metadataInstanceEditor.fieldSelectValue",defaultMessage:"Select Value"},metadataFieldMultiSelectValue:{id:"boxui.metadataInstanceEditor.fieldMultiSelectValue",defaultMessage:"Select Values"},metadataFieldSetValue:{id:"boxui.metadataInstanceEditor.fieldSetValue",defaultMessage:"Set Value"},metadataFieldSetDate:{id:"boxui.metadataInstanceEditor.fieldSetDate",defaultMessage:"Set Date"},metadataRemoveTemplate:{id:"boxui.metadataInstanceEditor.removeTemplate",defaultMessage:"Remove"},fileMetadataRemoveTemplateConfirm:{id:"boxui.metadataInstanceEditor.fileMetadataRemoveTemplateConfirm",defaultMessage:'Are you sure you want to delete "{metadataName}" and all of its values from this file?'},folderMetadataRemoveTemplateConfirm:{id:"boxui.metadataInstanceEditor.folderMetadataRemoveTemplateConfirm",defaultMessage:'Are you sure you want to delete "{metadataName}" and all of its values? Any metadata template values already applied to files in this folder will not be deleted.'},fileMetadataRemoveCustomTemplateConfirm:{id:"boxui.metadataInstanceEditor.fileMetadataRemoveCustomTemplateConfirm",defaultMessage:"Are you sure you want to delete this custom metadata and all of its values from this file?"},folderMetadataRemoveCustomTemplateConfirm:{id:"boxui.metadataInstanceEditor.folderMetadataRemoveCustomTemplateConfirm",defaultMessage:"Are you sure you want to delete this custom metadata and all of its values? Any metadata template values already applied to files in this folder will not be deleted."},metadataTemplateSearchPlaceholder:{id:"boxui.metadataInstanceEditor.templateSearchPlaceholder",defaultMessage:"Search all templates"},metadataTemplateAdd:{id:"boxui.metadataInstanceEditor.templateAdd",defaultMessage:"Add"},metadataTemplatesTitle:{id:"boxui.metadataInstanceEditor.templatesTitle",defaultMessage:"Templates"},metadataTemplatesNoResults:{id:"boxui.metadataInstanceEditor.templatesNoResults",defaultMessage:"No Results"},metadataTemplatesFetchFailed:{id:"boxui.metadataInstanceEditor.templatesFetchFailed",defaultMessage:"Sorry! We could not fetch templates. Please contact your administrator"},metadataTemplatesNoRemainingTemplates:{id:"boxui.metadataInstanceEditor.templatesNoRemainingTemplates",defaultMessage:"All templates have been added"},metadataTemplatesServerHasNoTemplates:{id:"boxui.metadataInstanceEditor.templatesServerHasNoTemplates",defaultMessage:"Zero templates"},metadataSave:{id:"boxui.metadataInstanceEditor.metadataSave",defaultMessage:"Save"},metadataCancel:{id:"boxui.metadataInstanceEditor.metadataCancel",defaultMessage:"Cancel"},metadataCascadePolicyEnabledInfo:{id:"boxui.metadataInstanceEditor.metadataCascadePolicyEnabledInfo",defaultMessage:"This template and its values are being cascaded to all items in this folder and its subfolders."},noMetadata:{id:"boxui.metadataInstanceEditor.noMetadata",defaultMessage:"No Metadata Applied"},noMetadataAddTemplate:{id:"boxui.metadataInstanceEditor.noMetadataAddTemplate",defaultMessage:"Click 'Add' in the top right to add metadata to this item"},enableCascadePolicy:{id:"boxui.metadataInstanceEditor.enableCascadePolicy",defaultMessage:"Enable Cascade Policy"},applyCascadePolicyText:{id:"boxui.metadataInstanceEditor.applyCascadePolicyText",defaultMessage:"Apply template and its values to all new and existing items in this folder and its subfolders."},cannotApplyCascadePolicyText:{id:"boxui.metadataInstanceEditor.cannotApplyCascadePolicyText",defaultMessage:"Cascade policy cannot be applied to custom metadata at this time."},cascadePolicyLearnMore:{id:"boxui.metadataInstanceEditor.cascadePolicyLearnMore",defaultMessage:"Learn more"},cascadePolicyModeQuestion:{id:"boxui.metadataInstanceEditor.cascadePolicyModeQuestion",defaultMessage:"In the case of conflicts when applying this template and its values to existing items, what would you like to do? This is a one time action."},cascadePolicySkipMode:{id:"boxui.metadataInstanceEditor.cascadePolicySkipMode",defaultMessage:"Skip and keep all existing template values"},cascadePolicyOverwriteMode:{id:"boxui.metadataInstanceEditor.cascadePolicyOverwriteMode",defaultMessage:"Overwrite all existing template values"},allAttributesAreHidden:{id:"boxui.metadataInstanceEditor.allAttributesAreHidden",defaultMessage:"All attributes in this template have been hidden."},noAttributesForTemplate:{id:"boxui.metadataInstanceEditor.noAttributesForTemplate",defaultMessage:"There are no attributes in this template."},operationNotImmediate:{id:"boxui.metadataInstanceEditor.operationNotImmediate",defaultMessage:"This operation is not immediate and may take some time."}});a(1189);function U(){return(U=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var W=function(e){var t=e.canEdit,a=e.isCascadingEnabled,o=e.isCascadingOverwritten,r=e.isCustomMetadata,i=e.onCascadeToggle,l=e.onCascadeModeChange,s=e.shouldShowCascadeOptions,c=a?n.createElement("div",{className:"metadata-cascade-notice"},n.createElement(d.b,q.metadataCascadePolicyEnabledInfo)):null;return t?n.createElement(n.Fragment,null,n.createElement("div",{className:"metadata-cascade-editor"},n.createElement("div",{className:"metadata-cascade-enable"},n.createElement("div",null,n.createElement(d.b,U({tagName:"strong"},q.enableCascadePolicy)),!r&&n.createElement(T,{className:"metadata-cascade-toggle ".concat(a?"cascade-on":"cascade-off"),isOn:a,label:"",onChange:function(e){return i(e.target.checked)}})),r?n.createElement("div",null,n.createElement(d.b,q.cannotApplyCascadePolicyText)):n.createElement("div",{className:"cascade-policy-text"},n.createElement(d.b,q.applyCascadePolicyText)," ",n.createElement(L.a,{className:"cascade-policy-learnmore-link",href:"https://community.box.com/t5/Organizing-and-Tracking-Content/Metadata/ta-p/30765",target:"_blank"},n.createElement(d.b,q.cascadePolicyLearnMore))))),s&&n.createElement("div",{className:"metadata-cascade-editor"},n.createElement("div",{className:"metadata-cascading-mode"},n.createElement(d.b,q.cascadePolicyModeQuestion),n.createElement("div",{className:"metadata-operation-not-immediate"},n.createElement(z,null),n.createElement("span",null,n.createElement(d.b,q.operationNotImmediate))),n.createElement(K,{className:"metadata-cascading-options",onChange:function(e){return l("overwrite"===e.target.value)},value:o?"overwrite":"skip"},n.createElement(A,{label:n.createElement(d.b,q.cascadePolicySkipMode),value:"skip"}),n.createElement(A,{label:n.createElement(d.b,q.cascadePolicyOverwriteMode),value:"overwrite"}))))):c},Z=a(136),J=a(1119);a(1190);var Q=Object(d.g)(function(e){var t=e.dataKey,a=e.dataValue,o=e.displayName,r=e.description,i=e.error,l=e.intl,s=e.onChange,c=e.onRemove,u=e.type,d=void 0===u?"text":u,p="";return"number"==typeof a?p=a:a&&(p=a),n.createElement(J.a,{className:"metadata-instance-editor-field-text",description:r,error:i,hideOptionalLabel:!0,label:o,onChange:function(e){var a=e.currentTarget;a.value?s(t,a.value):c(t)},placeholder:l.formatMessage(q.metadataFieldSetValue),type:d,value:p})}),$=a(350),G=a(23),X=a.n(G),Y=a(13),ee=a.n(Y),te=a(109);a(1191);function ae(){return(ae=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function ne(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var oe=function(e){var t=e.children,a=e.className,o=void 0===a?"":a,r=e.error,i=e.isDisabled,l=void 0!==i&&i,s=ne(e,["children","className","error","isDisabled"]);return n.createElement(O.a,{isShown:!!r,position:"middle-right",text:r,theme:"error"},n.createElement("button",ae({className:f()(o,"select-button",{"is-invalid":!!r}),disabled:l,type:"button"},s),t))},re=a(230),ie=a(1);a(1192);function le(e){return(le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function se(){return(se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function ce(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function ue(e){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function de(e,t){return(de=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fe(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function me(e){e.preventDefault(),e.stopPropagation()}var he=function(e){function t(e){var a,o,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,r=ue(t).call(this,e),a=!r||"object"!==le(r)&&"function"!=typeof r?pe(o):r,fe(pe(pe(a)),"setActiveItem",function(e){a.setState({activeItemIndex:e}),-1===e&&a.setActiveItemID(null)}),fe(pe(pe(a)),"setActiveItemID",function(e){var t=e?document.getElementById(e):null;a.setState({activeItemID:e}),Object(N.e)(t)}),fe(pe(pe(a)),"handleChange",function(e){var t=a.props.onChange;t&&t(e)}),fe(pe(pe(a)),"handleOptionSelect",function(e){var t=a.props.onOptionSelect;t&&t(e)}),fe(pe(pe(a)),"handleButtonClick",function(){a.state.isOpen?a.closeDropdown():a.openDropdown()}),fe(pe(pe(a)),"handleButtonKeyDown",function(e){var t=a.state.activeItemIndex;" "!==e.key&&"Enter"!==e.key||-1===t||e.preventDefault()}),fe(pe(pe(a)),"handleBlur",function(){a.state.isOpen&&a.closeDropdown()}),fe(pe(pe(a)),"handleKeyDown",function(e){var t=a.props.options,n=a.state,o=n.activeItemIndex,r=n.isOpen,i=t.length;switch(e.key){case"ArrowDown":if(me(e),r){var l=o===i-1?-1:o+1;a.setActiveItem(l)}else a.openDropdown();break;case"ArrowUp":if(me(e),r){var s=-1===o?i-1:o-1;a.setActiveItem(s)}else a.openDropdown();break;case"Enter":case" ":-1!==o&&r&&(me(e),a.selectOption(o),"Enter"===e.key&&a.closeDropdown());break;case"Escape":r&&(me(e),a.closeDropdown())}}),fe(pe(pe(a)),"openDropdown",function(){a.state.isOpen||a.setState({isOpen:!0})}),fe(pe(pe(a)),"closeDropdown",function(){a.state.isOpen&&a.setState({activeItemID:null,activeItemIndex:-1,isOpen:!1})}),fe(pe(pe(a)),"selectOption",function(e){a.props.multiple?a.selectMultiOption(e):(a.selectSingleOption(e),a.closeDropdown())}),fe(pe(pe(a)),"selectMultiOption",function(e){var t=a.props,n=t.defaultValue,o=t.options,r=t.selectedValues,i=null!=n,l=o[e];if(i&&n===l.value)a.selectSingleOption(e);else{var s=r.slice(0);if(function(e,t){var a=e.indexOf(t);-1===a?e.push(t):e.splice(a,1)}(s,l.value),i){var c=o.findIndex(function(e){return e.value===n});if(-1!==c){if(0===s.length)return void a.selectSingleOption(c);s.length>1&&s.includes(n)&&s.splice(c,1)}}a.handleChange(o.filter(function(e){return s.includes(e.value)})),a.handleOptionSelect(l)}}),fe(pe(pe(a)),"renderButtonText",function(){var e=a.props,t=e.options,n=e.placeholder,o=e.selectedValues,r=e.title;return 0===o.length&&n?n:r||t.filter(function(e){return o.includes(e.value)}).map(function(e){return e.displayText}).join(", ")}),fe(pe(pe(a)),"renderSelectButton",function(){var e=a.state,t=e.activeItemID,o=e.isOpen,r=a.props,i=r.buttonProps,l=r.isDisabled,s=r.className,c=r.error,u=a.renderButtonText(),d=function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){fe(e,t,a[t])})}return e}({},i,{"aria-activedescendant":t,"aria-autocomplete":"list","aria-expanded":o,"aria-owns":a.selectFieldID,className:s,isDisabled:l,onClick:a.handleButtonClick,onKeyDown:a.handleButtonKeyDown,role:"combobox",title:u});return n.createElement(oe,se({},d,{error:c}),u)}),fe(pe(pe(a)),"renderSelectOptions",function(){var e=a.props,t=e.options,o=e.selectedValues,r=e.separatorIndices,i=a.state.activeItemIndex,l=t.map(function(e,t){var r=e.displayText,l=e.value,s=o.includes(l),c={className:"select-option",key:t,onClick:function(e){e.preventDefault(),a.selectOption(t)},onMouseDown:function(e){e.preventDefault()},onMouseEnter:function(){a.setActiveItem(t)},setActiveItemID:a.setActiveItemID};return t===i&&(c.isActive=!0),n.createElement(re.a,c,n.createElement("div",{className:"select-option-check-icon"},s?n.createElement(te.a,{height:16,width:16}):null),r)});return r.forEach(function(e,t){l.splice(e+t,0,n.createElement("li",{key:"separator".concat(e),role:"separator"}))}),l}),a.selectFieldID=ee()("selectfield"),a.state={activeItemID:null,activeItemIndex:-1,isOpen:!1},a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&de(e,t)}(t,n["Component"]),a=t,(o=[{key:"selectSingleOption",value:function(e){var t=this.props,a=t.options,n=t.selectedValues,o=a[e];n.includes(o.value)||this.handleChange([o]),this.handleOptionSelect(o)}},{key:"render",value:function(){var e=this.props,t=e.className,a=e.multiple,o=this.state.isOpen,r={};return a&&(r["aria-multiselectable"]=!0),n.createElement("div",{className:f()(t,"select-container"),onBlur:this.handleBlur,onKeyDown:this.handleKeyDown},n.createElement("div",{className:"select-field"},this.renderSelectButton(),n.createElement("div",{className:f()(ie.Qd,{"is-visible":o})},n.createElement("ul",se({className:"overlay",id:this.selectFieldID,role:"listbox"},r),this.renderSelectOptions()))))}}])&&ce(a.prototype,o),r&&ce(a,r),t}();fe(he,"defaultProps",{buttonProps:{},isDisabled:!1,multiple:!1,options:[],selectedValues:[],separatorIndices:[]});var ye=he;function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(){return(be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function ge(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function Ee(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Oe(e){return(Oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ce(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Se=function(e){function t(){var e,a,n,o,r,i,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var s=arguments.length,c=new Array(s),u=0;u<s;u++)c[u]=arguments[u];return n=this,o=(e=Oe(t)).call.apply(e,[this].concat(c)),a=!o||"object"!==ve(o)&&"function"!=typeof o?Ce(n):o,r=Ce(Ce(a)),l=function(e){var t=a.props,n=t.onChange,o=t.fieldType;n&&1===e.length&&n(e[0],o)},(i="handleChange")in r?Object.defineProperty(r,i,{value:l,enumerable:!0,configurable:!0,writable:!0}):r[i]=l,a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&we(e,t)}(t,n["Component"]),a=t,(o=[{key:"render",value:function(){var e=this.props,t=e.isDisabled,a=e.selectedValue,o=e.placeholder,r=ge(e,["isDisabled","selectedValue","placeholder"]),i=X()(r,["defaultValue","multiple","onChange"]),l=null!==a;return i.selectedValues=l?[a]:[],n.createElement(ye,be({className:!l&&o?"placeholder":"",isDisabled:t,onChange:this.handleChange,placeholder:o},i))}}])&&Ee(a.prototype,o),r&&Ee(a,r),t}(),je=(a(1193),Object(d.g)(function(e){var t=e.dataKey,a=e.dataValue,o=e.displayName,r=e.description,i=e.intl,l=e.onChange,s=e.onRemove,c=e.options,u=(void 0===c?[]:c).map(function(e){return{displayText:e.key,value:e.key,isSelectable:!0}}),d=i.formatMessage(q.metadataFieldSelectValue);return u.unshift({displayText:d,value:d,isSelectable:!1}),n.createElement("div",{className:"metadata-instance-editor-field-enum"},n.createElement($.a,{text:o},!!r&&n.createElement("i",{className:"metadata-instance-editor-field-enum-desc"},r),n.createElement(Se,{onChange:function(e){e.isSelectable?l(t,e.value):s&&s(t)},options:u,selectedValue:Array.isArray(a)?a.join(", "):a||d})))})),Pe=a(229),Ne=a(87),Me=(a(1194),Object(d.g)(function(e){var t=e.dataKey,a=e.dataValue,o=e.displayName,r=e.description,i=e.intl,l=e.onChange,s=e.onRemove;return n.createElement(Pe.a,{className:"metadata-instance-editor-field-date",dateFormat:"utcISOString",description:r,displayFormat:{day:"numeric",month:"long",year:"numeric"},hideOptionalLabel:!0,label:o,onChange:function(e,a){a?l(t,a):s(t)},placeholder:i.formatMessage(q.metadataFieldSetDate),value:"string"==typeof a?Object(Ne.c)(a):void 0})})),Te="string",ke="properties",xe=/^[-+]?[0-9]*\.?[0-9]*$/,Ie=/^[-+]?[0-9]+$/,Ae=function(e,t){return"float"===e&&"string"==typeof t?function(e){return!!e.match(xe)}(t):"integer"!==e||"string"!=typeof t||function(e){return!!e.match(Ie)}(t)},_e=function(e){var t=e.dataKey,a=e.dataValue,o=e.displayName,r=e.description,i=e.error,l=e.onChange,s=e.onRemove,c=e.type;return n.createElement(Q,{dataKey:t,dataValue:a,description:r,displayName:o,error:i,onChange:function(e,t){Ae(c,t)&&l(e,t)},onRemove:s})},Re=function(e){var t=e.dataKey,a=e.dataValue,o=e.displayName,r=e.description,i=e.error,l=e.onChange,s=e.onRemove,c=e.type;return n.createElement(Q,{dataKey:t,dataValue:a,description:r,displayName:o,error:i,onChange:function(e,t){Ae(c,t)&&l(e,t)},onRemove:s})};function De(){return(De=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var Fe=function(e){var t=De({},e);return o.a.createElement(ye,De({},t,{multiple:!0}))},Ve=(a(1195),function(e){var t=e.dataKey,a=e.dataValue,o=e.displayName,r=e.description,i=e.onChange,l=e.onRemove,s=e.options,c=void 0===s?[]:s,u=n.createElement(d.b,q.metadataFieldMultiSelectValue);return n.createElement("div",{className:"metadata-instance-editor-field-multi-select"},n.createElement($.a,{text:o},!!r&&n.createElement("i",{className:"metadata-instance-editor-field-multi-select-desc"},r),n.createElement(Fe,{onChange:function(e){e.length?i(t,e.map(function(e){return e.value})):l(t)},options:c.map(function(e){return{displayText:e.key,value:e.key}}),placeholder:u,selectedValues:a})))});a(1196);function He(){return(He=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var Be=function(e){var t=e.dataValue,a=e.description,o=e.displayName,r=e.type,i=n.createElement(d.b,He({tagName:"i"},q.metadataFieldNoValue));return(t||"number"==typeof t)&&(i="string"==typeof t&&"date"===r?n.createElement(d.a,{day:"numeric",month:"long",value:Object(Ne.c)(t),year:"numeric"}):Array.isArray(t)?t.join(", "):t),n.createElement("dl",{className:"metadata-instance-editor-field-read-only"},n.createElement("dt",null,o),!!a&&n.createElement("i",{className:"metadata-instance-editor-field-read-only-desc"},a),n.createElement("dd",null,i))},Ke=function(e){var t=e.dataKey,a=e.dataValue,o=e.displayName,r=e.description,i=e.error,l=e.isHidden,s=e.canEdit,c=e.onChange,u=e.onRemove,p=e.options,f=e.type;if(l)return null;if(!s)return n.createElement(Be,{dataValue:a,description:r,displayName:o,type:f});if(!c||!u)throw new Error("Need to have onChange and onRemove");switch(f){case Te:return n.createElement(Q,{dataKey:t,dataValue:a,description:r,displayName:o,onChange:c,onRemove:u});case"float":return n.createElement(_e,{dataKey:t,dataValue:a,description:r,displayName:o,error:i,onChange:c,onRemove:u,type:f});case"integer":return n.createElement(Re,{dataKey:t,dataValue:a,description:r,displayName:o,error:i,onChange:c,onRemove:u,type:f});case"enum":return n.createElement(je,{dataKey:t,dataValue:a,description:r,displayName:o,onChange:c,onRemove:u,options:p});case"multiSelect":return n.createElement(Ve,{dataKey:t,dataValue:a,description:r,displayName:o,onChange:c,onRemove:u,options:p});case"date":return n.createElement(Me,{dataKey:t,dataValue:a,description:r,displayName:o,onChange:c,onRemove:u});default:return n.createElement(Z.a,{title:f},n.createElement(d.b,q.invalidMetadataFieldType))}},Le=function(e){return!!e.isHidden||!!e.hidden},ze=(a(1197),function(e){var t=e.canEdit,a=e.data,o=void 0===a?{}:a,r=e.errors,i=e.onFieldChange,l=e.onFieldRemove,s=e.template.fields,c=void 0===s?[]:s,u=c.length>0,p=u&&c.some(function(e){return!Le(e)}),f=!u,m=u&&!p;return n.createElement(n.Fragment,null,p&&c.map(function(e){return n.createElement(Ke,{key:e.id,canEdit:t,dataKey:e.key,dataValue:o[e.key],description:e.description,displayName:e.displayName,error:r[e.key],isHidden:Le(e),onChange:function(a,n){t&&i&&i(a,n,e.type)},onRemove:function(e){t&&l&&l(e)},options:e.options,type:e.type})}),m&&n.createElement("div",{className:"attributes-hidden-message"},n.createElement(d.b,q.allAttributesAreHidden)),f&&n.createElement("div",{className:"no-attributes-message"},n.createElement(d.b,q.noAttributesForTemplate)))}),qe=a(31),Ue=a(188),We=a(50),Ze=a(236);a(1198);function Je(e){return(Je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qe(){return(Qe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function $e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ge(e){return(Ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xe(e,t){return(Xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ye(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function et(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var tt=function(e){function t(){var e,a,o,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,l=new Array(i),s=0;s<i;s++)l[s]=arguments[s];return o=this,r=(e=Ge(t)).call.apply(e,[this].concat(l)),a=!r||"object"!==Je(r)&&"function"!=typeof r?Ye(o):r,et(Ye(Ye(a)),"state",{key:"",value:"",error:""}),et(Ye(Ye(a)),"onKeyChange",function(e){a.onChange(e,"key")}),et(Ye(Ye(a)),"onValueChange",function(e){a.onChange(e,"value")}),et(Ye(Ye(a)),"onAdd",function(){var e=a.state,t=e.key,o=e.value,r=a.props,i=r.onAdd,l=r.properties;Object.prototype.hasOwnProperty.call(l,t)?a.setState({error:n.createElement(d.b,q.customErrorDuplicateKey)}):t.startsWith("$")?a.setState({error:n.createElement(d.b,q.customErrorInternalKey)}):t?i(t,o):a.setState({error:n.createElement(d.b,q.customErrorRequired)})}),a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xe(e,t)}(t,n["PureComponent"]),a=t,(o=[{key:"onChange",value:function(e,t){var a=e.currentTarget;this.setState(et({error:""},t,a.value))}},{key:"render",value:function(){var e=this.props,t=e.intl,a=e.isCancellable,o=e.onCancel,r=this.state,i=r.key,l=r.value,s=r.error;return n.createElement("div",{className:"custom-new-field"},n.createElement("div",{className:"custom-new-field-header"},n.createElement(d.b,Qe({tagName:"h5"},q.customNewField)),n.createElement(Ue.a,{text:n.createElement(d.b,q.customNewFieldMessage)},n.createElement("div",{tabIndex:"-1"},n.createElement(Ze.a,{color:"#777",height:18,width:18})))),n.createElement(J.a,{error:s,isRequired:!0,label:n.createElement(d.b,q.customKey),onChange:this.onKeyChange,placeholder:t.formatMessage(q.customKeyPlaceholder),type:"text",value:i}),n.createElement(J.a,{hideOptionalLabel:!0,label:n.createElement(d.b,q.customValue),onChange:this.onValueChange,placeholder:t.formatMessage(q.customValuePlaceholder),type:"text",value:l}),n.createElement("div",{className:"custom-new-field-actions"},a&&n.createElement(qe.a,{"data-resin-target":"metadata-customfieldcancel",onClick:o,type:"button"},n.createElement(d.b,We.a.cancel)),n.createElement(qe.a,{"data-resin-target":"metadata-customfieldadd",onClick:this.onAdd,type:"button"},n.createElement(d.b,q.customAdd))))}}])&&$e(a.prototype,o),r&&$e(a,r),t}(),at=Object(d.g)(tt),nt=a(352),ot=function(e){var t=e.className,a=void 0===t?"":t,o=e.color,r=void 0===o?"#222":o,i=e.height,l=void 0===i?1:i,s=e.title,c=e.width,u=void 0===c?9:c;return n.createElement(C.a,{className:"icon-minus-thin ".concat(a),height:l,title:s,viewBox:"0 0 9 1",width:u},n.createElement("path",{className:"fill-color",d:"M0 0h9v1H0z",fill:r,fillRule:"evenodd"}))},rt=function(e){var t=e.className,a=void 0===t?"":t,o=e.color,r=void 0===o?"#222":o,i=e.height,l=void 0===i?9:i,s=e.title,c=e.width,u=void 0===c?9:c;return n.createElement(C.a,{className:"icon-plus-thin ".concat(a),height:l,title:s,viewBox:"0 0 9 9",width:u},n.createElement("path",{className:"fill-color",d:"M5 4V0H4v4H0v1h4v4h1V5h4V4H5z",fill:r,fillRule:"evenodd"}))},it=(a(1199),Object(d.g)(function(e){var t=e.intl,a=e.canEdit,o=e.isLast,r=e.dataKey,i=e.dataValue,l=e.onAdd,s=e.onChange,c=e.onRemove,u=n.createElement(qe.a,{"aria-label":t.formatMessage(q.customAdd),"data-resin-target":"metadata-customfieldnew",onClick:l,type:"button"},n.createElement(rt,{color:"#999"})),d=n.createElement(qe.a,{"aria-label":t.formatMessage(q.customRemove),"data-resin-target":"metadata-customfieldremove",onClick:function(){c&&c(r)},type:"button"},n.createElement(ot,{color:"#999"}));return n.createElement("div",{className:"metadata-instance-editor-field-custom"},n.createElement(Ke,{canEdit:a,dataKey:r,dataValue:i,displayName:r,onChange:s,onRemove:function(e){return s(e,"")},type:"string"}),a&&n.createElement("div",{className:"metadata-instance-editor-field-custom-actions"},o?n.createElement(nt.a,null,d,u):d))})),lt=function(e){var t=e.className,a=void 0===t?"":t,o=e.color,r=void 0===o?"#0061D5":o,i=e.title,l=e.width,s=void 0===l?140:l;return n.createElement(C.a,{className:"icon-add-metadata-empty-state ".concat(a),title:i,viewBox:"0 0 140 105",width:s},n.createElement("g",{fill:"none",fillRule:"evenodd"},n.createElement("path",{d:"M92 1.134V.492a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-90.5 83.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629A1.005 1.005 0 0 1 1.134 86H.49a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm136 5.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-29-78v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-80 3.5v-.642a.501.501 0 0 1 1-.002v.644c.152.088.278.214.366.366h.644a.5.5 0 0 1 .49.5c0 .276-.215.5-.49.5h-.644a1.005 1.005 0 0 1-.366.366v.644a.5.5 0 0 1-.5.49.506.506 0 0 1-.5-.505v-.629a1.005 1.005 0 0 1-.366-.366h-.644a.5.5 0 0 1-.49-.5c0-.276.215-.5.49-.5h.644c.088-.152.214-.278.366-.366zm-5.563 8.075v-.402a.313.313 0 0 1 .625 0v.402a.628.628 0 0 1 .23.229h.401c.17 0 .307.144.307.312a.308.308 0 0 1-.307.313h-.402a.628.628 0 0 1-.229.228v.402a.313.313 0 0 1-.625.004v-.406a.628.628 0 0 1-.228-.229h-.402A.313.313 0 0 1 22 24.25c0-.173.134-.313.307-.313h.402a.628.628 0 0 1 .229-.228zm-11.5 79v-.402a.313.313 0 0 1 .626 0v.402a.628.628 0 0 1 .228.228h.402c.17 0 .307.145.307.313a.308.308 0 0 1-.307.313h-.402a.628.628 0 0 1-.229.228v.402a.313.313 0 0 1-.624.004v-.406a.628.628 0 0 1-.23-.228h-.401a.313.313 0 0 1-.307-.313c0-.173.134-.313.307-.313h.402a.628.628 0 0 1 .229-.228z",fill:r}),n.createElement("path",{d:"M17 54c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H23.992C20.131 61 17 57.858 17 54zm-6 20c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H17.992C14.131 81 11 77.858 11 74zM5 94c0-3.866 3.133-7 6.992-7h106.016c3.861 0 6.992 3.142 6.992 7 0 3.866-3.133 7-6.992 7H11.992C8.131 101 5 97.858 5 94z",fill:r,fillOpacity:".1"}),n.createElement("path",{d:"M130 61a7 7 0 1 1 0-14 7 7 0 0 1 0 14zm-6 20a7 7 0 1 1 0-14 7 7 0 0 1 0 14zm0-2a5 5 0 1 0 0-10 5 5 0 0 0 0 10zm-6 22a7 7 0 1 1 0-14 7 7 0 0 1 0 14z",fill:r}),n.createElement("path",{d:"M117.944 95.189l3.215-3.832a.996.996 0 0 1 1.407-.121c.423.355.475.99.126 1.406l-3.861 4.6a.993.993 0 0 1-1.4.128l-3.078-2.583a.993.993 0 0 1-.116-1.403 1 1 0 0 1 1.401-.13l2.306 1.935zm12-40l3.215-3.832a.996.996 0 0 1 1.407-.121c.423.355.475.99.126 1.406l-3.861 4.6a.993.993 0 0 1-1.4.128l-3.078-2.583a.993.993 0 0 1-.116-1.403 1 1 0 0 1 1.401-.13l2.306 1.935z",fill:"#FFF"}),n.createElement("path",{d:"M25 38.49c0-.823.668-1.49 1.509-1.49H54.77c.833 0 1.788.605 2.139 1.365l3.207 6.942c.348.754-.036 1.365-.86 1.365H26.491c-.824 0-1.491-.665-1.491-1.49V38.49z",fill:"#FFF",stroke:r,strokeWidth:"2"}),n.createElement("path",{d:"M27 40.49c0-.823.668-1.49 1.494-1.49h25.164c.825 0 1.751.62 2.07 1.386l2.869 6.9c.318.766-.096 1.386-.933 1.386H28.51A1.498 1.498 0 0 1 27 47.182V40.49z",fill:"#22A7F0",fillOpacity:".1"}),n.createElement("rect",{fill:"#FFF",height:"53.197",rx:"1.5",stroke:r,strokeWidth:"2",width:"80",x:"25",y:"43"}),n.createElement("path",{d:"M27 82.214c0-.827.657-1.34 1.475-1.185 0 0 3.614 1.268 23.858 1.268 12.585 0 18.165 3.312 25.334 3.312 14.499 0 23.954-4.331 23.954-4.331.762-.31 1.379.115 1.379.936v10.284c0 .827-.68 1.497-1.501 1.497H28.501A1.503 1.503 0 0 1 27 92.498V82.214z",fill:r,fillOpacity:".1"})))},st=(a(1200),function(e){var t=e.canAdd;return n.createElement("div",{className:"metadata-instance-editor-no-instances"},n.createElement(lt,null),n.createElement("p",{className:"metadata-instance-editor-no-instances--call-out"},n.createElement(d.b,q.noMetadata)),t&&n.createElement("p",{className:"metadata-instance-editor-no-instances--how-add-template"},n.createElement(d.b,q.noMetadataAddTemplate)))});function ct(e){return(ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ut(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){ht(e,t,a[t])})}return e}function dt(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function pt(e){return(pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ft(e,t){return(ft=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function mt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ht(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var yt=function(e){function t(e){var a,n,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=pt(t).call(this,e),a=!o||"object"!==ct(o)&&"function"!=typeof o?mt(n):o,ht(mt(mt(a)),"onFieldChange",function(e,t){var n=a.props,o=n.canEdit,r=n.onFieldChange;o&&r&&r(e,t,Te)}),ht(mt(mt(a)),"onFieldRemove",function(e){var t=a.props,n=t.canEdit,o=t.onFieldRemove;n&&o&&o(e)}),ht(mt(mt(a)),"onAddFieldToggle",function(){a.setState(function(e){return{isAddFieldVisible:!e.isAddFieldVisible}})}),a.state={isAddFieldVisible:!1,properties:ut({},e.data)},a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ft(e,t)}(t,n["PureComponent"]),a=t,(o=[{key:"componentWillReceiveProps",value:function(e){this.setState({isAddFieldVisible:!1,properties:ut({},e.data)})}},{key:"render",value:function(){var e=this,t=this.props.canEdit,a=this.state,o=a.isAddFieldVisible,r=a.properties,i=Object.keys(r),l=t&&(o||0===i.length);return n.createElement(n.Fragment,null,i.map(function(a,l){return n.createElement(it,{key:a,canEdit:t,dataKey:a,dataValue:r[a],isLast:!o&&l===i.length-1,onAdd:e.onAddFieldToggle,onChange:e.onFieldChange,onRemove:e.onFieldRemove})}),!l&&0===i.length&&n.createElement(st,null),l&&n.createElement(at,{isCancellable:0!==i.length,onAdd:this.onFieldChange,onCancel:this.onAddFieldToggle,properties:this.props.data}))}}])&&dt(a.prototype,o),r&&dt(a,r),t}();ht(yt,"defaultProps",{canEdit:!0,data:{}});var vt=yt,bt=a(45),gt=(a(1201),function(e){var t=e.onCancel,a=e.onConfirm,o=e.confirmationMessage;return n.createElement("div",{className:"metadata-instance-confirm-cover"},n.createElement("div",{className:"metadata-instance-confim-container"},n.createElement("p",{className:"metadata-instance-confirm-text"},o),n.createElement("div",{className:"metadata-instance-confirm-buttons"},n.createElement(qe.a,{"data-resin-target":"metadata-confirmcancel",onClick:t,type:"button"},n.createElement(d.b,q.metadataCancel)),n.createElement(bt.a,{"data-resin-target":"metadata-confirmremove",onClick:a,type:"button"},n.createElement(d.b,q.customRemove)))))}),Et=(a(1202),function(e){var t=e.onCancel,a=e.onRemove,o=e.onSave;return n.createElement("div",{className:"metadata-instance-editor-footer"},n.createElement("div",{className:"metadata-instance-editor-footer-delete"},n.createElement(E.a,{"data-resin-target":"metadata-instanceremove",onClick:a,type:"button"},n.createElement(d.b,q.metadataRemoveTemplate))),n.createElement("div",{className:"metadata-instance-editor-footer-save-cancel"},n.createElement(qe.a,{"data-resin-target":"metadata-instancecancel",onClick:t,type:"button"},n.createElement(d.b,q.metadataCancel)),o&&n.createElement(bt.a,{"data-resin-target":"metadata-instancesave",onClick:o,type:"button"},n.createElement(d.b,q.metadataSave))))}),Ot=a(46);a(1203);function wt(e){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ct(){return(Ct=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function St(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Tt(e,t,a[t])})}return e}function jt(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Pt(e){return(Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Nt(e,t){return(Nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Mt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Tt(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var kt=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).reduce(function(e,t){var a=t.key,n=t.type;return e[a]=n,e},{})},xt=function(e,t,a){var n=e[t];switch(a){case"float":return parseFloat(n);case"integer":return parseInt(n,10);default:return n}},It=function(e){function t(e){var a,o,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,r=Pt(t).call(this,e),a=!r||"object"!==wt(r)&&"function"!=typeof r?Mt(o):r,Tt(Mt(Mt(a)),"onCancel",function(){var e=a.props,t=e.id,n=e.onModification;a.setState(a.getState(a.props)),n&&n(t,!1)}),Tt(Mt(Mt(a)),"onConfirmRemove",function(){a.setState({shouldConfirmRemove:!0})}),Tt(Mt(Mt(a)),"onConfirmCancel",function(){a.setState({shouldConfirmRemove:!1})}),Tt(Mt(Mt(a)),"onRemove",function(){if(a.isEditing()){var e=a.props,t=e.id,n=e.onRemove;n&&(n(t),a.setState({isBusy:!0}))}}),Tt(Mt(Mt(a)),"onSave",function(){var e=a.props,t=e.cascadePolicy,n=e.data,o=e.id,r=e.isDirty,i=e.isCascadingPolicyApplicable,l=e.onSave,s=a.state,c=s.data,u=s.errors,d=s.isCascadingEnabled,p=s.isCascadingOverwritten;a.isEditing()&&r&&l&&!Object.keys(u).length&&(a.setState({isBusy:!0,isEditing:!1,shouldShowCascadeOptions:!1}),l(o,a.createJSONPatch(c,n),i?{canEdit:!!t&&t.canEdit,id:t?t.id:void 0,isEnabled:d,overwrite:p}:void 0,v()(c)))}),Tt(Mt(Mt(a)),"onFieldChange",function(e,t,o){var r=a.state,i=r.data,l=r.errors;if(a.isEditing()&&!h()(i[e],t)){var s=Ae(o,t),c=St({},l),u=v()(i);u[e]=t,s?delete c[e]:c[e]=n.createElement(d.b,q.invalidInput),a.setState({data:u,errors:c},function(){a.setDirty(o)})}}),Tt(Mt(Mt(a)),"onFieldRemove",function(e){if(a.isEditing()){var t=a.state,n=t.data,o=t.errors,r=v()(n),i=St({},o);delete r[e],delete i[e],a.setState({data:r,errors:i},a.setDirty)}}),Tt(Mt(Mt(a)),"onCascadeToggle",function(e){a.props.isCascadingPolicyApplicable&&a.setState({isCascadingEnabled:e,shouldShowCascadeOptions:e},a.setDirty)}),Tt(Mt(Mt(a)),"onCascadeModeChange",function(e){a.props.isCascadingPolicyApplicable&&a.setState({isCascadingOverwritten:e},a.setDirty)}),Tt(Mt(Mt(a)),"renderDeleteMessage",function(e,t){var a;return a=t.templateKey===ke?e?"fileMetadataRemoveCustomTemplateConfirm":"folderMetadataRemoveCustomTemplateConfirm":e?"fileMetadataRemoveTemplateConfirm":"folderMetadataRemoveTemplateConfirm",n.createElement(d.b,Ct({},q[a],{values:{metadataName:t.displayName}}))}),Tt(Mt(Mt(a)),"setDirty",function(e){var t=a.props,n=t.id,o=t.isCascadingPolicyApplicable,r=t.onModification,i=a.state,l=i.data,s=i.isCascadingEnabled,c=i.isCascadingOverwritten,u=!h()(l,a.props.data),d=!1;o&&(d=c||s!==a.isCascadingEnabled(a.props)),r&&r(n,u||d,e)}),Tt(Mt(Mt(a)),"collapsibleRef",n.createRef()),Tt(Mt(Mt(a)),"toggleIsEditing",function(){a.setState(function(e){return{isEditing:!e.isEditing}})}),Tt(Mt(Mt(a)),"renderEditButton",function(){var e=a.props.isDirty,t=a.state.isBusy,o=a.canEdit(),r=a.isEditing(),i=f()("metadata-instance-editor-instance-edit",{"metadata-instance-editor-instance-is-editing":r});return!o||e||t?null:n.createElement(O.a,{position:"top-left",text:n.createElement(d.b,q.metadataEditTooltip)},n.createElement(E.a,{className:i,"data-resin-target":"metadata-instanceedit",onClick:a.toggleIsEditing,type:"button"},n.createElement(P.a,null)))}),a.state=a.getState(e),a.fieldKeyToTypeMap=kt(e.template.fields),a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Nt(e,t)}(t,n["PureComponent"]),a=t,(o=[{key:"componentWillReceiveProps",value:function(e){var t=e.hasError,a=e.isDirty,n=this.state.isEditing;t?this.setState({isBusy:!1,isEditing:!0}):this.props.isDirty&&!a&&(n?this.setState({isBusy:!1}):this.setState({isBusy:!1,isCascadingOverwritten:!1}))}},{key:"componentDidUpdate",value:function(){var e=this.collapsibleRef.current;e&&this.state.shouldConfirmRemove&&Object(N.e)(e,{block:"start",behavior:"smooth"})}},{key:"getState",value:function(e){return{data:v()(e.data),errors:{},isBusy:!1,isCascadingEnabled:this.isCascadingEnabled(e),isCascadingOverwritten:!1,isEditing:!1,shouldConfirmRemove:!1,shouldShowCascadeOptions:!1}}},{key:"getTitle",value:function(){var e=this.props,t=e.cascadePolicy,a=void 0===t?{}:t,o=e.hasError,r=e.isCascadingPolicyApplicable,i=e.template,l=i.templateKey===ke,s=r&&a.id?"cascade":"default";return n.createElement("span",{className:"metadata-instance-editor-instance-title"},n.createElement(S,{type:s}),n.createElement("span",{className:f()("metadata-instance-editor-instance-title-text",{"metadata-instance-editor-instance-has-error":o})},l?n.createElement(d.b,q.customTitle):i.displayName),o&&n.createElement(j.a,{color:w.r}))}},{key:"getConfirmationMessage",value:function(){var e=this.props,t=e.template,a=!e.isCascadingPolicyApplicable;return this.renderDeleteMessage(a,t)}},{key:"isCascadingEnabled",value:function(e){return!!e.cascadePolicy&&!!e.cascadePolicy.id}},{key:"createJSONPatch",value:function(e,t){var a=this,n=[],o=v()(e);return Object.keys(t).forEach(function(e){var r=a.fieldKeyToTypeMap[e],i=xt(t,e,r),l="/".concat(e);if(Object.prototype.hasOwnProperty.call(o,e)){var s=xt(o,e,r);h()(s,i)||(n.push({op:"test",path:l,value:i}),n.push({op:"replace",path:l,value:s}))}else n.push({op:"test",path:l,value:i}),n.push({op:"remove",path:l});delete o[e]}),Object.keys(o).forEach(function(e){var t=a.fieldKeyToTypeMap[e],r=xt(o,e,t);n.push({op:"add",path:"/".concat(e),value:r})}),n}},{key:"canEdit",value:function(){var e=this.props,t=e.canEdit,a=e.onModification,n=e.onRemove,o=e.onSave;return t&&"function"==typeof n&&"function"==typeof o&&"function"==typeof a}},{key:"isEditing",value:function(){var e=this.state.isEditing;return this.canEdit()&&e}},{key:"render",value:function(){var e=this.props,t=e.cascadePolicy,a=void 0===t?{}:t,o=e.isDirty,r=e.isCascadingPolicyApplicable,i=e.isOpen,l=e.template,s=l.fields,c=void 0===s?[]:s,u=this.state,d=u.data,p=u.errors,f=u.isBusy,m=u.isCascadingEnabled,h=u.shouldConfirmRemove,y=u.shouldShowCascadeOptions,v=u.isCascadingOverwritten,E=l.templateKey===ke,O=this.isEditing();if(!l||Le(l))return null;var w=50*(c.length+1);return n.createElement("div",{ref:this.collapsibleRef},n.createElement(b.a,{animationDuration:w,buttonProps:Tt({},Ot.b,"metadata-card"),hasStickyHeader:!0,headerActionItems:this.renderEditButton(),isBordered:!0,isOpen:i,title:this.getTitle()},h&&n.createElement(g.a,{isLoading:f},n.createElement(gt,{confirmationMessage:this.getConfirmationMessage(),onCancel:this.onConfirmCancel,onConfirm:this.onRemove})),!h&&n.createElement(g.a,{isLoading:f},n.createElement("div",{className:"metadata-instance-editor-instance"},r&&n.createElement(W,{canEdit:O&&!!a.canEdit,isCascadingEnabled:m,isCascadingOverwritten:v,isCustomMetadata:E,onCascadeModeChange:this.onCascadeModeChange,onCascadeToggle:this.onCascadeToggle,shouldShowCascadeOptions:y}),E?n.createElement(vt,{canEdit:O,data:d,onFieldChange:this.onFieldChange,onFieldRemove:this.onFieldRemove}):n.createElement(ze,{canEdit:O,data:d,errors:p,onFieldChange:this.onFieldChange,onFieldRemove:this.onFieldRemove,template:l})),O&&n.createElement(Et,{onCancel:this.onCancel,onRemove:this.onConfirmRemove,onSave:o?this.onSave:void 0}))))}}])&&jt(a.prototype,o),r&&jt(a,r),t}();Tt(It,"defaultProps",{data:{},isDirty:!1});var At=It,_t=function(e){var t=e.isCascadingPolicyApplicable,a=void 0!==t&&t,o=e.editors,r=void 0===o?[]:o,i=e.onModification,l=e.onRemove,s=e.onSave;return r.map(function(e){var t=e.isDirty,o=void 0!==t&&t,c=e.instance,u=e.hasError,d=void 0!==u&&u,p=e.template;return n.createElement(At,{canEdit:c.canEdit,cascadePolicy:c.cascadePolicy,data:c.data,hasError:d,id:c.id,isCascadingPolicyApplicable:a,isDirty:o,isOpen:1===r.length,key:"".concat(c.id,"-").concat(p.templateKey),onModification:i,onSave:s,onRemove:l,template:p})})},Rt=a(237),Dt=a(487),Ft=function(e){var t=e.className,a=void 0===t?"icon-search":t,o=e.color,r=void 0===o?w.u:o,i=e.height,l=void 0===i?14:i,s=e.title,c=e.width,u=void 0===c?14:c;return n.createElement(C.a,{className:"icon-search ".concat(a),height:l,title:s,viewBox:"0 0 14 14",width:u},n.createElement("path",{className:"fill-color",d:"M13.7,12.1L11.6,10l-1.1-0.2c0.9-1,1.4-2.4,1.4-3.9c0-3.3-2.7-6-6-6C2.7,0,0,2.7,0,6s2.7,6,6,6 c1.5,0,2.9-0.6,4-1.5l0.2,1l2.1,2.1c0.4,0.4,1,0.4,1.4,0l0,0C14.1,13.1,14.1,12.5,13.7,12.1z M6,10.4c-2.5,0-4.5-2-4.5-4.5 s2-4.5,4.5-4.5s4.5,2,4.5,4.5S8.4,10.4,6,10.4z",fill:r,fillRule:"evenodd"}))},Vt=a(217);a(1204);function Ht(e){return(Ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bt(){return(Bt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function Kt(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}function Lt(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function zt(e){return(zt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function qt(e,t){return(qt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ut(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Wt(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Zt=Object(d.f)({clearButtonTitle:{id:"boxui.searchForm.clearButtonTitle",defaultMessage:"Clear"},searchButtonTitle:{id:"boxui.searchForm.searchButtonTitle",defaultMessage:"Search"},searchLabel:{id:"boxui.searchForm.searchLabel",defaultMessage:"Search query"}}),Jt=function(e){function t(){var e,a,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=new Array(r),l=0;l<r;l++)i[l]=arguments[l];return n=this,o=(e=zt(t)).call.apply(e,[this].concat(i)),a=!o||"object"!==Ht(o)&&"function"!=typeof o?Ut(n):o,Wt(Ut(Ut(a)),"state",{isEmpty:!0}),Wt(Ut(Ut(a)),"onClearHandler",function(e){var t=a.props,n=t.onChange;t.shouldPreventClearEventPropagation&&e.stopPropagation(),a.searchInput&&(a.searchInput.value=""),a.setState({isEmpty:!0}),n&&n("")}),Wt(Ut(Ut(a)),"onChangeHandler",function(e){var t=e.target.value,n=a.props.onChange;a.setState({isEmpty:!t||!t.trim().length}),n&&n(t)}),Wt(Ut(Ut(a)),"onSubmitHandler",function(e){var t=e.target.elements[0].value,n=a.props.onSubmit;n&&n(t,e)}),Wt(Ut(Ut(a)),"setInputRef",function(e){a.searchInput=e,a.props.getSearchInput&&a.props.getSearchInput(a.searchInput)}),a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&qt(e,t)}(t,n["Component"]),a=t,(o=[{key:"componentWillReceiveProps",value:function(e){var t=e.value;void 0===t||t.trim()||this.setState({isEmpty:!0})}},{key:"render",value:function(){var e=this,t=this.props,a=t.action,o=t.className,r=t.intl,i=t.isLoading,l=t.method,s=t.name,c=t.queryParams,u=t.useClearButton,d=Kt(t,["action","className","intl","isLoading","method","name","queryParams","useClearButton"]),p=this.state.isEmpty,m=X()(d,["getSearchInput","onChange","onSubmit","required","shouldPreventClearEventPropagation"]),h=r.formatMessage,y=f()(o,"search-input-container"),v=f()("search-form",{"is-empty":p,"use-clear-button":u}),b=Object.keys(c).map(function(e,t){return n.createElement("input",{key:t,name:e,type:"hidden",value:c[e]})}),g=Object(Vt.a)(function(){return n.createElement("div",{className:"action-buttons"},n.createElement("button",{type:"button",className:"action-button search-button",title:h(Zt.searchButtonTitle)},n.createElement(Ft,null)),n.createElement("button",{className:"action-button clear-button",onClick:e.onClearHandler,title:h(Zt.clearButtonTitle),type:"button"},n.createElement(Dt.a,null)))});return n.createElement("div",{className:y},n.createElement("form",{action:a,className:v,method:l,onChange:this.onChangeHandler,onSubmit:this.onSubmitHandler,role:"search"},n.createElement("input",Bt({ref:this.setInputRef,"aria-label":h(Zt.searchLabel),autoComplete:"off",className:"search-input",name:s,onChange:function(){},type:"search"},m)),n.createElement(g,{isLoading:i,loadingIndicatorProps:{className:"search-form-loading-indicator"}}),b))}}])&&Lt(a.prototype,o),r&&Lt(a,r),t}();Wt(Jt,"defaultProps",{action:void 0,method:"get",name:"search",queryParams:{},useClearButton:!1});var Qt=Object(d.g)(Jt),$t=a(22),Gt=a(137),Xt=a(182),Yt=a(344);a(1205);function ea(e){return(ea="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ta(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function aa(e){return(aa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function na(e,t){return(na=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function oa(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ra(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function ia(){return(ia=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function la(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var sa=function(e){var t=e.inputProps,a=void 0===t?{}:t,o=la(e,["inputProps"]);return n.createElement(Qt,ia({},a,o,{shouldPreventClearEventPropagation:!0,"data-resin-target":"metadata-templatesearch"}))},ca=function(e,t){return e.filter(function(e){return-1===t.findIndex(function(t){return t.templateKey===e.templateKey&&t.scope===e.scope})})},ua=function(e){function t(e){var a,o,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o=this,r=aa(t).call(this,e),a=!r||"object"!==ea(r)&&"function"!=typeof r?oa(o):r,ra(oa(oa(a)),"getDropdown",function(){var e=a.props,t=e.isDropdownBusy,o=e.onAdd,r=e.activeTemplate,i=e.defaultTemplateIcon,l=e.activeTemplateIcon,s=e.templates,c=e.title,u=e.usedTemplates,p=a.state.templates,m=ca(s,u).length>0,h=s.length>0,y=p.length>0,v=null;if(t)v=n.createElement(Gt.b,{className:"metadata-instance-editor-template-message template-dropdown-loading-indicator"});else if(!h||!m||!y){var b={id:""};h?m?y||(b=q.metadataTemplatesNoResults):b=q.metadataTemplatesNoRemainingTemplates:b=q.metadataTemplatesServerHasNoTemplates,v=n.createElement("i",{className:"metadata-instance-editor-template-message"},n.createElement(d.b,b))}var g=p.map(function(e){var t=r&&r.id===e.id,o=f()("metadata-template-dropdown-select-template",{"metadata-template-dropdown-is-selected":t});return n.createElement(re.a,{key:e.id},n.createElement($t.a,{className:o,tabIndex:"-1",type:"button"},t?l:i,a.getTemplateName(e)))});return n.createElement(n.Fragment,null,n.createElement(Rt.a,{className:"metadata-instance-editor-template-dropdown-menu",title:c,isAlwaysOpen:!0,onSelect:function(e){o(p[e])},selector:a.getSelector(),shouldScroll:!0},v?null:g),v)}),ra(oa(oa(a)),"getSelector",function(){var e=a.props.intl,t=a.state.filterText;return n.createElement(sa,{label:"",onChange:a.handleUserInput,placeholder:e.formatMessage(q.metadataTemplateSearchPlaceholder),type:"text",useClearButton:!0,value:t})}),ra(oa(oa(a)),"handleUserInput",function(e){var t=a.props,n=t.templates,o=t.usedTemplates,r=e,i=ca(n,o);a.setState({filterText:r,templates:i.filter(function(e){return(e.templateKey===ke?q.customTitle.defaultMessage:e.displayName).toLowerCase().includes(r.toLowerCase())})})}),ra(oa(oa(a)),"onOpen",function(){var e=a.props,t=e.onDropdownToggle,n=e.templates,o=e.usedTemplates;t&&t(!0),a.setState({isDropdownOpen:!0,filterText:"",templates:ca(n,o)})}),ra(oa(oa(a)),"onClose",function(){var e=a.props.onDropdownToggle;e&&e(!1),a.setState({isDropdownOpen:!1})}),ra(oa(oa(a)),"renderEntryButton",function(){var e=a.props.entryButton,t=a.state.isDropdownOpen,o=f()("lnk",{"is-toggled":t});return e||n.createElement($t.a,{"data-resin-target":"metadata-templateaddmenu",className:o,type:"button"},n.createElement(Yt.a,null,n.createElement(d.b,q.metadataTemplateAdd)))}),a.state={isDropdownOpen:!1,filterText:"",templates:ca(e.templates,e.usedTemplates)},a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&na(e,t)}(t,n["PureComponent"]),a=t,(o=[{key:"componentWillReceiveProps",value:function(e){this.setState({templates:ca(e.templates,e.usedTemplates)})}},{key:"getTemplateName",value:function(e){return e.templateKey===ke?n.createElement(d.b,ia({className:"template-display-name"},q.customTitle)):n.createElement("div",{className:"template-display-name"},e.displayName)}},{key:"render",value:function(){var e=this.props.className,t=f()("metadata-instance-editor-template-dropdown-flyout",e);return n.createElement(Xt.a,{className:t,closeOnClick:!0,closeOnClickOutside:!0,onClose:this.onClose,onOpen:this.onOpen,position:"bottom-left",shouldDefaultFocus:!0},this.renderEntryButton(),n.createElement(Xt.b,null,this.getDropdown()))}}])&&ta(a.prototype,o),r&&ta(a,r),t}(),da=Object(d.g)(ua),pa=a(80),fa=a(3),ma=a(341),ha=a(342),ya=a(8),va=(a(98),a(343)),ba=a(189),ga=a(190),Ea=a(1118),Oa=a(1117);a(1206);function wa(e){return(wa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ca(){return(Ca=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function Sa(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Ta(e,t,a[t])})}return e}function ja(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Pa(e){return(Pa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Na(e,t){return(Na=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ma(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ta(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}a.d(t,"MetadataSidebarComponent",function(){return xa});var ka="".concat(ie.Ld,"_").concat(ga.a);Object(ba.b)(ka);var xa=function(e){function t(e){var a,n,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=Pa(t).call(this,e),a=!o||"object"!==wa(o)&&"function"!=typeof o?Ma(n):o,Ta(Ma(Ma(a)),"state",{isLoading:!1}),Ta(Ma(Ma(a)),"onRemove",function(e){var t=a.props.api,n=a.state.file,o=a.getEditor(e);o&&n&&t.getMetadataAPI(!1).deleteMetadata(n,o.template,function(){return a.onRemoveSuccessHandler(o)},a.onApiError)}),Ta(Ma(Ma(a)),"onAddSuccessHandler",function(e){var t=a.state.editors,n=(void 0===t?[]:t).slice(0);n.push(e),a.setState({editors:n,isLoading:!1})}),Ta(Ma(Ma(a)),"onAdd",function(e){var t=a.props.api,n=a.state.file;n&&(a.setState({isLoading:!0}),t.getMetadataAPI(!1).createMetadata(n,e,a.onAddSuccessHandler,a.onApiError))}),Ta(Ma(Ma(a)),"onSave",function(e,t){var n=a.props.api,o=a.state.file,r=a.getEditor(e);r&&o&&n.getMetadataAPI(!1).updateMetadata(o,r.template,t,function(e){a.replaceEditor(r,e)},function(e,t){a.onSaveErrorHandler(r,e,t)})}),Ta(Ma(Ma(a)),"onModification",function(e,t){var n=a.getEditor(e);if(n){var o=Sa({},n,{isDirty:t});a.replaceEditor(n,o)}}),Ta(Ma(Ma(a)),"fetchMetadataErrorCallback",function(e,t){a.onApiError(e,t,{editors:void 0,error:fa.a.sidebarMetadataFetchingErrorContent,templates:void 0})}),Ta(Ma(Ma(a)),"fetchMetadataSuccessCallback",function(e){var t=e.editors,n=e.templates;a.setState({editors:t.slice(0),error:void 0,isLoading:!1,templates:n.slice(0)})}),Ta(Ma(Ma(a)),"fetchFileErrorCallback",function(e,t){a.onApiError(e,t,{error:fa.a.sidebarFileFetchingErrorContent,file:void 0})}),Ta(Ma(Ma(a)),"fetchFileSuccessCallback",function(e){var t=a.state.file,n=s()(t,ie.Hc,!1),o=s()(e,ie.Hc,!1),r=!t||n!==o?a.fetchMetadata:i.a;a.setState({file:e},r)}),a.props.logger.onReadyMetric({endMarkName:ka}),a}var a,o,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Na(e,t)}(t,n["PureComponent"]),a=t,(o=[{key:"componentDidMount",value:function(){this.fetchFile()}},{key:"onApiError",value:function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=this.props.onError,o=e.status,r=Object(ya.d)(o);this.setState(Ca({error:fa.a.sidebarMetadataEditingErrorContent,isLoading:!1},a)),n(e,t,Ta({error:e},ie.td,r))}},{key:"canEdit",value:function(){var e=this.state.file;return s()(e,ie.Hc,!1)}},{key:"getEditor",value:function(e){var t=this.state.editors;return(void 0===t?[]:t).find(function(t){return t.instance.id===e})}},{key:"onRemoveSuccessHandler",value:function(e){var t=this.state.editors,a=void 0===t?[]:t,n=a.slice(0);n.splice(a.indexOf(e),1),this.setState({editors:n})}},{key:"replaceEditor",value:function(e,t){var a=this.state.editors,n=void 0===a?[]:a,o=n.slice(0);o.splice(n.indexOf(e),1,t),this.setState({editors:o})}},{key:"onSaveErrorHandler",value:function(e,t,a){var n=Sa({},e,{hasError:!0});this.replaceEditor(e,n),this.onApiError(t,a)}},{key:"fetchMetadata",value:function(){var e=this.props,t=e.api,a=e.isFeatureEnabled,n=this.state.file;n&&t.getMetadataAPI(!1).getMetadata(n,this.fetchMetadataSuccessCallback,this.fetchMetadataErrorCallback,a,{refreshCache:!0})}},{key:"fetchFile",value:function(){var e=this.props,t=e.api,a=e.fileId;t.getFileAPI().getFile(a,this.fetchFileSuccessCallback,this.fetchFileErrorCallback,{fields:[ie.uc,ie.Gc],refreshCache:!0})}},{key:"render",value:function(){var e=this.state,t=e.editors,a=e.file,o=e.error,r=e.isLoading,i=e.templates,l=!!a&&!!i&&!!t,s=!o&&!l,c=this.canEdit(),u=l&&c,p=l&&0===t.length;return n.createElement(Ea.a,{actions:u?n.createElement(da,{hasTemplates:i&&0!==i.length,isDropdownBusy:!1,onAdd:this.onAdd,templates:i,usedTemplates:t.map(function(e){return e.template})}):null,className:"bcs-metadata",title:Oa.a.getTitleForView(ie.ce)},o&&n.createElement(Z.a,{title:n.createElement(d.b,fa.a.error)},n.createElement(d.b,o)),s&&n.createElement(pa.a,null),l&&n.createElement(g.a,{className:"metadata-instance-editor",isLoading:r},p?n.createElement(st,{canAdd:c}):n.createElement(_t,{editors:t,onModification:this.onModification,onRemove:this.onRemove,onSave:this.onSave})))}}])&&ja(a.prototype,o),r&&ja(a,r),t}();Ta(xa,"defaultProps",{isFeatureEnabled:!0});t.default=u()([Object(va.a)(ie.Ld),Object(ha.a)(ie.Ld),ma.b])(xa)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,